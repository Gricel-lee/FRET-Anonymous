[
    {
        "reqid": "R71",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "The probability that the system will crash within the next 10 years is at most 2%.",
        "comments": "",
        "fulltext": "System shall with probability <= 0.02 within 10 ticks satisfy crash",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "crash"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<=",
                "0.02"
            ],
            "probabilityTextRange": [
                13,
                36
            ],
            "duration": "10",
            "timingTextRange": [
                38,
                52
            ],
            "post_condition": "(crash)",
            "responseTextRange": [
                54,
                66
            ],
            "diagramVariables": " n = <b><i>10</i></b>, Response = <b><i>(crash)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<=0.02",
            "post_condition_unexp_pt": "crash",
            "post_condition_unexp_ft": "crash",
            "post_condition_unexp_pctl": "crash",
            "post_condition_SMV_pt": "crash",
            "post_condition_SMV_ft": "crash",
            "post_condition_PRISM_pctl": "crash",
            "ft": "((F[<=10] crash) | (F[<10] LAST))",
            "pt": "(H ((H (! crash)) -> (O[<10] (Z FALSE))))",
            "pctl": "(P<=0.02[(F<=10 crash)])",
            "ptExpanded": "(H ((H (! crash)) -> (O[0,9] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (crash)) => OT(9, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,10] crash) | (F[0,9] LAST))",
            "pctlExpanded": "(P<=0.02[(F<=10 crash)])",
            "ftInfAUExpanded": "(F[0,10] crash)",
            "component": "System"
        },
        "status": "",
        "_id": "745840f0-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R32",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "The probability of an outdated hand over is less than 0.02",
        "comments": "",
        "fulltext": "System shall with probability < 0.02 eventually satisfy outdatedHandover",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "outdatedHandover"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<",
                "0.02"
            ],
            "probabilityTextRange": [
                13,
                35
            ],
            "timingTextRange": [
                37,
                46
            ],
            "post_condition": "(outdatedHandover)",
            "responseTextRange": [
                48,
                71
            ],
            "diagramVariables": "Response = <b><i>(outdatedHandover)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.02",
            "post_condition_unexp_pt": "outdatedHandover",
            "post_condition_unexp_ft": "outdatedHandover",
            "post_condition_unexp_pctl": "outdatedHandover",
            "post_condition_SMV_pt": "outdatedHandover",
            "post_condition_SMV_ft": "outdatedHandover",
            "post_condition_PRISM_pctl": "outdatedHandover",
            "ft": "((! LAST) U outdatedHandover)",
            "pt": "(O outdatedHandover)",
            "pctl": "(P<0.02[(F outdatedHandover)])",
            "ptExpanded": "(O outdatedHandover)",
            "CoCoSpecCode": "O(outdatedHandover)",
            "ftExpanded": "((! LAST) U outdatedHandover)",
            "pctlExpanded": "(P<0.02[(F outdatedHandover)])",
            "ftInfAUExpanded": "(F outdatedHandover)",
            "component": "System"
        },
        "status": "",
        "_id": "745840f1-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R12",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "reach office with probability at least 0.9",
        "comments": "",
        "fulltext": "System shall with probability>  0.9 eventually satisfy reachOffice",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "reachOffice"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.9"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "timingTextRange": [
                36,
                45
            ],
            "post_condition": "(reachOffice)",
            "responseTextRange": [
                47,
                65
            ],
            "diagramVariables": "Response = <b><i>(reachOffice)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.9",
            "post_condition_unexp_pt": "reachOffice",
            "post_condition_unexp_ft": "reachOffice",
            "post_condition_unexp_pctl": "reachOffice",
            "post_condition_SMV_pt": "reachOffice",
            "post_condition_SMV_ft": "reachOffice",
            "post_condition_PRISM_pctl": "reachOffice",
            "ft": "((! LAST) U reachOffice)",
            "pt": "(O reachOffice)",
            "pctl": "(P>0.9[(F reachOffice)])",
            "ptExpanded": "(O reachOffice)",
            "CoCoSpecCode": "O(reachOffice)",
            "ftExpanded": "((! LAST) U reachOffice)",
            "pctlExpanded": "(P>0.9[(F reachOffice)])",
            "ftInfAUExpanded": "(F reachOffice)",
            "component": "System"
        },
        "status": "",
        "_id": "745840f2-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R2",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "With at least 50% probability p will hold within 20 time units",
        "comments": "",
        "fulltext": "System shall with probability >= 0.5 within 20 ticks satisfy p",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "p"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">=",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                35
            ],
            "duration": "20",
            "timingTextRange": [
                37,
                51
            ],
            "post_condition": "(p)",
            "responseTextRange": [
                53,
                61
            ],
            "diagramVariables": " n = <b><i>20</i></b>, Response = <b><i>(p)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>20</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>20</i></b>). If the interval ends sooner than trigger+<b><i>20</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.5",
            "post_condition_unexp_pt": "p",
            "post_condition_unexp_ft": "p",
            "post_condition_unexp_pctl": "p",
            "post_condition_SMV_pt": "p",
            "post_condition_SMV_ft": "p",
            "post_condition_PRISM_pctl": "p",
            "ft": "((F[<=20] p) | (F[<20] LAST))",
            "pt": "(H ((H (! p)) -> (O[<20] (Z FALSE))))",
            "pctl": "(P>=0.5[(F<=20 p)])",
            "ptExpanded": "(H ((H (! p)) -> (O[0,19] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (p)) => OT(19, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,20] p) | (F[0,19] LAST))",
            "pctlExpanded": "(P>=0.5[(F<=20 p)])",
            "ftInfAUExpanded": "(F[0,20] p)",
            "component": "System"
        },
        "status": "",
        "_id": "745840f3-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R93",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "\"an ambulance must arrive at\nthe incident scene within 14 min in 95% of the cases\"",
        "comments": "",
        "fulltext": "Ambulance shall with probability >= 0.95 within 14 ticks satisfy arriveAtScene",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "arriveAtScene"
            ],
            "component_name": "Ambulance",
            "componentTextRange": [
                0,
                8
            ],
            "probability_bound": [
                ">=",
                "0.95"
            ],
            "probabilityTextRange": [
                16,
                39
            ],
            "duration": "14",
            "timingTextRange": [
                41,
                55
            ],
            "post_condition": "(arriveAtScene)",
            "responseTextRange": [
                57,
                77
            ],
            "diagramVariables": " n = <b><i>14</i></b>, Response = <b><i>(arriveAtScene)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>14</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>14</i></b>). If the interval ends sooner than trigger+<b><i>14</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.95",
            "post_condition_unexp_pt": "arriveAtScene",
            "post_condition_unexp_ft": "arriveAtScene",
            "post_condition_unexp_pctl": "arriveAtScene",
            "post_condition_SMV_pt": "arriveAtScene",
            "post_condition_SMV_ft": "arriveAtScene",
            "post_condition_PRISM_pctl": "arriveAtScene",
            "ft": "((F[<=14] arriveAtScene) | (F[<14] LAST))",
            "pt": "(H ((H (! arriveAtScene)) -> (O[<14] (Z FALSE))))",
            "pctl": "(P>=0.95[(F<=14 arriveAtScene)])",
            "ptExpanded": "(H ((H (! arriveAtScene)) -> (O[0,13] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (arriveAtScene)) => OT(13, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,14] arriveAtScene) | (F[0,13] LAST))",
            "pctlExpanded": "(P>=0.95[(F<=14 arriveAtScene)])",
            "ftInfAUExpanded": "(F[0,14] arriveAtScene)",
            "component": "Ambulance"
        },
        "status": "",
        "_id": "745840f4-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R28",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "with a probability of .999, if the system is in a failed state after a client call, it will take two time steps to become healthy again.",
        "comments": "",
        "fulltext": "whenever failed, upon clientCall the system shall with probability > 0.999 after 2 ticks satisfy healthy",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "after",
            "response": "satisfaction",
            "variables": [
                "failed",
                "clientCall",
                "healthy"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(clientCall)",
            "regular_condition": "((failed) & (clientCall))",
            "conditionTextRange": [
                0,
                31
            ],
            "component_name": "system",
            "componentTextRange": [
                33,
                42
            ],
            "probability_bound": [
                ">",
                "0.999"
            ],
            "probabilityTextRange": [
                50,
                73
            ],
            "duration": "2",
            "timingTextRange": [
                75,
                87
            ],
            "post_condition": "(healthy)",
            "responseTextRange": [
                89,
                103
            ],
            "diagramVariables": "TC = <b><i>((failed) & (clientCall))</i></b>,  n = <b><i>2</i></b>, Response = <b><i>(healthy)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((failed) & (clientCall))</i></b> is true and any point in the interval where <b><i>((failed) & (clientCall))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must be false at all time points with distance <=<b><i>2</i></b> from the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>2</i></b>). Moreover, RES must hold at the point that is at distance <b><i>2</i></b>+1 from the trigger, that is, trigger+<b><i>2</i></b>+1, except if the end of the interval occurs earlier.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_after_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.999",
            "regular_condition_unexp_pt": "(failed & clientCall)",
            "regular_condition_unexp_ft": "(failed & clientCall)",
            "regular_condition_unexp_pctl": "(failed & clientCall)",
            "regular_condition_SMV_pt": "(failed & clientCall)",
            "regular_condition_SMV_ft": "(failed & clientCall)",
            "regular_condition_PRISM_pctl": "(failed & clientCall)",
            "post_condition_unexp_pt": "healthy",
            "post_condition_unexp_ft": "healthy",
            "post_condition_unexp_pctl": "healthy",
            "post_condition_SMV_pt": "healthy",
            "post_condition_SMV_ft": "healthy",
            "post_condition_PRISM_pctl": "healthy",
            "ft": "((LAST V (((! (failed & clientCall)) & ((! LAST) & (X (failed & clientCall)))) -> (X (((G[<=2] (! healthy)) | (LAST V (! healthy))) & ((F[<=2+1] healthy) | (F[<2+1] LAST)))))) & ((failed & clientCall) -> (((G[<=2] (! healthy)) | (LAST V (! healthy))) & ((F[<=2+1] healthy) | (F[<2+1] LAST)))))",
            "pt": "((H ((O[<=2] ((failed & clientCall) & (Z (! (failed & clientCall))))) -> ((H (! (failed & clientCall))) | (! healthy)))) & (H ((O[=2+1] (((failed & clientCall) & (Z (! (failed & clientCall)))) & (! healthy))) -> (O[<2+1] ((Z FALSE) | healthy)))))",
            "pctl": "P>=1[((G (((! (failed & clientCall)) & (X (failed & clientCall))) => (X (P>0.999[((G<=2 (! healthy)) & (F<=(2+1) healthy))])))) & ((failed & clientCall) => (P>0.999[((G[<=2] (! healthy)) & (F[<=2+1] healthy))])))]",
            "ptExpanded": "((H ((O[0,2] ((failed & clientCall) & (Z (! (failed & clientCall))))) -> ((H (! (failed & clientCall))) | (! healthy)))) & (H ((O[3,3] (((failed & clientCall) & (Z (! (failed & clientCall)))) & (! healthy))) -> (O[0,2] ((Z FALSE) | healthy)))))",
            "CoCoSpecCode": "(H((OT(2, 0, ((failed and clientCall) and ZtoPre(not ((failed and clientCall))))) => (H(not ((failed and clientCall))) or not (healthy)))) and H((OT(3, 3, (((failed and clientCall) and ZtoPre(not ((failed and clientCall)))) and not (healthy))) => OT(2, 0, (ZtoPre(false) or healthy)))))",
            "ftExpanded": "((LAST V (((! (failed & clientCall)) & ((! LAST) & (X (failed & clientCall)))) -> (X (((G[0,2] (! healthy)) | (LAST V (! healthy))) & ((F[0,3] healthy) | (F[0,2] LAST)))))) & ((failed & clientCall) -> (((G[0,2] (! healthy)) | (LAST V (! healthy))) & ((F[0,3] healthy) | (F[0,2] LAST)))))",
            "pctlExpanded": "P>=1[((G (((! (failed & clientCall)) & (X (failed & clientCall))) => (X (P>0.999[((G<=2 (! healthy)) & (F<=(2+1) healthy))])))) & ((failed & clientCall) => (P>0.999[((G[<=2] (! healthy)) & (F[<=2+1] healthy))])))]",
            "ftInfAUExpanded": "((G (((! (failed & clientCall)) & (X (failed & clientCall))) -> (X (((G[0,2] (! healthy)) | (G (! healthy))) & (F[0,3] healthy))))) & ((failed & clientCall) -> (((G[0,2] (! healthy)) | (G (! healthy))) & (F[0,3] healthy))))",
            "component": "system"
        },
        "status": "",
        "_id": "745840f5-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R43",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "The probability that the first station of the tandem network becomes fully occupied within 10 time units is less than (or equal to) 0.5.",
        "comments": "",
        "fulltext": "FirstStation shall with probability <= 0.5 within 10 ticks satisfy full",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "full"
            ],
            "component_name": "FirstStation",
            "componentTextRange": [
                0,
                11
            ],
            "probability_bound": [
                "<=",
                "0.5"
            ],
            "probabilityTextRange": [
                19,
                41
            ],
            "duration": "10",
            "timingTextRange": [
                43,
                57
            ],
            "post_condition": "(full)",
            "responseTextRange": [
                59,
                70
            ],
            "diagramVariables": " n = <b><i>10</i></b>, Response = <b><i>(full)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<=0.5",
            "post_condition_unexp_pt": "full",
            "post_condition_unexp_ft": "full",
            "post_condition_unexp_pctl": "full",
            "post_condition_SMV_pt": "full",
            "post_condition_SMV_ft": "full",
            "post_condition_PRISM_pctl": "full",
            "ft": "((F[<=10] full) | (F[<10] LAST))",
            "pt": "(H ((H (! full)) -> (O[<10] (Z FALSE))))",
            "pctl": "(P<=0.5[(F<=10 full)])",
            "ptExpanded": "(H ((H (! full)) -> (O[0,9] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (full)) => OT(9, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,10] full) | (F[0,9] LAST))",
            "pctlExpanded": "(P<=0.5[(F<=10 full)])",
            "ftInfAUExpanded": "(F[0,10] full)",
            "component": "FirstStation"
        },
        "status": "",
        "_id": "745840f6-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R21",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "the probability of station 1 being waiting for the server is  less than p;",
        "comments": "",
        "fulltext": "Station1 shall with probability < 0.5 eventually satisfy wait  ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "wait"
            ],
            "component_name": "Station1",
            "componentTextRange": [
                0,
                7
            ],
            "probability_bound": [
                "<",
                "0.5"
            ],
            "probabilityTextRange": [
                15,
                36
            ],
            "timingTextRange": [
                38,
                47
            ],
            "post_condition": "(wait)",
            "responseTextRange": [
                49,
                60
            ],
            "diagramVariables": "Response = <b><i>(wait)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.5",
            "post_condition_unexp_pt": "wait",
            "post_condition_unexp_ft": "wait",
            "post_condition_unexp_pctl": "wait",
            "post_condition_SMV_pt": "wait",
            "post_condition_SMV_ft": "wait",
            "post_condition_PRISM_pctl": "wait",
            "ft": "((! LAST) U wait)",
            "pt": "(O wait)",
            "pctl": "(P<0.5[(F wait)])",
            "ptExpanded": "(O wait)",
            "CoCoSpecCode": "O(wait)",
            "ftExpanded": "((! LAST) U wait)",
            "pctlExpanded": "(P<0.5[(F wait)])",
            "ftInfAUExpanded": "(F wait)",
            "component": "Station1"
        },
        "status": "",
        "_id": "745840f7-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R53",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "Once the card has been entered, the probability that the client obtains the money within time t is at least p",
        "comments": "",
        "fulltext": "Upon cardInserted System shall with probability >= 0.5 within 20 ticks satisfy returnMoney",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "cardInserted",
                "returnMoney"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(cardInserted)",
            "regular_condition": "(cardInserted)",
            "conditionTextRange": [
                0,
                16
            ],
            "component_name": "System",
            "componentTextRange": [
                18,
                23
            ],
            "probability_bound": [
                ">=",
                "0.5"
            ],
            "probabilityTextRange": [
                31,
                53
            ],
            "duration": "20",
            "timingTextRange": [
                55,
                69
            ],
            "post_condition": "(returnMoney)",
            "responseTextRange": [
                71,
                89
            ],
            "diagramVariables": "TC = <b><i>(cardInserted)</i></b>,  n = <b><i>20</i></b>, Response = <b><i>(returnMoney)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(cardInserted)</i></b> is true and any point in the interval where <b><i>(cardInserted)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>20</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>20</i></b>). If the interval ends sooner than trigger+<b><i>20</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.5",
            "regular_condition_unexp_pt": "cardInserted",
            "regular_condition_unexp_ft": "cardInserted",
            "regular_condition_unexp_pctl": "cardInserted",
            "regular_condition_SMV_pt": "cardInserted",
            "regular_condition_SMV_ft": "cardInserted",
            "regular_condition_PRISM_pctl": "cardInserted",
            "post_condition_unexp_pt": "returnMoney",
            "post_condition_unexp_ft": "returnMoney",
            "post_condition_unexp_pctl": "returnMoney",
            "post_condition_SMV_pt": "returnMoney",
            "post_condition_SMV_ft": "returnMoney",
            "post_condition_PRISM_pctl": "returnMoney",
            "ft": "((LAST V (((! cardInserted) & ((! LAST) & (X cardInserted))) -> (X ((F[<=20] returnMoney) | (F[<20] LAST))))) & (cardInserted -> ((F[<=20] returnMoney) | (F[<20] LAST))))",
            "pt": "(H ((O[=20] ((cardInserted & (Z (! cardInserted))) & (! returnMoney))) -> (O[<20] ((Z FALSE) | returnMoney))))",
            "pctl": "P>=1[((G (((! cardInserted) & (X cardInserted)) => (X (P>=0.5[(F<=20 returnMoney)])))) & (cardInserted => (P>=0.5[(F[<=20] returnMoney)])))]",
            "ptExpanded": "(H ((O[20,20] ((cardInserted & (Z (! cardInserted))) & (! returnMoney))) -> (O[0,19] ((Z FALSE) | returnMoney))))",
            "CoCoSpecCode": "H((OT(20, 20, ((cardInserted and ZtoPre(not (cardInserted))) and not (returnMoney))) => OT(19, 0, (ZtoPre(false) or returnMoney))))",
            "ftExpanded": "((LAST V (((! cardInserted) & ((! LAST) & (X cardInserted))) -> (X ((F[0,20] returnMoney) | (F[0,19] LAST))))) & (cardInserted -> ((F[0,20] returnMoney) | (F[0,19] LAST))))",
            "pctlExpanded": "P>=1[((G (((! cardInserted) & (X cardInserted)) => (X (P>=0.5[(F<=20 returnMoney)])))) & (cardInserted => (P>=0.5[(F[<=20] returnMoney)])))]",
            "ftInfAUExpanded": "((G (((! cardInserted) & (X cardInserted)) -> (X (F[0,20] returnMoney)))) & (cardInserted -> (F[0,20] returnMoney)))",
            "component": "System"
        },
        "status": "",
        "_id": "745840f8-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R103",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "A change in a sensor value that stays active only for a time interval (pulse) of 5 ms is detected by the controller in 85% of all cases (note the formalisation is strange)",
        "comments": "",
        "fulltext": "System shall with probability >= 0.85 until detected satisfy sensor_changed_pulse",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "detected",
                "sensor_changed_pulse"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">=",
                "0.85"
            ],
            "probabilityTextRange": [
                13,
                36
            ],
            "stop_condition": "(detected)",
            "timingTextRange": [
                38,
                51
            ],
            "post_condition": "(sensor_changed_pulse)",
            "responseTextRange": [
                53,
                80
            ],
            "diagramVariables": "SC = <b><i>(detected)</i></b>, Response = <b><i>(sensor_changed_pulse)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_until_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.85",
            "post_condition_unexp_pt": "sensor_changed_pulse",
            "post_condition_unexp_ft": "sensor_changed_pulse",
            "post_condition_unexp_pctl": "sensor_changed_pulse",
            "post_condition_SMV_pt": "sensor_changed_pulse",
            "post_condition_SMV_ft": "sensor_changed_pulse",
            "post_condition_PRISM_pctl": "sensor_changed_pulse",
            "stop_condition_unexp_pt": "detected",
            "stop_condition_unexp_ft": "detected",
            "stop_condition_PRISM_pctl": "detected",
            "stop_condition_SMV_pt": "detected",
            "stop_condition_SMV_ft": "detected",
            "ft": "((detected V (sensor_changed_pulse | detected)) | (LAST V sensor_changed_pulse))",
            "pt": "(H ((H (! detected)) -> sensor_changed_pulse))",
            "pctl": "(P>=0.85[((undefined R (sensor_changed_pulse | undefined)) | (LAST R sensor_changed_pulse))])",
            "ptExpanded": "(H ((H (! detected)) -> sensor_changed_pulse))",
            "CoCoSpecCode": "H((H(not (detected)) => sensor_changed_pulse))",
            "ftExpanded": "((detected V (sensor_changed_pulse | detected)) | (LAST V sensor_changed_pulse))",
            "pctlExpanded": "(P>=0.85[((detected R (sensor_changed_pulse | detected)) | (false R sensor_changed_pulse))])",
            "ftInfAUExpanded": "(detected V (sensor_changed_pulse | detected))",
            "component": "System"
        },
        "status": "",
        "_id": "745840f9-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R72",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "There is a probability of at least 0.2% that we will require a new database connection in less than or equal to 7 times steps in server S1.",
        "comments": "",
        "fulltext": "S1 shall with probability >= 0.2 within 7 ticks satisfy requireNewDBConnection",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "requireNewDBConnection"
            ],
            "component_name": "S1",
            "componentTextRange": [
                0,
                1
            ],
            "probability_bound": [
                ">=",
                "0.2"
            ],
            "probabilityTextRange": [
                9,
                31
            ],
            "duration": "7",
            "timingTextRange": [
                33,
                46
            ],
            "post_condition": "(requireNewDBConnection)",
            "responseTextRange": [
                48,
                77
            ],
            "diagramVariables": " n = <b><i>7</i></b>, Response = <b><i>(requireNewDBConnection)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>7</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>7</i></b>). If the interval ends sooner than trigger+<b><i>7</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.2",
            "post_condition_unexp_pt": "requireNewDBConnection",
            "post_condition_unexp_ft": "requireNewDBConnection",
            "post_condition_unexp_pctl": "requireNewDBConnection",
            "post_condition_SMV_pt": "requireNewDBConnection",
            "post_condition_SMV_ft": "requireNewDBConnection",
            "post_condition_PRISM_pctl": "requireNewDBConnection",
            "ft": "((F[<=7] requireNewDBConnection) | (F[<7] LAST))",
            "pt": "(H ((H (! requireNewDBConnection)) -> (O[<7] (Z FALSE))))",
            "pctl": "(P>=0.2[(F<=7 requireNewDBConnection)])",
            "ptExpanded": "(H ((H (! requireNewDBConnection)) -> (O[0,6] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (requireNewDBConnection)) => OT(6, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,7] requireNewDBConnection) | (F[0,6] LAST))",
            "pctlExpanded": "(P>=0.2[(F<=7 requireNewDBConnection)])",
            "ftInfAUExpanded": "(F[0,7] requireNewDBConnection)",
            "component": "S1"
        },
        "status": "",
        "_id": "745840fa-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R83",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "During the working shift (8 hours) the probability that the water alarm is raised when the water level is not critical should be below 10-3 ",
        "comments": "",
        "fulltext": "in workingShift whenever notCritical System shall with probability < 0.01 eventually satisfy waterAlarm",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "holding",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "workingShift",
                "notCritical",
                "waterAlarm"
            ],
            "scope_mode": "workingShift",
            "scopeTextRange": [
                0,
                14
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(notCritical)",
            "regular_condition": "(notCritical)",
            "conditionTextRange": [
                16,
                35
            ],
            "component_name": "System",
            "componentTextRange": [
                37,
                42
            ],
            "probability_bound": [
                "<",
                "0.01"
            ],
            "probabilityTextRange": [
                50,
                72
            ],
            "timingTextRange": [
                74,
                83
            ],
            "post_condition": "(waterAlarm)",
            "responseTextRange": [
                85,
                102
            ],
            "diagramVariables": "M = <b><i>workingShift</i></b>, CC = <b><i>(notCritical)</i></b>, Response = <b><i>(waterAlarm)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>workingShift</i></b> holds.\nTRIGGER: every point in the interval where <b><i>(notCritical)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_holding_eventually_satisfaction.svg",
            "scope_mode_pt": "workingShift",
            "scope_mode_ft": "workingShift",
            "scope_mode_pctl": "workingShift",
            "bound": "<0.01",
            "regular_condition_unexp_pt": "notCritical",
            "regular_condition_unexp_ft": "notCritical",
            "regular_condition_unexp_pctl": "notCritical",
            "regular_condition_SMV_pt": "notCritical",
            "regular_condition_SMV_ft": "notCritical",
            "regular_condition_PRISM_pctl": "notCritical",
            "post_condition_unexp_pt": "waterAlarm",
            "post_condition_unexp_ft": "waterAlarm",
            "post_condition_unexp_pctl": "waterAlarm",
            "post_condition_SMV_pt": "waterAlarm",
            "post_condition_SMV_ft": "waterAlarm",
            "post_condition_PRISM_pctl": "waterAlarm",
            "ft": "((LAST V ((! (Fin_workingShift & (! LAST))) | (X ((Lin_workingShift | LAST) V (notCritical -> ((! (Lin_workingShift | LAST)) U waterAlarm)))))) & (workingShift -> ((Lin_workingShift | LAST) V (notCritical -> ((! (Lin_workingShift | LAST)) U waterAlarm)))))",
            "pt": "((H (Lin_workingShift -> (Y (((! notCritical) S ((! notCritical) & Fin_workingShift)) | (! ((! waterAlarm) S ((! waterAlarm) & notCritical))))))) & (((! Lin_workingShift) S ((! Lin_workingShift) & Fin_workingShift)) -> (((! notCritical) S ((! notCritical) & Fin_workingShift)) | (! ((! waterAlarm) S ((! waterAlarm) & notCritical))))))",
            "pctl": "P>=1[((G ((! (Fin_workingShift & (! LAST))) | (X (Lin_workingShift R (notCritical => (P<0.01[((! Lin_workingShift) U waterAlarm)])))))) & (workingShift => (Lin_workingShift | (Lin_workingShift R (notCritical => (P<0.01[((! Lin_workingShift) U waterAlarm)]))))))]",
            "ptExpanded": "((H (((! workingShift) & (Y workingShift)) -> (Y (((! notCritical) S ((! notCritical) & (workingShift & (Z (! workingShift))))) | (! ((! waterAlarm) S ((! waterAlarm) & notCritical))))))) & (((! ((! workingShift) & (Y workingShift))) S ((! ((! workingShift) & (Y workingShift))) & (workingShift & (Z (! workingShift))))) -> (((! notCritical) S ((! notCritical) & (workingShift & (Z (! workingShift))))) | (! ((! waterAlarm) S ((! waterAlarm) & notCritical))))))",
            "CoCoSpecCode": "(H(((not (workingShift) and YtoPre(workingShift)) => YtoPre((SI((workingShift and ZtoPre(not (workingShift))),not (notCritical)) or not (SI(notCritical,not (waterAlarm))))))) and (SI((workingShift and ZtoPre(not (workingShift))),not ((not (workingShift) and YtoPre(workingShift)))) => (SI((workingShift and ZtoPre(not (workingShift))),not (notCritical)) or not (SI(notCritical,not (waterAlarm))))))",
            "ftExpanded": "((LAST V ((! ((((! workingShift) & (! LAST)) & (X workingShift)) & (! LAST))) | (X ((((workingShift & (! LAST)) & (X (! workingShift))) | LAST) V (notCritical -> ((! (((workingShift & (! LAST)) & (X (! workingShift))) | LAST)) U waterAlarm)))))) & (workingShift -> ((((workingShift & (! LAST)) & (X (! workingShift))) | LAST) V (notCritical -> ((! (((workingShift & (! LAST)) & (X (! workingShift))) | LAST)) U waterAlarm)))))",
            "pctlExpanded": "P>=1[((G ((! (((! workingShift) & (X workingShift)) & (! false))) | (X ((workingShift & (X (! workingShift))) R (notCritical => (P<0.01[((! (workingShift & (X (! workingShift)))) U waterAlarm)])))))) & (workingShift => ((workingShift & (X (! workingShift))) | ((workingShift & (X (! workingShift))) R (notCritical => (P<0.01[((! (workingShift & (X (! workingShift)))) U waterAlarm)]))))))]",
            "ftInfAUExpanded": "((G ((! ((! workingShift) & (X workingShift))) | (X ((workingShift & (X (! workingShift))) V (notCritical -> ((! (workingShift & (X (! workingShift)))) U waterAlarm)))))) & (workingShift -> ((workingShift & (X (! workingShift))) V (notCritical -> ((! (workingShift & (X (! workingShift)))) U waterAlarm)))))",
            "component": "System"
        },
        "status": "",
        "_id": "745840fb-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R33",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "The probability that a microcell will eventually become full in 1 sec. is less then 50%",
        "comments": "",
        "fulltext": "System shall with probability < 0.5 within 1 sec satisfy microcellFull",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "microcellFull"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "duration": "1",
            "timingTextRange": [
                36,
                47
            ],
            "post_condition": "(microcellFull)",
            "responseTextRange": [
                49,
                69
            ],
            "diagramVariables": " n = <b><i>1</i></b>, Response = <b><i>(microcellFull)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>1</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>1</i></b>). If the interval ends sooner than trigger+<b><i>1</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.5",
            "post_condition_unexp_pt": "microcellFull",
            "post_condition_unexp_ft": "microcellFull",
            "post_condition_unexp_pctl": "microcellFull",
            "post_condition_SMV_pt": "microcellFull",
            "post_condition_SMV_ft": "microcellFull",
            "post_condition_PRISM_pctl": "microcellFull",
            "ft": "((F[<=1] microcellFull) | (F[<1] LAST))",
            "pt": "(H ((H (! microcellFull)) -> (O[<1] (Z FALSE))))",
            "pctl": "(P<0.5[(F<=1 microcellFull)])",
            "ptExpanded": "(H ((H (! microcellFull)) -> (O[0,0] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (microcellFull)) => OT(0, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,1] microcellFull) | (F[0,0] LAST))",
            "pctlExpanded": "(P<0.5[(F<=1 microcellFull)])",
            "ftInfAUExpanded": "(F[0,1] microcellFull)",
            "component": "System"
        },
        "status": "",
        "_id": "745840fc-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R13",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "with at least 99% probability q will hold continuously for 20 time units",
        "comments": "",
        "fulltext": "System shall with probability >= 0.99 for 20 ticks satisfy q",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "for",
            "response": "satisfaction",
            "variables": [
                "q"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">=",
                "0.99"
            ],
            "probabilityTextRange": [
                13,
                36
            ],
            "duration": "20",
            "timingTextRange": [
                38,
                49
            ],
            "post_condition": "(q)",
            "responseTextRange": [
                51,
                59
            ],
            "diagramVariables": " n = <b><i>20</i></b>, Response = <b><i>(q)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the trigger and remain true for <b><i>20</i></b> time points past the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>20</i></b>), or to the end of the interval if the interval ends sooner than trigger+<b><i>20</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_for_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.99",
            "post_condition_unexp_pt": "q",
            "post_condition_unexp_ft": "q",
            "post_condition_unexp_pctl": "q",
            "post_condition_SMV_pt": "q",
            "post_condition_SMV_ft": "q",
            "post_condition_PRISM_pctl": "q",
            "ft": "((G[<=20] q) | (LAST V q))",
            "pt": "(H ((O[<=20] (Z FALSE)) -> q))",
            "pctl": "(P>=0.99[(G<=20 q)])",
            "ptExpanded": "(H ((O[0,20] (Z FALSE)) -> q))",
            "CoCoSpecCode": "H((OT(20, 0, ZtoPre(false)) => q))",
            "ftExpanded": "((G[0,20] q) | (LAST V q))",
            "pctlExpanded": "(P>=0.99[(G<=20 q)])",
            "ftInfAUExpanded": "((G[0,20] q) | (G q))",
            "component": "System"
        },
        "status": "",
        "_id": "745840fd-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R94",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "the algorithm eventually terminates successfully with probability 1",
        "comments": "",
        "fulltext": "Algorithm shall with probability >=1 eventually satisfy terminate",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "terminate"
            ],
            "component_name": "Algorithm",
            "componentTextRange": [
                0,
                8
            ],
            "probability_bound": [
                ">=",
                "1"
            ],
            "probabilityTextRange": [
                16,
                35
            ],
            "timingTextRange": [
                37,
                46
            ],
            "post_condition": "(terminate)",
            "responseTextRange": [
                48,
                64
            ],
            "diagramVariables": "Response = <b><i>(terminate)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=1",
            "post_condition_unexp_pt": "terminate",
            "post_condition_unexp_ft": "terminate",
            "post_condition_unexp_pctl": "terminate",
            "post_condition_SMV_pt": "terminate",
            "post_condition_SMV_ft": "terminate",
            "post_condition_PRISM_pctl": "terminate",
            "ft": "((! LAST) U terminate)",
            "pt": "(O terminate)",
            "pctl": "(P>=1[(F terminate)])",
            "ptExpanded": "(O terminate)",
            "CoCoSpecCode": "O(terminate)",
            "ftExpanded": "((! LAST) U terminate)",
            "pctlExpanded": "(P>=1[(F terminate)])",
            "ftInfAUExpanded": "(F terminate)",
            "component": "Algorithm"
        },
        "status": "",
        "_id": "745840fe-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R44",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "probability that a message queue eventually becomes full is less than or equal to 0.05",
        "comments": "",
        "fulltext": "System shall with probability <= 0.05 eventually satisfy full",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "full"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<=",
                "0.05"
            ],
            "probabilityTextRange": [
                13,
                36
            ],
            "timingTextRange": [
                38,
                47
            ],
            "post_condition": "(full)",
            "responseTextRange": [
                49,
                60
            ],
            "diagramVariables": "Response = <b><i>(full)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<=0.05",
            "post_condition_unexp_pt": "full",
            "post_condition_unexp_ft": "full",
            "post_condition_unexp_pctl": "full",
            "post_condition_SMV_pt": "full",
            "post_condition_SMV_ft": "full",
            "post_condition_PRISM_pctl": "full",
            "ft": "((! LAST) U full)",
            "pt": "(O full)",
            "pctl": "(P<=0.05[(F full)])",
            "ptExpanded": "(O full)",
            "CoCoSpecCode": "O(full)",
            "ftExpanded": "((! LAST) U full)",
            "pctlExpanded": "(P<=0.05[(F full)])",
            "ftInfAUExpanded": "(F full)",
            "component": "System"
        },
        "status": "",
        "_id": "745840ff-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R3",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "With a probaility less than p the queue will be eventually full in less than t time units",
        "comments": "",
        "fulltext": "System shall with probability < 0.5 within 10 ticks satisfy full",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "full"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "duration": "10",
            "timingTextRange": [
                36,
                50
            ],
            "post_condition": "(full)",
            "responseTextRange": [
                52,
                63
            ],
            "diagramVariables": " n = <b><i>10</i></b>, Response = <b><i>(full)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.5",
            "post_condition_unexp_pt": "full",
            "post_condition_unexp_ft": "full",
            "post_condition_unexp_pctl": "full",
            "post_condition_SMV_pt": "full",
            "post_condition_SMV_ft": "full",
            "post_condition_PRISM_pctl": "full",
            "ft": "((F[<=10] full) | (F[<10] LAST))",
            "pt": "(H ((H (! full)) -> (O[<10] (Z FALSE))))",
            "pctl": "(P<0.5[(F<=10 full)])",
            "ptExpanded": "(H ((H (! full)) -> (O[0,9] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (full)) => OT(9, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,10] full) | (F[0,9] LAST))",
            "pctlExpanded": "(P<0.5[(F<=10 full)])",
            "ftInfAUExpanded": "(F[0,10] full)",
            "component": "System"
        },
        "status": "",
        "_id": "74584100-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R63",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "\"the probability that a message has been delivered after\none time-step is at least 0.4\"",
        "comments": "",
        "fulltext": "System shall with probability >= 0.4 at the next timepoint satisfy delivered",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "next",
            "response": "satisfaction",
            "variables": [
                "delivered"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">=",
                "0.4"
            ],
            "probabilityTextRange": [
                13,
                35
            ],
            "timingTextRange": [
                37,
                57
            ],
            "post_condition": "(delivered)",
            "responseTextRange": [
                59,
                75
            ],
            "diagramVariables": "Response = <b><i>(delivered)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_next_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.4",
            "post_condition_unexp_pt": "delivered",
            "post_condition_unexp_ft": "delivered",
            "post_condition_unexp_pctl": "delivered",
            "post_condition_SMV_pt": "delivered",
            "post_condition_SMV_ft": "delivered",
            "post_condition_PRISM_pctl": "delivered",
            "ft": "(LAST | (X delivered))",
            "pt": "(H ((Y (Z FALSE)) -> delivered))",
            "pctl": "(P>=0.4[(LAST | (X delivered))])",
            "ptExpanded": "(H ((Y (Z FALSE)) -> delivered))",
            "CoCoSpecCode": "H((YtoPre(ZtoPre(false)) => delivered))",
            "ftExpanded": "(LAST | (X delivered))",
            "pctlExpanded": "(P>=0.4[(false | (X delivered))])",
            "ftInfAUExpanded": "(X delivered)",
            "component": "System"
        },
        "status": "",
        "_id": "74584101-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R54",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "If station 1 is full (m1=1) then it will be polled within T time units with a probability of at least 0.5",
        "comments": "",
        "fulltext": "whenever m1=1 System shall with probability >= 0.5 within 50 ticks satisfy poll(m1)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "m1",
                "poll"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(m1 = 1)",
            "regular_condition": "(m1 = 1)",
            "conditionTextRange": [
                0,
                12
            ],
            "component_name": "System",
            "componentTextRange": [
                14,
                19
            ],
            "probability_bound": [
                ">=",
                "0.5"
            ],
            "probabilityTextRange": [
                27,
                49
            ],
            "duration": "50",
            "timingTextRange": [
                51,
                65
            ],
            "post_condition": "(poll ( m1 ))",
            "responseTextRange": [
                67,
                82
            ],
            "diagramVariables": "CC = <b><i>(m1 = 1)</i></b>,  n = <b><i>50</i></b>, Response = <b><i>(poll ( m1 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(m1 = 1)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>50</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>50</i></b>). If the interval ends sooner than trigger+<b><i>50</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.5",
            "regular_condition_unexp_pt": "(m1 = 1)",
            "regular_condition_unexp_ft": "(m1 = 1)",
            "regular_condition_unexp_pctl": "(m1 = 1)",
            "regular_condition_SMV_pt": "(m1 = 1)",
            "regular_condition_SMV_ft": "(m1 = 1)",
            "regular_condition_PRISM_pctl": "(m1 = 1)",
            "post_condition_unexp_pt": "poll(m1)",
            "post_condition_unexp_ft": "poll(m1)",
            "post_condition_unexp_pctl": "poll(m1)",
            "post_condition_SMV_pt": "poll(m1)",
            "post_condition_SMV_ft": "poll(m1)",
            "post_condition_PRISM_pctl": "poll(m1)",
            "ft": "(LAST V ((m1 = 1) -> ((F[<=50] poll(m1)) | (F[<50] LAST))))",
            "pt": "(H ((O[=50] ((m1 = 1) & (! poll(m1)))) -> (O[<50] ((Z FALSE) | poll(m1)))))",
            "pctl": "P>=1[(G ((m1 = 1) => (P>=0.5[(F<=50 poll(m1))])))]",
            "ptExpanded": "(H ((O[50,50] ((m1 = 1) & (! poll(m1)))) -> (O[0,49] ((Z FALSE) | poll(m1)))))",
            "CoCoSpecCode": "H((OT(50, 50, ((m1 = 1) and not (poll(m1)))) => OT(49, 0, (ZtoPre(false) or poll(m1)))))",
            "ftExpanded": "(LAST V ((m1 = 1) -> ((F[0,50] poll(m1)) | (F[0,49] LAST))))",
            "pctlExpanded": "P>=1[(G ((m1 = 1) => (P>=0.5[(F<=50 poll(m1))])))]",
            "ftInfAUExpanded": "(G ((m1 = 1) -> (F[0,50] poll(m1))))",
            "component": "System"
        },
        "status": "",
        "_id": "74584102-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R14",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "avoid becoming wet with probability at least 0.8",
        "comments": "",
        "fulltext": "System shall with probability >= 0.8 never satisfy wet",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "never",
            "response": "satisfaction",
            "variables": [
                "wet"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">=",
                "0.8"
            ],
            "probabilityTextRange": [
                13,
                35
            ],
            "timingTextRange": [
                37,
                41
            ],
            "post_condition": "(wet)",
            "responseTextRange": [
                43,
                53
            ],
            "diagramVariables": "Response = <b><i>(wet)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must be false at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_never_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.8",
            "post_condition_unexp_pt": "wet",
            "post_condition_unexp_ft": "wet",
            "post_condition_unexp_pctl": "wet",
            "post_condition_SMV_pt": "wet",
            "post_condition_SMV_ft": "wet",
            "post_condition_PRISM_pctl": "wet",
            "ft": "(LAST V (! wet))",
            "pt": "(H (! wet))",
            "pctl": "(P>=0.8[(G (! wet))])",
            "ptExpanded": "(H (! wet))",
            "CoCoSpecCode": "H(not (wet))",
            "ftExpanded": "(LAST V (! wet))",
            "pctlExpanded": "(P>=0.8[(G (! wet))])",
            "ftInfAUExpanded": "(G (! wet))",
            "component": "System"
        },
        "status": "",
        "_id": "74584103-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R45",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "the time it takes to clear a check is at most 5 time units with at least 90%",
        "comments": "",
        "fulltext": "System shall with probability >= 0.9 within 5 ticks satisfy checkCleared",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "checkCleared"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">=",
                "0.9"
            ],
            "probabilityTextRange": [
                13,
                35
            ],
            "duration": "5",
            "timingTextRange": [
                37,
                50
            ],
            "post_condition": "(checkCleared)",
            "responseTextRange": [
                52,
                71
            ],
            "diagramVariables": " n = <b><i>5</i></b>, Response = <b><i>(checkCleared)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>5</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>5</i></b>). If the interval ends sooner than trigger+<b><i>5</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.9",
            "post_condition_unexp_pt": "checkCleared",
            "post_condition_unexp_ft": "checkCleared",
            "post_condition_unexp_pctl": "checkCleared",
            "post_condition_SMV_pt": "checkCleared",
            "post_condition_SMV_ft": "checkCleared",
            "post_condition_PRISM_pctl": "checkCleared",
            "ft": "((F[<=5] checkCleared) | (F[<5] LAST))",
            "pt": "(H ((H (! checkCleared)) -> (O[<5] (Z FALSE))))",
            "pctl": "(P>=0.9[(F<=5 checkCleared)])",
            "ptExpanded": "(H ((H (! checkCleared)) -> (O[0,4] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (checkCleared)) => OT(4, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,5] checkCleared) | (F[0,4] LAST))",
            "pctlExpanded": "(P>=0.9[(F<=5 checkCleared)])",
            "ftInfAUExpanded": "(F[0,5] checkCleared)",
            "component": "System"
        },
        "status": "",
        "_id": "74584104-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R104",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "The probability in which the sender’s id is detected (observe) is less than p.",
        "comments": "",
        "fulltext": "System shall with probability < 0.5 eventually  satisfy detectSenderID  ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "detectSenderID"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "timingTextRange": [
                36,
                45
            ],
            "post_condition": "(detectSenderID)",
            "responseTextRange": [
                48,
                69
            ],
            "diagramVariables": "Response = <b><i>(detectSenderID)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.5",
            "post_condition_unexp_pt": "detectSenderID",
            "post_condition_unexp_ft": "detectSenderID",
            "post_condition_unexp_pctl": "detectSenderID",
            "post_condition_SMV_pt": "detectSenderID",
            "post_condition_SMV_ft": "detectSenderID",
            "post_condition_PRISM_pctl": "detectSenderID",
            "ft": "((! LAST) U detectSenderID)",
            "pt": "(O detectSenderID)",
            "pctl": "(P<0.5[(F detectSenderID)])",
            "ptExpanded": "(O detectSenderID)",
            "CoCoSpecCode": "O(detectSenderID)",
            "ftExpanded": "((! LAST) U detectSenderID)",
            "pctlExpanded": "(P<0.5[(F detectSenderID)])",
            "ftInfAUExpanded": "(F detectSenderID)",
            "component": "System"
        },
        "status": "",
        "_id": "74584105-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R34",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "The probability that a microcell will eventually become full in 1 msec. is less then 50%",
        "comments": "",
        "fulltext": "System shall with probability < 0.5 within 1 millisecond satisfy microcellFull",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "microcellFull"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "duration": "1",
            "timingTextRange": [
                36,
                55
            ],
            "post_condition": "(microcellFull)",
            "responseTextRange": [
                57,
                77
            ],
            "diagramVariables": " n = <b><i>1</i></b>, Response = <b><i>(microcellFull)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>1</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>1</i></b>). If the interval ends sooner than trigger+<b><i>1</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.5",
            "post_condition_unexp_pt": "microcellFull",
            "post_condition_unexp_ft": "microcellFull",
            "post_condition_unexp_pctl": "microcellFull",
            "post_condition_SMV_pt": "microcellFull",
            "post_condition_SMV_ft": "microcellFull",
            "post_condition_PRISM_pctl": "microcellFull",
            "ft": "((F[<=1] microcellFull) | (F[<1] LAST))",
            "pt": "(H ((H (! microcellFull)) -> (O[<1] (Z FALSE))))",
            "pctl": "(P<0.5[(F<=1 microcellFull)])",
            "ptExpanded": "(H ((H (! microcellFull)) -> (O[0,0] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (microcellFull)) => OT(0, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,1] microcellFull) | (F[0,0] LAST))",
            "pctlExpanded": "(P<0.5[(F<=1 microcellFull)])",
            "ftInfAUExpanded": "(F[0,1] microcellFull)",
            "component": "System"
        },
        "status": "",
        "_id": "74584106-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R4",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "In less than 50% of the cases, the game will be won within at most 20 steps",
        "comments": "",
        "fulltext": "System shall with probability < 0.5 within 20 ticks satisfy won",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "won"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "duration": "20",
            "timingTextRange": [
                36,
                50
            ],
            "post_condition": "(won)",
            "responseTextRange": [
                52,
                62
            ],
            "diagramVariables": " n = <b><i>20</i></b>, Response = <b><i>(won)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>20</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>20</i></b>). If the interval ends sooner than trigger+<b><i>20</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.5",
            "post_condition_unexp_pt": "won",
            "post_condition_unexp_ft": "won",
            "post_condition_unexp_pctl": "won",
            "post_condition_SMV_pt": "won",
            "post_condition_SMV_ft": "won",
            "post_condition_PRISM_pctl": "won",
            "ft": "((F[<=20] won) | (F[<20] LAST))",
            "pt": "(H ((H (! won)) -> (O[<20] (Z FALSE))))",
            "pctl": "(P<0.5[(F<=20 won)])",
            "ptExpanded": "(H ((H (! won)) -> (O[0,19] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (won)) => OT(19, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,20] won) | (F[0,19] LAST))",
            "pctlExpanded": "(P<0.5[(F<=20 won)])",
            "ftInfAUExpanded": "(F[0,20] won)",
            "component": "System"
        },
        "status": "",
        "_id": "74584107-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R84",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "\"from any initial configuration, the probability that the\nsystem reaches an error state is 0;\"",
        "comments": "",
        "fulltext": "System shall with probability <= 0 eventually satisfy error",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "error"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<=",
                "0"
            ],
            "probabilityTextRange": [
                13,
                33
            ],
            "timingTextRange": [
                35,
                44
            ],
            "post_condition": "(error)",
            "responseTextRange": [
                46,
                58
            ],
            "diagramVariables": "Response = <b><i>(error)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<=0",
            "post_condition_unexp_pt": "error",
            "post_condition_unexp_ft": "error",
            "post_condition_unexp_pctl": "error",
            "post_condition_SMV_pt": "error",
            "post_condition_SMV_ft": "error",
            "post_condition_PRISM_pctl": "error",
            "ft": "((! LAST) U error)",
            "pt": "(O error)",
            "pctl": "(P<=0[(F error)])",
            "ptExpanded": "(O error)",
            "CoCoSpecCode": "O(error)",
            "ftExpanded": "((! LAST) U error)",
            "pctlExpanded": "(P<=0[(F error)])",
            "ftInfAUExpanded": "(F error)",
            "component": "System"
        },
        "status": "",
        "_id": "74584108-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R73",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "an error state is reached with probability less than 0.01",
        "comments": "",
        "fulltext": "System shall with probability < 0.01 eventually satisfy error",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "error"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<",
                "0.01"
            ],
            "probabilityTextRange": [
                13,
                35
            ],
            "timingTextRange": [
                37,
                46
            ],
            "post_condition": "(error)",
            "responseTextRange": [
                48,
                60
            ],
            "diagramVariables": "Response = <b><i>(error)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.01",
            "post_condition_unexp_pt": "error",
            "post_condition_unexp_ft": "error",
            "post_condition_unexp_pctl": "error",
            "post_condition_SMV_pt": "error",
            "post_condition_SMV_ft": "error",
            "post_condition_PRISM_pctl": "error",
            "ft": "((! LAST) U error)",
            "pt": "(O error)",
            "pctl": "(P<0.01[(F error)])",
            "ptExpanded": "(O error)",
            "CoCoSpecCode": "O(error)",
            "ftExpanded": "((! LAST) U error)",
            "pctlExpanded": "(P<0.01[(F error)])",
            "ftInfAUExpanded": "(F error)",
            "component": "System"
        },
        "status": "",
        "_id": "74584109-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R55",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "\"If station 1 is full, then it is\npolled within 20 time units with probability at least 0.5\"",
        "comments": "",
        "fulltext": "whenever m1=1 System shall with probability >= 0.5 within 20 ticks satisfy poll(m1)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "m1",
                "poll"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(m1 = 1)",
            "regular_condition": "(m1 = 1)",
            "conditionTextRange": [
                0,
                12
            ],
            "component_name": "System",
            "componentTextRange": [
                14,
                19
            ],
            "probability_bound": [
                ">=",
                "0.5"
            ],
            "probabilityTextRange": [
                27,
                49
            ],
            "duration": "20",
            "timingTextRange": [
                51,
                65
            ],
            "post_condition": "(poll ( m1 ))",
            "responseTextRange": [
                67,
                82
            ],
            "diagramVariables": "CC = <b><i>(m1 = 1)</i></b>,  n = <b><i>20</i></b>, Response = <b><i>(poll ( m1 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(m1 = 1)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>20</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>20</i></b>). If the interval ends sooner than trigger+<b><i>20</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.5",
            "regular_condition_unexp_pt": "(m1 = 1)",
            "regular_condition_unexp_ft": "(m1 = 1)",
            "regular_condition_unexp_pctl": "(m1 = 1)",
            "regular_condition_SMV_pt": "(m1 = 1)",
            "regular_condition_SMV_ft": "(m1 = 1)",
            "regular_condition_PRISM_pctl": "(m1 = 1)",
            "post_condition_unexp_pt": "poll(m1)",
            "post_condition_unexp_ft": "poll(m1)",
            "post_condition_unexp_pctl": "poll(m1)",
            "post_condition_SMV_pt": "poll(m1)",
            "post_condition_SMV_ft": "poll(m1)",
            "post_condition_PRISM_pctl": "poll(m1)",
            "ft": "(LAST V ((m1 = 1) -> ((F[<=20] poll(m1)) | (F[<20] LAST))))",
            "pt": "(H ((O[=20] ((m1 = 1) & (! poll(m1)))) -> (O[<20] ((Z FALSE) | poll(m1)))))",
            "pctl": "P>=1[(G ((m1 = 1) => (P>=0.5[(F<=20 poll(m1))])))]",
            "ptExpanded": "(H ((O[20,20] ((m1 = 1) & (! poll(m1)))) -> (O[0,19] ((Z FALSE) | poll(m1)))))",
            "CoCoSpecCode": "H((OT(20, 20, ((m1 = 1) and not (poll(m1)))) => OT(19, 0, (ZtoPre(false) or poll(m1)))))",
            "ftExpanded": "(LAST V ((m1 = 1) -> ((F[0,20] poll(m1)) | (F[0,19] LAST))))",
            "pctlExpanded": "P>=1[(G ((m1 = 1) => (P>=0.5[(F<=20 poll(m1))])))]",
            "ftInfAUExpanded": "(G ((m1 = 1) -> (F[0,20] poll(m1))))",
            "component": "System"
        },
        "status": "",
        "_id": "7458410a-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R95",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "An airbag will only be initiated after a crash has been detected, with a probability greater than 0.99",
        "comments": "",
        "fulltext": "only in crashmode System shall with probability >= 0.99  eventually satisfy airbag",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "onlyIn"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "crashmode",
                "airbag"
            ],
            "scope_mode": "crashmode",
            "scopeTextRange": [
                0,
                16
            ],
            "component_name": "System",
            "componentTextRange": [
                18,
                23
            ],
            "probability_bound": [
                ">=",
                "0.99"
            ],
            "probabilityTextRange": [
                31,
                54
            ],
            "timingTextRange": [
                57,
                66
            ],
            "post_condition": "(airbag)",
            "responseTextRange": [
                68,
                81
            ],
            "diagramVariables": "M = <b><i>crashmode</i></b>, Response = <b><i>(airbag)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>crashmode</i></b> does NOT hold.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must be false at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/onlyIn_null_eventually_satisfaction.svg",
            "scope_mode_pt": "crashmode",
            "scope_mode_ft": "crashmode",
            "scope_mode_pctl": "crashmode",
            "bound": ">=0.99",
            "post_condition_unexp_pt": "airbag",
            "post_condition_unexp_ft": "airbag",
            "post_condition_unexp_pctl": "airbag",
            "post_condition_SMV_pt": "airbag",
            "post_condition_SMV_ft": "airbag",
            "post_condition_PRISM_pctl": "airbag",
            "ft": "(LAST V (airbag -> crashmode))",
            "pt": "(H (airbag -> crashmode))",
            "pctl": "P>=1[((G ((! (FNin_crashmode & (! LAST))) | (X (P>=0.99[((! LNin_crashmode) U airbag)])))) & ((! crashmode) => (LNin_crashmode | (P>=0.99[((! LNin_crashmode) U airbag)]))))]",
            "ptExpanded": "(H (airbag -> crashmode))",
            "CoCoSpecCode": "H((airbag => crashmode))",
            "ftExpanded": "(LAST V (airbag -> crashmode))",
            "pctlExpanded": "P>=1[((G ((! ((crashmode & (X (! crashmode))) & (! false))) | (X (P>=0.99[((! ((! crashmode) & (X crashmode))) U airbag)])))) & ((! crashmode) => (((! crashmode) & (X crashmode)) | (P>=0.99[((! ((! crashmode) & (X crashmode))) U airbag)]))))]",
            "ftInfAUExpanded": "(G (airbag -> crashmode))",
            "component": "System"
        },
        "status": "",
        "_id": "7458410b-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R46",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "The Probability that a queue in a queueing network within T time units is full is less than 50%",
        "comments": "",
        "fulltext": "System shall with probability <= 0.5 within 10 ticks satisfy full",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "full"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<=",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                35
            ],
            "duration": "10",
            "timingTextRange": [
                37,
                51
            ],
            "post_condition": "(full)",
            "responseTextRange": [
                53,
                64
            ],
            "diagramVariables": " n = <b><i>10</i></b>, Response = <b><i>(full)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<=0.5",
            "post_condition_unexp_pt": "full",
            "post_condition_unexp_ft": "full",
            "post_condition_unexp_pctl": "full",
            "post_condition_SMV_pt": "full",
            "post_condition_SMV_ft": "full",
            "post_condition_PRISM_pctl": "full",
            "ft": "((F[<=10] full) | (F[<10] LAST))",
            "pt": "(H ((H (! full)) -> (O[<10] (Z FALSE))))",
            "pctl": "(P<=0.5[(F<=10 full)])",
            "ptExpanded": "(H ((H (! full)) -> (O[0,9] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (full)) => OT(9, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,10] full) | (F[0,9] LAST))",
            "pctlExpanded": "(P<=0.5[(F<=10 full)])",
            "ftInfAUExpanded": "(F[0,10] full)",
            "component": "System"
        },
        "status": "",
        "_id": "7458410c-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R35",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "The probability that a microcell will eventually become full in 1 msec. is less then 99.5%",
        "comments": "",
        "fulltext": "System shall with probability < 0.995 within 1 millisecond satisfy microcellFull",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "microcellFull"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<",
                "0.995"
            ],
            "probabilityTextRange": [
                13,
                36
            ],
            "duration": "1",
            "timingTextRange": [
                38,
                57
            ],
            "post_condition": "(microcellFull)",
            "responseTextRange": [
                59,
                79
            ],
            "diagramVariables": " n = <b><i>1</i></b>, Response = <b><i>(microcellFull)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>1</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>1</i></b>). If the interval ends sooner than trigger+<b><i>1</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.995",
            "post_condition_unexp_pt": "microcellFull",
            "post_condition_unexp_ft": "microcellFull",
            "post_condition_unexp_pctl": "microcellFull",
            "post_condition_SMV_pt": "microcellFull",
            "post_condition_SMV_ft": "microcellFull",
            "post_condition_PRISM_pctl": "microcellFull",
            "ft": "((F[<=1] microcellFull) | (F[<1] LAST))",
            "pt": "(H ((H (! microcellFull)) -> (O[<1] (Z FALSE))))",
            "pctl": "(P<0.995[(F<=1 microcellFull)])",
            "ptExpanded": "(H ((H (! microcellFull)) -> (O[0,0] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (microcellFull)) => OT(0, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,1] microcellFull) | (F[0,0] LAST))",
            "pctlExpanded": "(P<0.995[(F<=1 microcellFull)])",
            "ftInfAUExpanded": "(F[0,1] microcellFull)",
            "component": "System"
        },
        "status": "",
        "_id": "7458410d-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R15",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "\"Once station 1 has become busy (i. e. full),\nwith probability of at least 0.5 it will be\npolled within at most t time units (t= 5, 10, 20, 40, 80).\"",
        "comments": "",
        "fulltext": "upon busy1 System shall with probability >= 0.5 within 10 ticks satisfy poll ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "busy1",
                "poll"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(busy1)",
            "regular_condition": "(busy1)",
            "conditionTextRange": [
                0,
                9
            ],
            "component_name": "System",
            "componentTextRange": [
                11,
                16
            ],
            "probability_bound": [
                ">=",
                "0.5"
            ],
            "probabilityTextRange": [
                24,
                46
            ],
            "duration": "10",
            "timingTextRange": [
                48,
                62
            ],
            "post_condition": "(poll)",
            "responseTextRange": [
                64,
                75
            ],
            "diagramVariables": "TC = <b><i>(busy1)</i></b>,  n = <b><i>10</i></b>, Response = <b><i>(poll)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(busy1)</i></b> is true and any point in the interval where <b><i>(busy1)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.5",
            "regular_condition_unexp_pt": "busy1",
            "regular_condition_unexp_ft": "busy1",
            "regular_condition_unexp_pctl": "busy1",
            "regular_condition_SMV_pt": "busy1",
            "regular_condition_SMV_ft": "busy1",
            "regular_condition_PRISM_pctl": "busy1",
            "post_condition_unexp_pt": "poll",
            "post_condition_unexp_ft": "poll",
            "post_condition_unexp_pctl": "poll",
            "post_condition_SMV_pt": "poll",
            "post_condition_SMV_ft": "poll",
            "post_condition_PRISM_pctl": "poll",
            "ft": "((LAST V (((! busy1) & ((! LAST) & (X busy1))) -> (X ((F[<=10] poll) | (F[<10] LAST))))) & (busy1 -> ((F[<=10] poll) | (F[<10] LAST))))",
            "pt": "(H ((O[=10] ((busy1 & (Z (! busy1))) & (! poll))) -> (O[<10] ((Z FALSE) | poll))))",
            "pctl": "P>=1[((G (((! busy1) & (X busy1)) => (X (P>=0.5[(F<=10 poll)])))) & (busy1 => (P>=0.5[(F[<=10] poll)])))]",
            "ptExpanded": "(H ((O[10,10] ((busy1 & (Z (! busy1))) & (! poll))) -> (O[0,9] ((Z FALSE) | poll))))",
            "CoCoSpecCode": "H((OT(10, 10, ((busy1 and ZtoPre(not (busy1))) and not (poll))) => OT(9, 0, (ZtoPre(false) or poll))))",
            "ftExpanded": "((LAST V (((! busy1) & ((! LAST) & (X busy1))) -> (X ((F[0,10] poll) | (F[0,9] LAST))))) & (busy1 -> ((F[0,10] poll) | (F[0,9] LAST))))",
            "pctlExpanded": "P>=1[((G (((! busy1) & (X busy1)) => (X (P>=0.5[(F<=10 poll)])))) & (busy1 => (P>=0.5[(F[<=10] poll)])))]",
            "ftInfAUExpanded": "((G (((! busy1) & (X busy1)) -> (X (F[0,10] poll)))) & (busy1 -> (F[0,10] poll)))",
            "component": "System"
        },
        "status": "",
        "_id": "7458410e-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R74",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "\"the probability that the queue size becomes greater than\nor equal to M by t;\"",
        "comments": "",
        "fulltext": "System shall with probability > 0.5 within 20 ticks satisfy q>=m",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "q",
                "m"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "duration": "20",
            "timingTextRange": [
                36,
                50
            ],
            "post_condition": "(q >= m)",
            "responseTextRange": [
                52,
                63
            ],
            "diagramVariables": " n = <b><i>20</i></b>, Response = <b><i>(q >= m)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>20</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>20</i></b>). If the interval ends sooner than trigger+<b><i>20</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "(q >= m)",
            "post_condition_unexp_ft": "(q >= m)",
            "post_condition_unexp_pctl": "(q >= m)",
            "post_condition_SMV_pt": "(q >= m)",
            "post_condition_SMV_ft": "(q >= m)",
            "post_condition_PRISM_pctl": "(q >= m)",
            "ft": "((F[<=20] (q >= m)) | (F[<20] LAST))",
            "pt": "(H ((H (! (q >= m))) -> (O[<20] (Z FALSE))))",
            "pctl": "(P>0.5[(F<=20 (q >= m))])",
            "ptExpanded": "(H ((H (! (q >= m))) -> (O[0,19] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not ((q >= m))) => OT(19, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,20] (q >= m)) | (F[0,19] LAST))",
            "pctlExpanded": "(P>0.5[(F<=20 (q >= m))])",
            "ftInfAUExpanded": "(F[0,20] (q >= m))",
            "component": "System"
        },
        "status": "",
        "_id": "7458410f-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R64",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "\"With a probability of 66% the emergency\nsignal is detected in less than 20 time steps\"",
        "comments": "",
        "fulltext": "whenever emergencySignal System shall with probability >= 0.66 within 2 ticks satisfy signalDetected",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "emergencySignal",
                "signalDetected"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(emergencySignal)",
            "regular_condition": "(emergencySignal)",
            "conditionTextRange": [
                0,
                23
            ],
            "component_name": "System",
            "componentTextRange": [
                25,
                30
            ],
            "probability_bound": [
                ">=",
                "0.66"
            ],
            "probabilityTextRange": [
                38,
                61
            ],
            "duration": "2",
            "timingTextRange": [
                63,
                76
            ],
            "post_condition": "(signalDetected)",
            "responseTextRange": [
                78,
                99
            ],
            "diagramVariables": "CC = <b><i>(emergencySignal)</i></b>,  n = <b><i>2</i></b>, Response = <b><i>(signalDetected)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(emergencySignal)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>2</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>2</i></b>). If the interval ends sooner than trigger+<b><i>2</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.66",
            "regular_condition_unexp_pt": "emergencySignal",
            "regular_condition_unexp_ft": "emergencySignal",
            "regular_condition_unexp_pctl": "emergencySignal",
            "regular_condition_SMV_pt": "emergencySignal",
            "regular_condition_SMV_ft": "emergencySignal",
            "regular_condition_PRISM_pctl": "emergencySignal",
            "post_condition_unexp_pt": "signalDetected",
            "post_condition_unexp_ft": "signalDetected",
            "post_condition_unexp_pctl": "signalDetected",
            "post_condition_SMV_pt": "signalDetected",
            "post_condition_SMV_ft": "signalDetected",
            "post_condition_PRISM_pctl": "signalDetected",
            "ft": "(LAST V (emergencySignal -> ((F[<=2] signalDetected) | (F[<2] LAST))))",
            "pt": "(H ((O[=2] (emergencySignal & (! signalDetected))) -> (O[<2] ((Z FALSE) | signalDetected))))",
            "pctl": "P>=1[(G (emergencySignal => (P>=0.66[(F<=2 signalDetected)])))]",
            "ptExpanded": "(H ((O[2,2] (emergencySignal & (! signalDetected))) -> (O[0,1] ((Z FALSE) | signalDetected))))",
            "CoCoSpecCode": "H((OT(2, 2, (emergencySignal and not (signalDetected))) => OT(1, 0, (ZtoPre(false) or signalDetected))))",
            "ftExpanded": "(LAST V (emergencySignal -> ((F[0,2] signalDetected) | (F[0,1] LAST))))",
            "pctlExpanded": "P>=1[(G (emergencySignal => (P>=0.66[(F<=2 signalDetected)])))]",
            "ftInfAUExpanded": "(G (emergencySignal -> (F[0,2] signalDetected)))",
            "component": "System"
        },
        "status": "",
        "_id": "74584110-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R85",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "The probability that the telescope crashes eventually without ever being in state 1 is at most 10^-5",
        "comments": "",
        "fulltext": "Telescope shall with probability <= 0.00001 until crash satisfy !state1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "crash",
                "state1"
            ],
            "component_name": "Telescope",
            "componentTextRange": [
                0,
                8
            ],
            "probability_bound": [
                "<=",
                "0.00001"
            ],
            "probabilityTextRange": [
                16,
                42
            ],
            "stop_condition": "(crash)",
            "timingTextRange": [
                44,
                54
            ],
            "post_condition": "(! state1)",
            "responseTextRange": [
                56,
                70
            ],
            "diagramVariables": "SC = <b><i>(crash)</i></b>, Response = <b><i>(! state1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_until_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<=0.00001",
            "post_condition_unexp_pt": "(! state1)",
            "post_condition_unexp_ft": "(! state1)",
            "post_condition_unexp_pctl": "(! state1)",
            "post_condition_SMV_pt": "(! state1)",
            "post_condition_SMV_ft": "(! state1)",
            "post_condition_PRISM_pctl": "(! state1)",
            "stop_condition_unexp_pt": "crash",
            "stop_condition_unexp_ft": "crash",
            "stop_condition_PRISM_pctl": "crash",
            "stop_condition_SMV_pt": "crash",
            "stop_condition_SMV_ft": "crash",
            "ft": "((crash V ((! state1) | crash)) | (LAST V (! state1)))",
            "pt": "(H ((H (! crash)) -> (! state1)))",
            "pctl": "(P<=0.00001[((undefined R ((! state1) | undefined)) | (LAST R (! state1)))])",
            "ptExpanded": "(H ((H (! crash)) -> (! state1)))",
            "CoCoSpecCode": "H((H(not (crash)) => not (state1)))",
            "ftExpanded": "((crash V ((! state1) | crash)) | (LAST V (! state1)))",
            "pctlExpanded": "(P<=0.00001[((crash R ((! state1) | crash)) | (false R (! state1)))])",
            "ftInfAUExpanded": "(crash V ((! state1) | crash))",
            "component": "Telescope"
        },
        "status": "",
        "_id": "74584111-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R5",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "The probability that one of the individuals gets more than 37 points within 100 steps is always less than 0.75 ",
        "comments": "",
        "fulltext": "System shall with probability < 0.75  within 100 ticks satisfy pointsd1 >=37",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "pointsd1"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<",
                "0.75"
            ],
            "probabilityTextRange": [
                13,
                35
            ],
            "duration": "100",
            "timingTextRange": [
                38,
                53
            ],
            "post_condition": "(pointsd1 >= 37)",
            "responseTextRange": [
                55,
                75
            ],
            "diagramVariables": " n = <b><i>100</i></b>, Response = <b><i>(pointsd1 >= 37)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>100</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>100</i></b>). If the interval ends sooner than trigger+<b><i>100</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.75",
            "post_condition_unexp_pt": "(pointsd1 >= 37)",
            "post_condition_unexp_ft": "(pointsd1 >= 37)",
            "post_condition_unexp_pctl": "(pointsd1 >= 37)",
            "post_condition_SMV_pt": "(pointsd1 >= 37)",
            "post_condition_SMV_ft": "(pointsd1 >= 37)",
            "post_condition_PRISM_pctl": "(pointsd1 >= 37)",
            "ft": "((F[<=100] (pointsd1 >= 37)) | (F[<100] LAST))",
            "pt": "(H ((H (! (pointsd1 >= 37))) -> (O[<100] (Z FALSE))))",
            "pctl": "(P<0.75[(F<=100 (pointsd1 >= 37))])",
            "ptExpanded": "(H ((H (! (pointsd1 >= 37))) -> (O[0,99] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not ((pointsd1 >= 37))) => OT(99, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,100] (pointsd1 >= 37)) | (F[0,99] LAST))",
            "pctlExpanded": "(P<0.75[(F<=100 (pointsd1 >= 37))])",
            "ftInfAUExpanded": "(F[0,100] (pointsd1 >= 37))",
            "component": "System"
        },
        "status": "",
        "_id": "74584112-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R56",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "The property that a full microcell will will recover in 1 msec. is less then 99.5%",
        "comments": "",
        "fulltext": "upon full System shall with probability <0.995 within 1 millisecond satisfy recover",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "full",
                "recover"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(full)",
            "regular_condition": "(full)",
            "conditionTextRange": [
                0,
                8
            ],
            "component_name": "System",
            "componentTextRange": [
                10,
                15
            ],
            "probability_bound": [
                "<",
                "0.995"
            ],
            "probabilityTextRange": [
                23,
                45
            ],
            "duration": "1",
            "timingTextRange": [
                47,
                66
            ],
            "post_condition": "(recover)",
            "responseTextRange": [
                68,
                82
            ],
            "diagramVariables": "TC = <b><i>(full)</i></b>,  n = <b><i>1</i></b>, Response = <b><i>(recover)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(full)</i></b> is true and any point in the interval where <b><i>(full)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>1</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>1</i></b>). If the interval ends sooner than trigger+<b><i>1</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.995",
            "regular_condition_unexp_pt": "full",
            "regular_condition_unexp_ft": "full",
            "regular_condition_unexp_pctl": "full",
            "regular_condition_SMV_pt": "full",
            "regular_condition_SMV_ft": "full",
            "regular_condition_PRISM_pctl": "full",
            "post_condition_unexp_pt": "recover",
            "post_condition_unexp_ft": "recover",
            "post_condition_unexp_pctl": "recover",
            "post_condition_SMV_pt": "recover",
            "post_condition_SMV_ft": "recover",
            "post_condition_PRISM_pctl": "recover",
            "ft": "((LAST V (((! full) & ((! LAST) & (X full))) -> (X ((F[<=1] recover) | (F[<1] LAST))))) & (full -> ((F[<=1] recover) | (F[<1] LAST))))",
            "pt": "(H ((O[=1] ((full & (Z (! full))) & (! recover))) -> (O[<1] ((Z FALSE) | recover))))",
            "pctl": "P>=1[((G (((! full) & (X full)) => (X (P<0.995[(F<=1 recover)])))) & (full => (P<0.995[(F[<=1] recover)])))]",
            "ptExpanded": "(H ((O[1,1] ((full & (Z (! full))) & (! recover))) -> (O[0,0] ((Z FALSE) | recover))))",
            "CoCoSpecCode": "H((OT(1, 1, ((full and ZtoPre(not (full))) and not (recover))) => OT(0, 0, (ZtoPre(false) or recover))))",
            "ftExpanded": "((LAST V (((! full) & ((! LAST) & (X full))) -> (X ((F[0,1] recover) | (F[0,0] LAST))))) & (full -> ((F[0,1] recover) | (F[0,0] LAST))))",
            "pctlExpanded": "P>=1[((G (((! full) & (X full)) => (X (P<0.995[(F<=1 recover)])))) & (full => (P<0.995[(F[<=1] recover)])))]",
            "ftInfAUExpanded": "((G (((! full) & (X full)) -> (X (F[0,1] recover)))) & (full -> (F[0,1] recover)))",
            "component": "System"
        },
        "status": "",
        "_id": "74584113-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R96",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "If the airbag in the car deploys, is it true with probability at least 0.9 that the rescue service will be sent within 10 minutes?",
        "comments": "",
        "fulltext": "if airbag System shall with probability >= 0.9 within 10 ticks satisfy sendRescue",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "airbag",
                "sendRescue"
            ],
            "qualifier_word": "if",
            "pre_condition": "(airbag)",
            "regular_condition": "(airbag)",
            "conditionTextRange": [
                0,
                8
            ],
            "component_name": "System",
            "componentTextRange": [
                10,
                15
            ],
            "probability_bound": [
                ">=",
                "0.9"
            ],
            "probabilityTextRange": [
                23,
                45
            ],
            "duration": "10",
            "timingTextRange": [
                47,
                61
            ],
            "post_condition": "(sendRescue)",
            "responseTextRange": [
                63,
                80
            ],
            "diagramVariables": "TC = <b><i>(airbag)</i></b>,  n = <b><i>10</i></b>, Response = <b><i>(sendRescue)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(airbag)</i></b> is true and any point in the interval where <b><i>(airbag)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.9",
            "regular_condition_unexp_pt": "airbag",
            "regular_condition_unexp_ft": "airbag",
            "regular_condition_unexp_pctl": "airbag",
            "regular_condition_SMV_pt": "airbag",
            "regular_condition_SMV_ft": "airbag",
            "regular_condition_PRISM_pctl": "airbag",
            "post_condition_unexp_pt": "sendRescue",
            "post_condition_unexp_ft": "sendRescue",
            "post_condition_unexp_pctl": "sendRescue",
            "post_condition_SMV_pt": "sendRescue",
            "post_condition_SMV_ft": "sendRescue",
            "post_condition_PRISM_pctl": "sendRescue",
            "ft": "((LAST V (((! airbag) & ((! LAST) & (X airbag))) -> (X ((F[<=10] sendRescue) | (F[<10] LAST))))) & (airbag -> ((F[<=10] sendRescue) | (F[<10] LAST))))",
            "pt": "(H ((O[=10] ((airbag & (Z (! airbag))) & (! sendRescue))) -> (O[<10] ((Z FALSE) | sendRescue))))",
            "pctl": "P>=1[((G (((! airbag) & (X airbag)) => (X (P>=0.9[(F<=10 sendRescue)])))) & (airbag => (P>=0.9[(F[<=10] sendRescue)])))]",
            "ptExpanded": "(H ((O[10,10] ((airbag & (Z (! airbag))) & (! sendRescue))) -> (O[0,9] ((Z FALSE) | sendRescue))))",
            "CoCoSpecCode": "H((OT(10, 10, ((airbag and ZtoPre(not (airbag))) and not (sendRescue))) => OT(9, 0, (ZtoPre(false) or sendRescue))))",
            "ftExpanded": "((LAST V (((! airbag) & ((! LAST) & (X airbag))) -> (X ((F[0,10] sendRescue) | (F[0,9] LAST))))) & (airbag -> ((F[0,10] sendRescue) | (F[0,9] LAST))))",
            "pctlExpanded": "P>=1[((G (((! airbag) & (X airbag)) => (X (P>=0.9[(F<=10 sendRescue)])))) & (airbag => (P>=0.9[(F[<=10] sendRescue)])))]",
            "ftInfAUExpanded": "((G (((! airbag) & (X airbag)) -> (X (F[0,10] sendRescue)))) & (airbag -> (F[0,10] sendRescue)))",
            "component": "System"
        },
        "status": "",
        "_id": "74584114-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R47",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "with probability at least 0.95, every message is received within 1000 nanoseconds in any possible execution.",
        "comments": "",
        "fulltext": "System shall with probability >= 0.95 for 1000 ticks satisfy received",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "for",
            "response": "satisfaction",
            "variables": [
                "received"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">=",
                "0.95"
            ],
            "probabilityTextRange": [
                13,
                36
            ],
            "duration": "1000",
            "timingTextRange": [
                38,
                51
            ],
            "post_condition": "(received)",
            "responseTextRange": [
                53,
                68
            ],
            "diagramVariables": " n = <b><i>1000</i></b>, Response = <b><i>(received)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the trigger and remain true for <b><i>1000</i></b> time points past the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>1000</i></b>), or to the end of the interval if the interval ends sooner than trigger+<b><i>1000</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_for_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.95",
            "post_condition_unexp_pt": "received",
            "post_condition_unexp_ft": "received",
            "post_condition_unexp_pctl": "received",
            "post_condition_SMV_pt": "received",
            "post_condition_SMV_ft": "received",
            "post_condition_PRISM_pctl": "received",
            "ft": "((G[<=1000] received) | (LAST V received))",
            "pt": "(H ((O[<=1000] (Z FALSE)) -> received))",
            "pctl": "(P>=0.95[(G<=1000 received)])",
            "ptExpanded": "(H ((O[0,1000] (Z FALSE)) -> received))",
            "CoCoSpecCode": "H((OT(1000, 0, ZtoPre(false)) => received))",
            "ftExpanded": "((G[0,1000] received) | (LAST V received))",
            "pctlExpanded": "(P>=0.95[(G<=1000 received)])",
            "ftInfAUExpanded": "((G[0,1000] received) | (G received))",
            "component": "System"
        },
        "status": "",
        "_id": "74584115-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R22",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "probability of station 1 being idle is higher than p.",
        "comments": "",
        "fulltext": "Station_1 shall with probability > 0.5 eventually satisfy idle  ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "idle"
            ],
            "component_name": "Station_1",
            "componentTextRange": [
                0,
                8
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                16,
                37
            ],
            "timingTextRange": [
                39,
                48
            ],
            "post_condition": "(idle)",
            "responseTextRange": [
                50,
                61
            ],
            "diagramVariables": "Response = <b><i>(idle)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "idle",
            "post_condition_unexp_ft": "idle",
            "post_condition_unexp_pctl": "idle",
            "post_condition_SMV_pt": "idle",
            "post_condition_SMV_ft": "idle",
            "post_condition_PRISM_pctl": "idle",
            "ft": "((! LAST) U idle)",
            "pt": "(O idle)",
            "pctl": "(P>0.5[(F idle)])",
            "ptExpanded": "(O idle)",
            "CoCoSpecCode": "O(idle)",
            "ftExpanded": "((! LAST) U idle)",
            "pctlExpanded": "(P>0.5[(F idle)])",
            "ftInfAUExpanded": "(F idle)",
            "component": "Station_1"
        },
        "status": "",
        "_id": "74584116-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R36",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "The probability  to receive an incoming call within 24 hours exceeds 0.5",
        "comments": "",
        "fulltext": "System shall with probability > 0.5 within 24 hours satisfy call",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "call"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "duration": "24",
            "timingTextRange": [
                36,
                50
            ],
            "post_condition": "(call)",
            "responseTextRange": [
                52,
                63
            ],
            "diagramVariables": " n = <b><i>24</i></b>, Response = <b><i>(call)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>24</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>24</i></b>). If the interval ends sooner than trigger+<b><i>24</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "call",
            "post_condition_unexp_ft": "call",
            "post_condition_unexp_pctl": "call",
            "post_condition_SMV_pt": "call",
            "post_condition_SMV_ft": "call",
            "post_condition_PRISM_pctl": "call",
            "ft": "((F[<=24] call) | (F[<24] LAST))",
            "pt": "(H ((H (! call)) -> (O[<24] (Z FALSE))))",
            "pctl": "(P>0.5[(F<=24 call)])",
            "ptExpanded": "(H ((H (! call)) -> (O[0,23] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (call)) => OT(23, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,24] call) | (F[0,23] LAST))",
            "pctlExpanded": "(P>0.5[(F<=24 call)])",
            "ftInfAUExpanded": "(F[0,24] call)",
            "component": "System"
        },
        "status": "",
        "_id": "74584117-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R75",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "the probability that at least M requests get lost by t;",
        "comments": "",
        "fulltext": "System shall with probability > 0.5 within 20 ticks satisfy lost>=m",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "lost",
                "m"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "duration": "20",
            "timingTextRange": [
                36,
                50
            ],
            "post_condition": "(lost >= m)",
            "responseTextRange": [
                52,
                66
            ],
            "diagramVariables": " n = <b><i>20</i></b>, Response = <b><i>(lost >= m)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>20</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>20</i></b>). If the interval ends sooner than trigger+<b><i>20</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "(lost >= m)",
            "post_condition_unexp_ft": "(lost >= m)",
            "post_condition_unexp_pctl": "(lost >= m)",
            "post_condition_SMV_pt": "(lost >= m)",
            "post_condition_SMV_ft": "(lost >= m)",
            "post_condition_PRISM_pctl": "(lost >= m)",
            "ft": "((F[<=20] (lost >= m)) | (F[<20] LAST))",
            "pt": "(H ((H (! (lost >= m))) -> (O[<20] (Z FALSE))))",
            "pctl": "(P>0.5[(F<=20 (lost >= m))])",
            "ptExpanded": "(H ((H (! (lost >= m))) -> (O[0,19] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not ((lost >= m))) => OT(19, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,20] (lost >= m)) | (F[0,19] LAST))",
            "pctlExpanded": "(P>0.5[(F<=20 (lost >= m))])",
            "ftInfAUExpanded": "(F[0,20] (lost >= m))",
            "component": "System"
        },
        "status": "",
        "_id": "74584118-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R57",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "The property  to recover from all  microcell are full in 0.1 sec. is less then 25%",
        "comments": "",
        "fulltext": "upon allCellsFull System shall with probability <=0.25 within 0.1 ticks satisfy recoverAll",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "allCellsFull",
                "recoverAll"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(allCellsFull)",
            "regular_condition": "(allCellsFull)",
            "conditionTextRange": [
                0,
                16
            ],
            "component_name": "System",
            "componentTextRange": [
                18,
                23
            ],
            "probability_bound": [
                "<=",
                "0.25"
            ],
            "probabilityTextRange": [
                31,
                53
            ],
            "duration": "0.1",
            "timingTextRange": [
                55,
                70
            ],
            "post_condition": "(recoverAll)",
            "responseTextRange": [
                72,
                89
            ],
            "diagramVariables": "TC = <b><i>(allCellsFull)</i></b>,  n = <b><i>0.1</i></b>, Response = <b><i>(recoverAll)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(allCellsFull)</i></b> is true and any point in the interval where <b><i>(allCellsFull)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>0.1</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>0.1</i></b>). If the interval ends sooner than trigger+<b><i>0.1</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<=0.25",
            "regular_condition_unexp_pt": "allCellsFull",
            "regular_condition_unexp_ft": "allCellsFull",
            "regular_condition_unexp_pctl": "allCellsFull",
            "regular_condition_SMV_pt": "allCellsFull",
            "regular_condition_SMV_ft": "allCellsFull",
            "regular_condition_PRISM_pctl": "allCellsFull",
            "post_condition_unexp_pt": "recoverAll",
            "post_condition_unexp_ft": "recoverAll",
            "post_condition_unexp_pctl": "recoverAll",
            "post_condition_SMV_pt": "recoverAll",
            "post_condition_SMV_ft": "recoverAll",
            "post_condition_PRISM_pctl": "recoverAll",
            "ft": "((LAST V (((! allCellsFull) & ((! LAST) & (X allCellsFull))) -> (X ((F[<=0.1] recoverAll) | (F[<0.1] LAST))))) & (allCellsFull -> ((F[<=0.1] recoverAll) | (F[<0.1] LAST))))",
            "pt": "(H ((O[=0.1] ((allCellsFull & (Z (! allCellsFull))) & (! recoverAll))) -> (O[<0.1] ((Z FALSE) | recoverAll))))",
            "pctl": "P>=1[((G (((! allCellsFull) & (X allCellsFull)) => (X (P<=0.25[(F<=0.1 recoverAll)])))) & (allCellsFull => (P<=0.25[(F[<=0.1] recoverAll)])))]",
            "ptExpanded": "(H ((O[=0.1] ((allCellsFull & (Z (! allCellsFull))) & (! recoverAll))) -> (O[<0.1] ((Z FALSE) | recoverAll))))",
            "CoCoSpecCode": "H((OT(0.1, Equal, ((allCellsFull and ZtoPre(not (allCellsFull))) and not (recoverAll))) => OT(0.1, LessThan, (ZtoPre(false) or recoverAll))))",
            "ftExpanded": "((LAST V (((! allCellsFull) & ((! LAST) & (X allCellsFull))) -> (X ((F[<=0.1] recoverAll) | (F[<0.1] LAST))))) & (allCellsFull -> ((F[<=0.1] recoverAll) | (F[<0.1] LAST))))",
            "pctlExpanded": "P>=1[((G (((! allCellsFull) & (X allCellsFull)) => (X (P<=0.25[(F<=0.1 recoverAll)])))) & (allCellsFull => (P<=0.25[(F[<=0.1] recoverAll)])))]",
            "ftInfAUExpanded": "((G (((! allCellsFull) & (X allCellsFull)) -> (X (F[<=0.1] recoverAll)))) & (allCellsFull -> (F[<=0.1] recoverAll)))",
            "component": "System"
        },
        "status": "",
        "_id": "74584119-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R65",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "QoS drops below minimum quality within 85 time units is less than 10%.",
        "comments": "",
        "fulltext": "System shall with probability < 0.1 within 85 ticks satisfy quality < minimum",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "quality",
                "minimum"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<",
                "0.1"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "duration": "85",
            "timingTextRange": [
                36,
                50
            ],
            "post_condition": "(quality < minimum)",
            "responseTextRange": [
                52,
                76
            ],
            "diagramVariables": " n = <b><i>85</i></b>, Response = <b><i>(quality < minimum)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>85</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>85</i></b>). If the interval ends sooner than trigger+<b><i>85</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.1",
            "post_condition_unexp_pt": "(quality < minimum)",
            "post_condition_unexp_ft": "(quality < minimum)",
            "post_condition_unexp_pctl": "(quality < minimum)",
            "post_condition_SMV_pt": "(quality < minimum)",
            "post_condition_SMV_ft": "(quality < minimum)",
            "post_condition_PRISM_pctl": "(quality < minimum)",
            "ft": "((F[<=85] (quality < minimum)) | (F[<85] LAST))",
            "pt": "(H ((H (! (quality < minimum))) -> (O[<85] (Z FALSE))))",
            "pctl": "(P<0.1[(F<=85 (quality < minimum))])",
            "ptExpanded": "(H ((H (! (quality < minimum))) -> (O[0,84] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not ((quality < minimum))) => OT(84, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,85] (quality < minimum)) | (F[0,84] LAST))",
            "pctlExpanded": "(P<0.1[(F<=85 (quality < minimum))])",
            "ftInfAUExpanded": "(F[0,85] (quality < minimum))",
            "component": "System"
        },
        "status": "",
        "_id": "7458411a-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R97",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "The controller should respond to an alarm by opening a valve within 4 time units.",
        "comments": "",
        "fulltext": "upon alarm System shall with probability >= 1 within 4 ticks satisfy openValve",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "alarm",
                "openValve"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(alarm)",
            "regular_condition": "(alarm)",
            "conditionTextRange": [
                0,
                9
            ],
            "component_name": "System",
            "componentTextRange": [
                11,
                16
            ],
            "probability_bound": [
                ">=",
                "1"
            ],
            "probabilityTextRange": [
                24,
                44
            ],
            "duration": "4",
            "timingTextRange": [
                46,
                59
            ],
            "post_condition": "(openValve)",
            "responseTextRange": [
                61,
                77
            ],
            "diagramVariables": "TC = <b><i>(alarm)</i></b>,  n = <b><i>4</i></b>, Response = <b><i>(openValve)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(alarm)</i></b> is true and any point in the interval where <b><i>(alarm)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>4</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>4</i></b>). If the interval ends sooner than trigger+<b><i>4</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=1",
            "regular_condition_unexp_pt": "alarm",
            "regular_condition_unexp_ft": "alarm",
            "regular_condition_unexp_pctl": "alarm",
            "regular_condition_SMV_pt": "alarm",
            "regular_condition_SMV_ft": "alarm",
            "regular_condition_PRISM_pctl": "alarm",
            "post_condition_unexp_pt": "openValve",
            "post_condition_unexp_ft": "openValve",
            "post_condition_unexp_pctl": "openValve",
            "post_condition_SMV_pt": "openValve",
            "post_condition_SMV_ft": "openValve",
            "post_condition_PRISM_pctl": "openValve",
            "ft": "((LAST V (((! alarm) & ((! LAST) & (X alarm))) -> (X ((F[<=4] openValve) | (F[<4] LAST))))) & (alarm -> ((F[<=4] openValve) | (F[<4] LAST))))",
            "pt": "(H ((O[=4] ((alarm & (Z (! alarm))) & (! openValve))) -> (O[<4] ((Z FALSE) | openValve))))",
            "pctl": "P>=1[((G (((! alarm) & (X alarm)) => (X (P>=1[(F<=4 openValve)])))) & (alarm => (P>=1[(F[<=4] openValve)])))]",
            "ptExpanded": "(H ((O[4,4] ((alarm & (Z (! alarm))) & (! openValve))) -> (O[0,3] ((Z FALSE) | openValve))))",
            "CoCoSpecCode": "H((OT(4, 4, ((alarm and ZtoPre(not (alarm))) and not (openValve))) => OT(3, 0, (ZtoPre(false) or openValve))))",
            "ftExpanded": "((LAST V (((! alarm) & ((! LAST) & (X alarm))) -> (X ((F[0,4] openValve) | (F[0,3] LAST))))) & (alarm -> ((F[0,4] openValve) | (F[0,3] LAST))))",
            "pctlExpanded": "P>=1[((G (((! alarm) & (X alarm)) => (X (P>=1[(F<=4 openValve)])))) & (alarm => (P>=1[(F[<=4] openValve)])))]",
            "ftInfAUExpanded": "((G (((! alarm) & (X alarm)) -> (X (F[0,4] openValve)))) & (alarm -> (F[0,4] openValve)))",
            "component": "System"
        },
        "status": "",
        "_id": "7458411b-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R6",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "the probability to elect a leader within a certain number of rounds ((N+1)·3)  is less then p",
        "comments": "",
        "fulltext": "System shall with probability < 0.5 within 15 ticks satisfy leaderElected",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "leaderElected"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "duration": "15",
            "timingTextRange": [
                36,
                50
            ],
            "post_condition": "(leaderElected)",
            "responseTextRange": [
                52,
                72
            ],
            "diagramVariables": " n = <b><i>15</i></b>, Response = <b><i>(leaderElected)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>15</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>15</i></b>). If the interval ends sooner than trigger+<b><i>15</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.5",
            "post_condition_unexp_pt": "leaderElected",
            "post_condition_unexp_ft": "leaderElected",
            "post_condition_unexp_pctl": "leaderElected",
            "post_condition_SMV_pt": "leaderElected",
            "post_condition_SMV_ft": "leaderElected",
            "post_condition_PRISM_pctl": "leaderElected",
            "ft": "((F[<=15] leaderElected) | (F[<15] LAST))",
            "pt": "(H ((H (! leaderElected)) -> (O[<15] (Z FALSE))))",
            "pctl": "(P<0.5[(F<=15 leaderElected)])",
            "ptExpanded": "(H ((H (! leaderElected)) -> (O[0,14] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (leaderElected)) => OT(14, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,15] leaderElected) | (F[0,14] LAST))",
            "pctlExpanded": "(P<0.5[(F<=15 leaderElected)])",
            "ftInfAUExpanded": "(F[0,15] leaderElected)",
            "component": "System"
        },
        "status": "",
        "_id": "7458411c-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R86",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "\"the probability the system does not go down until\nafter the request has been served is at least 0.9\"",
        "comments": "",
        "fulltext": "System shall with probability >= 0.9 until requestServed satisfy !down",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "requestServed",
                "down"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">=",
                "0.9"
            ],
            "probabilityTextRange": [
                13,
                35
            ],
            "stop_condition": "(requestServed)",
            "timingTextRange": [
                37,
                55
            ],
            "post_condition": "(! down)",
            "responseTextRange": [
                57,
                69
            ],
            "diagramVariables": "SC = <b><i>(requestServed)</i></b>, Response = <b><i>(! down)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_until_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.9",
            "post_condition_unexp_pt": "(! down)",
            "post_condition_unexp_ft": "(! down)",
            "post_condition_unexp_pctl": "(! down)",
            "post_condition_SMV_pt": "(! down)",
            "post_condition_SMV_ft": "(! down)",
            "post_condition_PRISM_pctl": "(! down)",
            "stop_condition_unexp_pt": "requestServed",
            "stop_condition_unexp_ft": "requestServed",
            "stop_condition_PRISM_pctl": "requestServed",
            "stop_condition_SMV_pt": "requestServed",
            "stop_condition_SMV_ft": "requestServed",
            "ft": "((requestServed V ((! down) | requestServed)) | (LAST V (! down)))",
            "pt": "(H ((H (! requestServed)) -> (! down)))",
            "pctl": "(P>=0.9[((undefined R ((! down) | undefined)) | (LAST R (! down)))])",
            "ptExpanded": "(H ((H (! requestServed)) -> (! down)))",
            "CoCoSpecCode": "H((H(not (requestServed)) => not (down)))",
            "ftExpanded": "((requestServed V ((! down) | requestServed)) | (LAST V (! down)))",
            "pctlExpanded": "(P>=0.9[((requestServed R ((! down) | requestServed)) | (false R (! down)))])",
            "ftInfAUExpanded": "(requestServed V ((! down) | requestServed))",
            "component": "System"
        },
        "status": "",
        "_id": "7458411d-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R16",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "Once station 1 has become busy, it will eventually be polled.",
        "comments": "",
        "fulltext": "upon busy1 System shall eventually satisfy poll",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "busy1",
                "poll"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(busy1)",
            "regular_condition": "(busy1)",
            "conditionTextRange": [
                0,
                9
            ],
            "component_name": "System",
            "componentTextRange": [
                11,
                16
            ],
            "timingTextRange": [
                24,
                33
            ],
            "post_condition": "(poll)",
            "responseTextRange": [
                35,
                46
            ],
            "diagramVariables": "TC = <b><i>(busy1)</i></b>, Response = <b><i>(poll)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(busy1)</i></b> is true and any point in the interval where <b><i>(busy1)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "busy1",
            "regular_condition_unexp_ft": "busy1",
            "regular_condition_unexp_pctl": "busy1",
            "regular_condition_SMV_pt": "busy1",
            "regular_condition_SMV_ft": "busy1",
            "regular_condition_PRISM_pctl": "busy1",
            "post_condition_unexp_pt": "poll",
            "post_condition_unexp_ft": "poll",
            "post_condition_unexp_pctl": "poll",
            "post_condition_SMV_pt": "poll",
            "post_condition_SMV_ft": "poll",
            "post_condition_PRISM_pctl": "poll",
            "ft": "((LAST V (((! busy1) & ((! LAST) & (X busy1))) -> (X ((! LAST) U poll)))) & (busy1 -> ((! LAST) U poll)))",
            "pt": "((H (! busy1)) | (! ((! poll) S ((! poll) & (busy1 & (Z (! busy1)))))))",
            "pctl": "P>=1[((G (((! busy1) & (X busy1)) => (X (P>=1[(F poll)])))) & (busy1 => (P>=1[(F poll)])))]",
            "ptExpanded": "((H (! busy1)) | (! ((! poll) S ((! poll) & (busy1 & (Z (! busy1)))))))",
            "CoCoSpecCode": "(H(not (busy1)) or not (SI((busy1 and ZtoPre(not (busy1))),not (poll))))",
            "ftExpanded": "((LAST V (((! busy1) & ((! LAST) & (X busy1))) -> (X ((! LAST) U poll)))) & (busy1 -> ((! LAST) U poll)))",
            "pctlExpanded": "P>=1[((G (((! busy1) & (X busy1)) => (X (P>=1[(F poll)])))) & (busy1 => (P>=1[(F poll)])))]",
            "ftInfAUExpanded": "((G (((! busy1) & (X busy1)) -> (X (F poll)))) & (busy1 -> (F poll)))",
            "component": "System"
        },
        "status": "",
        "_id": "7458411e-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R76",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "\"the probability that h1 calls will be dropped within\ntime units is less than 10% .\"",
        "comments": "",
        "fulltext": "System shall with probability < 0.1 within 1 tick satisfy h1drop",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "h1drop"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<",
                "0.1"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "duration": "1",
            "timingTextRange": [
                36,
                48
            ],
            "post_condition": "(h1drop)",
            "responseTextRange": [
                50,
                63
            ],
            "diagramVariables": " n = <b><i>1</i></b>, Response = <b><i>(h1drop)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>1</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>1</i></b>). If the interval ends sooner than trigger+<b><i>1</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.1",
            "post_condition_unexp_pt": "h1drop",
            "post_condition_unexp_ft": "h1drop",
            "post_condition_unexp_pctl": "h1drop",
            "post_condition_SMV_pt": "h1drop",
            "post_condition_SMV_ft": "h1drop",
            "post_condition_PRISM_pctl": "h1drop",
            "ft": "((F[<=1] h1drop) | (F[<1] LAST))",
            "pt": "(H ((H (! h1drop)) -> (O[<1] (Z FALSE))))",
            "pctl": "(P<0.1[(F<=1 h1drop)])",
            "ptExpanded": "(H ((H (! h1drop)) -> (O[0,0] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (h1drop)) => OT(0, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,1] h1drop) | (F[0,0] LAST))",
            "pctlExpanded": "(P<0.1[(F<=1 h1drop)])",
            "ftInfAUExpanded": "(F[0,1] h1drop)",
            "component": "System"
        },
        "status": "",
        "_id": "7458411f-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R48",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "The duration for a UAV for crossing  the network and the RTIG from the federate A to the federate C is less than 1ms in at least 90% of the cases",
        "comments": "",
        "fulltext": "Whenever a the system shall with probability > 0.9 within 0.001 millisecond satisfy b",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "a",
                "b"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(a)",
            "regular_condition": "(a)",
            "conditionTextRange": [
                0,
                9
            ],
            "component_name": "system",
            "componentTextRange": [
                11,
                20
            ],
            "probability_bound": [
                ">",
                "0.9"
            ],
            "probabilityTextRange": [
                28,
                49
            ],
            "duration": "0.001",
            "timingTextRange": [
                51,
                74
            ],
            "post_condition": "(b)",
            "responseTextRange": [
                76,
                84
            ],
            "diagramVariables": "CC = <b><i>(a)</i></b>,  n = <b><i>0.001</i></b>, Response = <b><i>(b)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(a)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>0.001</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>0.001</i></b>). If the interval ends sooner than trigger+<b><i>0.001</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.9",
            "regular_condition_unexp_pt": "a",
            "regular_condition_unexp_ft": "a",
            "regular_condition_unexp_pctl": "a",
            "regular_condition_SMV_pt": "a",
            "regular_condition_SMV_ft": "a",
            "regular_condition_PRISM_pctl": "a",
            "post_condition_unexp_pt": "b",
            "post_condition_unexp_ft": "b",
            "post_condition_unexp_pctl": "b",
            "post_condition_SMV_pt": "b",
            "post_condition_SMV_ft": "b",
            "post_condition_PRISM_pctl": "b",
            "ft": "(LAST V (a -> ((F[<=0.001] b) | (F[<0.001] LAST))))",
            "pt": "(H ((O[=0.001] (a & (! b))) -> (O[<0.001] ((Z FALSE) | b))))",
            "pctl": "P>=1[(G (a => (P>0.9[(F<=0.001 b)])))]",
            "ptExpanded": "(H ((O[=0.001] (a & (! b))) -> (O[<0.001] ((Z FALSE) | b))))",
            "CoCoSpecCode": "H((OT(0.001, Equal, (a and not (b))) => OT(0.001, LessThan, (ZtoPre(false) or b))))",
            "ftExpanded": "(LAST V (a -> ((F[<=0.001] b) | (F[<0.001] LAST))))",
            "pctlExpanded": "P>=1[(G (a => (P>0.9[(F<=0.001 b)])))]",
            "ftInfAUExpanded": "(G (a -> (F[<=0.001] b)))",
            "component": "system"
        },
        "status": "",
        "_id": "74584120-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R7",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "with probability 0.975 or greater, a leader is elected within 100 time units",
        "comments": "",
        "fulltext": "System shall with probability >= 0.975 within 100 ticks satisfy leaderElected",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "leaderElected"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">=",
                "0.975"
            ],
            "probabilityTextRange": [
                13,
                37
            ],
            "duration": "100",
            "timingTextRange": [
                39,
                54
            ],
            "post_condition": "(leaderElected)",
            "responseTextRange": [
                56,
                76
            ],
            "diagramVariables": " n = <b><i>100</i></b>, Response = <b><i>(leaderElected)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>100</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>100</i></b>). If the interval ends sooner than trigger+<b><i>100</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.975",
            "post_condition_unexp_pt": "leaderElected",
            "post_condition_unexp_ft": "leaderElected",
            "post_condition_unexp_pctl": "leaderElected",
            "post_condition_SMV_pt": "leaderElected",
            "post_condition_SMV_ft": "leaderElected",
            "post_condition_PRISM_pctl": "leaderElected",
            "ft": "((F[<=100] leaderElected) | (F[<100] LAST))",
            "pt": "(H ((H (! leaderElected)) -> (O[<100] (Z FALSE))))",
            "pctl": "(P>=0.975[(F<=100 leaderElected)])",
            "ptExpanded": "(H ((H (! leaderElected)) -> (O[0,99] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (leaderElected)) => OT(99, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,100] leaderElected) | (F[0,99] LAST))",
            "pctlExpanded": "(P>=0.975[(F<=100 leaderElected)])",
            "ftInfAUExpanded": "(F[0,100] leaderElected)",
            "component": "System"
        },
        "status": "",
        "_id": "74584121-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R23",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "There is a less than 10% chance of the QoS dropping below minimum within T time units",
        "comments": "",
        "fulltext": "System shall with probability <0.1 within 10 ticks satisfy QoS < minimum",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "QoS",
                "minimum"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<",
                "0.1"
            ],
            "probabilityTextRange": [
                13,
                33
            ],
            "duration": "10",
            "timingTextRange": [
                35,
                49
            ],
            "post_condition": "(QoS < minimum)",
            "responseTextRange": [
                51,
                71
            ],
            "diagramVariables": " n = <b><i>10</i></b>, Response = <b><i>(QoS < minimum)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.1",
            "post_condition_unexp_pt": "(QoS < minimum)",
            "post_condition_unexp_ft": "(QoS < minimum)",
            "post_condition_unexp_pctl": "(QoS < minimum)",
            "post_condition_SMV_pt": "(QoS < minimum)",
            "post_condition_SMV_ft": "(QoS < minimum)",
            "post_condition_PRISM_pctl": "(QoS < minimum)",
            "ft": "((F[<=10] (QoS < minimum)) | (F[<10] LAST))",
            "pt": "(H ((H (! (QoS < minimum))) -> (O[<10] (Z FALSE))))",
            "pctl": "(P<0.1[(F<=10 (QoS < minimum))])",
            "ptExpanded": "(H ((H (! (QoS < minimum))) -> (O[0,9] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not ((QoS < minimum))) => OT(9, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,10] (QoS < minimum)) | (F[0,9] LAST))",
            "pctlExpanded": "(P<0.1[(F<=10 (QoS < minimum))])",
            "ftInfAUExpanded": "(F[0,10] (QoS < minimum))",
            "component": "System"
        },
        "status": "",
        "_id": "74584122-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R37",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "the probability of a package loss lower than the omission degree (fail) within 2.4 miliseconds is less than p",
        "comments": "",
        "fulltext": "System shall with probability <0.5 within 2.4 milliseconds satisfy packageLoss < omissionDegree",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "packageLoss",
                "omissionDegree"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                33
            ],
            "duration": "2.4",
            "timingTextRange": [
                35,
                57
            ],
            "post_condition": "(packageLoss < omissionDegree)",
            "responseTextRange": [
                59,
                94
            ],
            "diagramVariables": " n = <b><i>2.4</i></b>, Response = <b><i>(packageLoss < omissionDegree)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>2.4</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>2.4</i></b>). If the interval ends sooner than trigger+<b><i>2.4</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.5",
            "post_condition_unexp_pt": "(packageLoss < omissionDegree)",
            "post_condition_unexp_ft": "(packageLoss < omissionDegree)",
            "post_condition_unexp_pctl": "(packageLoss < omissionDegree)",
            "post_condition_SMV_pt": "(packageLoss < omissionDegree)",
            "post_condition_SMV_ft": "(packageLoss < omissionDegree)",
            "post_condition_PRISM_pctl": "(packageLoss < omissionDegree)",
            "ft": "((F[<=2.4] (packageLoss < omissionDegree)) | (F[<2.4] LAST))",
            "pt": "(H ((H (! (packageLoss < omissionDegree))) -> (O[<2.4] (Z FALSE))))",
            "pctl": "(P<0.5[(F<=2.4 (packageLoss < omissionDegree))])",
            "ptExpanded": "(H ((H (! (packageLoss < omissionDegree))) -> (O[<2.4] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not ((packageLoss < omissionDegree))) => OT(2.4, LessThan, ZtoPre(false))))",
            "ftExpanded": "((F[<=2.4] (packageLoss < omissionDegree)) | (F[<2.4] LAST))",
            "pctlExpanded": "(P<0.5[(F<=2.4 (packageLoss < omissionDegree))])",
            "ftInfAUExpanded": "(F[<=2.4] (packageLoss < omissionDegree))",
            "component": "System"
        },
        "status": "",
        "_id": "74584123-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R87",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "\"at least one channel is free if the dropping\nprobability of h1 calls within time units is less than 0.1\"",
        "comments": "",
        "fulltext": "System shall with probability < 0.1 within 60 ticks satisfy h1drop",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "h1drop"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<",
                "0.1"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "duration": "60",
            "timingTextRange": [
                36,
                50
            ],
            "post_condition": "(h1drop)",
            "responseTextRange": [
                52,
                65
            ],
            "diagramVariables": " n = <b><i>60</i></b>, Response = <b><i>(h1drop)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>60</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>60</i></b>). If the interval ends sooner than trigger+<b><i>60</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.1",
            "post_condition_unexp_pt": "h1drop",
            "post_condition_unexp_ft": "h1drop",
            "post_condition_unexp_pctl": "h1drop",
            "post_condition_SMV_pt": "h1drop",
            "post_condition_SMV_ft": "h1drop",
            "post_condition_PRISM_pctl": "h1drop",
            "ft": "((F[<=60] h1drop) | (F[<60] LAST))",
            "pt": "(H ((H (! h1drop)) -> (O[<60] (Z FALSE))))",
            "pctl": "(P<0.1[(F<=60 h1drop)])",
            "ptExpanded": "(H ((H (! h1drop)) -> (O[0,59] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (h1drop)) => OT(59, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,60] h1drop) | (F[0,59] LAST))",
            "pctlExpanded": "(P<0.1[(F<=60 h1drop)])",
            "ftInfAUExpanded": "(F[0,60] h1drop)",
            "component": "System"
        },
        "status": "",
        "_id": "74584124-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R98",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "In 99% of the cases the controller should respond to an alarm by opening a valve within 4 time units.",
        "comments": "",
        "fulltext": "upon alarm System shall with probability= 0.99 within 4 ticks satisfy openValve",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "alarm",
                "openValve"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(alarm)",
            "regular_condition": "(alarm)",
            "conditionTextRange": [
                0,
                9
            ],
            "component_name": "System",
            "componentTextRange": [
                11,
                16
            ],
            "probability_bound": [
                "=",
                "0.99"
            ],
            "probabilityTextRange": [
                24,
                45
            ],
            "duration": "4",
            "timingTextRange": [
                47,
                60
            ],
            "post_condition": "(openValve)",
            "responseTextRange": [
                62,
                78
            ],
            "diagramVariables": "TC = <b><i>(alarm)</i></b>,  n = <b><i>4</i></b>, Response = <b><i>(openValve)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(alarm)</i></b> is true and any point in the interval where <b><i>(alarm)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>4</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>4</i></b>). If the interval ends sooner than trigger+<b><i>4</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "=0.99",
            "regular_condition_unexp_pt": "alarm",
            "regular_condition_unexp_ft": "alarm",
            "regular_condition_unexp_pctl": "alarm",
            "regular_condition_SMV_pt": "alarm",
            "regular_condition_SMV_ft": "alarm",
            "regular_condition_PRISM_pctl": "alarm",
            "post_condition_unexp_pt": "openValve",
            "post_condition_unexp_ft": "openValve",
            "post_condition_unexp_pctl": "openValve",
            "post_condition_SMV_pt": "openValve",
            "post_condition_SMV_ft": "openValve",
            "post_condition_PRISM_pctl": "openValve",
            "ft": "((LAST V (((! alarm) & ((! LAST) & (X alarm))) -> (X ((F[<=4] openValve) | (F[<4] LAST))))) & (alarm -> ((F[<=4] openValve) | (F[<4] LAST))))",
            "pt": "(H ((O[=4] ((alarm & (Z (! alarm))) & (! openValve))) -> (O[<4] ((Z FALSE) | openValve))))",
            "pctl": "P>=1[((G (((! alarm) & (X alarm)) => (X (P=0.99[(F<=4 openValve)])))) & (alarm => (P=0.99[(F[<=4] openValve)])))]",
            "ptExpanded": "(H ((O[4,4] ((alarm & (Z (! alarm))) & (! openValve))) -> (O[0,3] ((Z FALSE) | openValve))))",
            "CoCoSpecCode": "H((OT(4, 4, ((alarm and ZtoPre(not (alarm))) and not (openValve))) => OT(3, 0, (ZtoPre(false) or openValve))))",
            "ftExpanded": "((LAST V (((! alarm) & ((! LAST) & (X alarm))) -> (X ((F[0,4] openValve) | (F[0,3] LAST))))) & (alarm -> ((F[0,4] openValve) | (F[0,3] LAST))))",
            "pctlExpanded": "P>=1[((G (((! alarm) & (X alarm)) => (X (P=0.99[(F<=4 openValve)])))) & (alarm => (P=0.99[(F[<=4] openValve)])))]",
            "ftInfAUExpanded": "((G (((! alarm) & (X alarm)) -> (X (F[0,4] openValve)))) & (alarm -> (F[0,4] openValve)))",
            "component": "System"
        },
        "status": "",
        "_id": "74584125-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R58",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "The property to recover from all  microcell are full full in 1 msec. is less then 50%",
        "comments": "",
        "fulltext": "upon allCellsFull System shall with probability <=0.5 within 1 ticks satisfy recoverAll",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "allCellsFull",
                "recoverAll"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(allCellsFull)",
            "regular_condition": "(allCellsFull)",
            "conditionTextRange": [
                0,
                16
            ],
            "component_name": "System",
            "componentTextRange": [
                18,
                23
            ],
            "probability_bound": [
                "<=",
                "0.5"
            ],
            "probabilityTextRange": [
                31,
                52
            ],
            "duration": "1",
            "timingTextRange": [
                54,
                67
            ],
            "post_condition": "(recoverAll)",
            "responseTextRange": [
                69,
                86
            ],
            "diagramVariables": "TC = <b><i>(allCellsFull)</i></b>,  n = <b><i>1</i></b>, Response = <b><i>(recoverAll)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(allCellsFull)</i></b> is true and any point in the interval where <b><i>(allCellsFull)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>1</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>1</i></b>). If the interval ends sooner than trigger+<b><i>1</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<=0.5",
            "regular_condition_unexp_pt": "allCellsFull",
            "regular_condition_unexp_ft": "allCellsFull",
            "regular_condition_unexp_pctl": "allCellsFull",
            "regular_condition_SMV_pt": "allCellsFull",
            "regular_condition_SMV_ft": "allCellsFull",
            "regular_condition_PRISM_pctl": "allCellsFull",
            "post_condition_unexp_pt": "recoverAll",
            "post_condition_unexp_ft": "recoverAll",
            "post_condition_unexp_pctl": "recoverAll",
            "post_condition_SMV_pt": "recoverAll",
            "post_condition_SMV_ft": "recoverAll",
            "post_condition_PRISM_pctl": "recoverAll",
            "ft": "((LAST V (((! allCellsFull) & ((! LAST) & (X allCellsFull))) -> (X ((F[<=1] recoverAll) | (F[<1] LAST))))) & (allCellsFull -> ((F[<=1] recoverAll) | (F[<1] LAST))))",
            "pt": "(H ((O[=1] ((allCellsFull & (Z (! allCellsFull))) & (! recoverAll))) -> (O[<1] ((Z FALSE) | recoverAll))))",
            "pctl": "P>=1[((G (((! allCellsFull) & (X allCellsFull)) => (X (P<=0.5[(F<=1 recoverAll)])))) & (allCellsFull => (P<=0.5[(F[<=1] recoverAll)])))]",
            "ptExpanded": "(H ((O[1,1] ((allCellsFull & (Z (! allCellsFull))) & (! recoverAll))) -> (O[0,0] ((Z FALSE) | recoverAll))))",
            "CoCoSpecCode": "H((OT(1, 1, ((allCellsFull and ZtoPre(not (allCellsFull))) and not (recoverAll))) => OT(0, 0, (ZtoPre(false) or recoverAll))))",
            "ftExpanded": "((LAST V (((! allCellsFull) & ((! LAST) & (X allCellsFull))) -> (X ((F[0,1] recoverAll) | (F[0,0] LAST))))) & (allCellsFull -> ((F[0,1] recoverAll) | (F[0,0] LAST))))",
            "pctlExpanded": "P>=1[((G (((! allCellsFull) & (X allCellsFull)) => (X (P<=0.5[(F<=1 recoverAll)])))) & (allCellsFull => (P<=0.5[(F[<=1] recoverAll)])))]",
            "ftInfAUExpanded": "((G (((! allCellsFull) & (X allCellsFull)) -> (X (F[0,1] recoverAll)))) & (allCellsFull -> (F[0,1] recoverAll)))",
            "component": "System"
        },
        "status": "",
        "_id": "74584126-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R77",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "The probability that the system will crash within the next 10 years is at most 2%",
        "comments": "",
        "fulltext": "System shall with probability <= 0.02 within 10 ticks satisfy crash",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "crash"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<=",
                "0.02"
            ],
            "probabilityTextRange": [
                13,
                36
            ],
            "duration": "10",
            "timingTextRange": [
                38,
                52
            ],
            "post_condition": "(crash)",
            "responseTextRange": [
                54,
                66
            ],
            "diagramVariables": " n = <b><i>10</i></b>, Response = <b><i>(crash)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<=0.02",
            "post_condition_unexp_pt": "crash",
            "post_condition_unexp_ft": "crash",
            "post_condition_unexp_pctl": "crash",
            "post_condition_SMV_pt": "crash",
            "post_condition_SMV_ft": "crash",
            "post_condition_PRISM_pctl": "crash",
            "ft": "((F[<=10] crash) | (F[<10] LAST))",
            "pt": "(H ((H (! crash)) -> (O[<10] (Z FALSE))))",
            "pctl": "(P<=0.02[(F<=10 crash)])",
            "ptExpanded": "(H ((H (! crash)) -> (O[0,9] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (crash)) => OT(9, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,10] crash) | (F[0,9] LAST))",
            "pctlExpanded": "(P<=0.02[(F<=10 crash)])",
            "ftInfAUExpanded": "(F[0,10] crash)",
            "component": "System"
        },
        "status": "",
        "_id": "74584127-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R8",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "With probability 1, eventually a leader is elected.",
        "comments": "",
        "fulltext": "System shall with probability>=1 eventually satisfy leaderElected",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "leaderElected"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">=",
                "1"
            ],
            "probabilityTextRange": [
                13,
                31
            ],
            "timingTextRange": [
                33,
                42
            ],
            "post_condition": "(leaderElected)",
            "responseTextRange": [
                44,
                64
            ],
            "diagramVariables": "Response = <b><i>(leaderElected)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=1",
            "post_condition_unexp_pt": "leaderElected",
            "post_condition_unexp_ft": "leaderElected",
            "post_condition_unexp_pctl": "leaderElected",
            "post_condition_SMV_pt": "leaderElected",
            "post_condition_SMV_ft": "leaderElected",
            "post_condition_PRISM_pctl": "leaderElected",
            "ft": "((! LAST) U leaderElected)",
            "pt": "(O leaderElected)",
            "pctl": "(P>=1[(F leaderElected)])",
            "ptExpanded": "(O leaderElected)",
            "CoCoSpecCode": "O(leaderElected)",
            "ftExpanded": "((! LAST) U leaderElected)",
            "pctlExpanded": "(P>=1[(F leaderElected)])",
            "ftInfAUExpanded": "(F leaderElected)",
            "component": "System"
        },
        "status": "",
        "_id": "74584128-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R38",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "With probability at least 0.99, a data packet is delivered",
        "comments": "",
        "fulltext": "System shall with probability >= 0.99 eventually satisfy delivered ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "delivered"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">=",
                "0.99"
            ],
            "probabilityTextRange": [
                13,
                36
            ],
            "timingTextRange": [
                38,
                47
            ],
            "post_condition": "(delivered)",
            "responseTextRange": [
                49,
                65
            ],
            "diagramVariables": "Response = <b><i>(delivered)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.99",
            "post_condition_unexp_pt": "delivered",
            "post_condition_unexp_ft": "delivered",
            "post_condition_unexp_pctl": "delivered",
            "post_condition_SMV_pt": "delivered",
            "post_condition_SMV_ft": "delivered",
            "post_condition_PRISM_pctl": "delivered",
            "ft": "((! LAST) U delivered)",
            "pt": "(O delivered)",
            "pctl": "(P>=0.99[(F delivered)])",
            "ptExpanded": "(O delivered)",
            "CoCoSpecCode": "O(delivered)",
            "ftExpanded": "((! LAST) U delivered)",
            "pctlExpanded": "(P>=0.99[(F delivered)])",
            "ftInfAUExpanded": "(F delivered)",
            "component": "System"
        },
        "status": "",
        "_id": "74584129-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R24",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "maintain stability for at least 8.2 time units with probability at least 0.7",
        "comments": "",
        "fulltext": "System shall with probability >=0.7 for 8.2 ticks satisfy stable",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "for",
            "response": "satisfaction",
            "variables": [
                "stable"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">=",
                "0.7"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "duration": "8.2",
            "timingTextRange": [
                36,
                48
            ],
            "post_condition": "(stable)",
            "responseTextRange": [
                50,
                63
            ],
            "diagramVariables": " n = <b><i>8.2</i></b>, Response = <b><i>(stable)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the trigger and remain true for <b><i>8.2</i></b> time points past the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>8.2</i></b>), or to the end of the interval if the interval ends sooner than trigger+<b><i>8.2</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_for_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.7",
            "post_condition_unexp_pt": "stable",
            "post_condition_unexp_ft": "stable",
            "post_condition_unexp_pctl": "stable",
            "post_condition_SMV_pt": "stable",
            "post_condition_SMV_ft": "stable",
            "post_condition_PRISM_pctl": "stable",
            "ft": "((G[<=8.2] stable) | (LAST V stable))",
            "pt": "(H ((O[<=8.2] (Z FALSE)) -> stable))",
            "pctl": "(P>=0.7[(G<=8.2 stable)])",
            "ptExpanded": "(H ((O[<=8.2] (Z FALSE)) -> stable))",
            "CoCoSpecCode": "H((OT(8.2, LessThanOrEqual, ZtoPre(false)) => stable))",
            "ftExpanded": "((G[<=8.2] stable) | (LAST V stable))",
            "pctlExpanded": "(P>=0.7[(G<=8.2 stable)])",
            "ftInfAUExpanded": "((G[<=8.2] stable) | (G stable))",
            "component": "System"
        },
        "status": "",
        "_id": "7458412a-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R66",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "the minimum probability to reach a state in which at least one of the senders has successfully sent a message before deadline d is higher then p ",
        "comments": "",
        "fulltext": "System shall with probability >= 0.5 before deadline satisfy send ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "before",
            "response": "satisfaction",
            "variables": [
                "deadline",
                "send"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">=",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                35
            ],
            "stop_condition": "(deadline)",
            "timingTextRange": [
                37,
                51
            ],
            "post_condition": "(send)",
            "responseTextRange": [
                53,
                64
            ],
            "diagramVariables": "SC = <b><i>(deadline)</i></b>, Response = <b><i>(send)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at least once strictly before the state where the stop condition holds. If the stop condition never occurs in the interval, RES does not need to hold. If the stop condition holds at the trigger, the requirement is not satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_before_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.5",
            "post_condition_unexp_pt": "send",
            "post_condition_unexp_ft": "send",
            "post_condition_unexp_pctl": "send",
            "post_condition_SMV_pt": "send",
            "post_condition_SMV_ft": "send",
            "post_condition_PRISM_pctl": "send",
            "stop_condition_unexp_pt": "deadline",
            "stop_condition_unexp_ft": "deadline",
            "stop_condition_PRISM_pctl": "deadline",
            "stop_condition_SMV_pt": "deadline",
            "stop_condition_SMV_ft": "deadline",
            "ft": "((send | LAST) V (! deadline))",
            "pt": "(H (deadline -> (Y (O send))))",
            "pctl": "(P>=0.5[((send | LAST) R (! undefined))])",
            "ptExpanded": "(H (deadline -> (Y (O send))))",
            "CoCoSpecCode": "H((deadline => YtoPre(O(send))))",
            "ftExpanded": "((send | LAST) V (! deadline))",
            "pctlExpanded": "(P>=0.5[((send | false) R (! deadline))])",
            "ftInfAUExpanded": "(send V (! deadline))",
            "component": "System"
        },
        "status": "",
        "_id": "7458412b-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R78",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "at least 95% percent of issued checks are successfully cleared",
        "comments": "",
        "fulltext": "System shall with probability >= 0.95 always satisfy checkIssued => checkCleared",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "checkIssued",
                "checkCleared"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">=",
                "0.95"
            ],
            "probabilityTextRange": [
                13,
                36
            ],
            "timingTextRange": [
                38,
                43
            ],
            "post_condition": "(checkIssued => checkCleared)",
            "responseTextRange": [
                45,
                79
            ],
            "diagramVariables": "Response = <b><i>(checkIssued => checkCleared)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.95",
            "post_condition_unexp_pt": "(checkIssued -> checkCleared)",
            "post_condition_unexp_ft": "(checkIssued -> checkCleared)",
            "post_condition_unexp_pctl": "(checkIssued -> checkCleared)",
            "post_condition_SMV_pt": "(checkIssued -> checkCleared)",
            "post_condition_SMV_ft": "(checkIssued -> checkCleared)",
            "post_condition_PRISM_pctl": "(checkIssued -> checkCleared)",
            "ft": "(LAST V (checkIssued -> checkCleared))",
            "pt": "(H (checkIssued -> checkCleared))",
            "pctl": "(P>=0.95[(G (checkIssued -> checkCleared))])",
            "ptExpanded": "(H (checkIssued -> checkCleared))",
            "CoCoSpecCode": "H((checkIssued => checkCleared))",
            "ftExpanded": "(LAST V (checkIssued -> checkCleared))",
            "pctlExpanded": "(P>=0.95[(G (checkIssued -> checkCleared))])",
            "ftInfAUExpanded": "(G (checkIssued -> checkCleared))",
            "component": "System"
        },
        "status": "",
        "_id": "7458412c-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R99",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "from an initial state, the probability that more than 5 errors occur within the first 100 time units is less than 0.1",
        "comments": "",
        "fulltext": "whenever initialised System shall with probability < 0.1 within 100 ticks satisfy errorCount > 5",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "initialised",
                "errorCount"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(initialised)",
            "regular_condition": "(initialised)",
            "conditionTextRange": [
                0,
                19
            ],
            "component_name": "System",
            "componentTextRange": [
                21,
                26
            ],
            "probability_bound": [
                "<",
                "0.1"
            ],
            "probabilityTextRange": [
                34,
                55
            ],
            "duration": "100",
            "timingTextRange": [
                57,
                72
            ],
            "post_condition": "(errorCount > 5)",
            "responseTextRange": [
                74,
                95
            ],
            "diagramVariables": "CC = <b><i>(initialised)</i></b>,  n = <b><i>100</i></b>, Response = <b><i>(errorCount > 5)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(initialised)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>100</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>100</i></b>). If the interval ends sooner than trigger+<b><i>100</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.1",
            "regular_condition_unexp_pt": "initialised",
            "regular_condition_unexp_ft": "initialised",
            "regular_condition_unexp_pctl": "initialised",
            "regular_condition_SMV_pt": "initialised",
            "regular_condition_SMV_ft": "initialised",
            "regular_condition_PRISM_pctl": "initialised",
            "post_condition_unexp_pt": "(errorCount > 5)",
            "post_condition_unexp_ft": "(errorCount > 5)",
            "post_condition_unexp_pctl": "(errorCount > 5)",
            "post_condition_SMV_pt": "(errorCount > 5)",
            "post_condition_SMV_ft": "(errorCount > 5)",
            "post_condition_PRISM_pctl": "(errorCount > 5)",
            "ft": "(LAST V (initialised -> ((F[<=100] (errorCount > 5)) | (F[<100] LAST))))",
            "pt": "(H ((O[=100] (initialised & (! (errorCount > 5)))) -> (O[<100] ((Z FALSE) | (errorCount > 5)))))",
            "pctl": "P>=1[(G (initialised => (P<0.1[(F<=100 (errorCount > 5))])))]",
            "ptExpanded": "(H ((O[100,100] (initialised & (! (errorCount > 5)))) -> (O[0,99] ((Z FALSE) | (errorCount > 5)))))",
            "CoCoSpecCode": "H((OT(100, 100, (initialised and not ((errorCount > 5)))) => OT(99, 0, (ZtoPre(false) or (errorCount > 5)))))",
            "ftExpanded": "(LAST V (initialised -> ((F[0,100] (errorCount > 5)) | (F[0,99] LAST))))",
            "pctlExpanded": "P>=1[(G (initialised => (P<0.1[(F<=100 (errorCount > 5))])))]",
            "ftInfAUExpanded": "(G (initialised -> (F[0,100] (errorCount > 5))))",
            "component": "System"
        },
        "status": "",
        "_id": "7458412d-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R59",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "The property to recover from all  microcell are full full in 1 sec. is less then 75%",
        "comments": "",
        "fulltext": "upon allCellsFull System shall with probability <= 0.75 within 1 tick satisfy recoverAll",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "allCellsFull",
                "recoverAll"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(allCellsFull)",
            "regular_condition": "(allCellsFull)",
            "conditionTextRange": [
                0,
                16
            ],
            "component_name": "System",
            "componentTextRange": [
                18,
                23
            ],
            "probability_bound": [
                "<=",
                "0.75"
            ],
            "probabilityTextRange": [
                31,
                54
            ],
            "duration": "1",
            "timingTextRange": [
                56,
                68
            ],
            "post_condition": "(recoverAll)",
            "responseTextRange": [
                70,
                87
            ],
            "diagramVariables": "TC = <b><i>(allCellsFull)</i></b>,  n = <b><i>1</i></b>, Response = <b><i>(recoverAll)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(allCellsFull)</i></b> is true and any point in the interval where <b><i>(allCellsFull)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>1</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>1</i></b>). If the interval ends sooner than trigger+<b><i>1</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<=0.75",
            "regular_condition_unexp_pt": "allCellsFull",
            "regular_condition_unexp_ft": "allCellsFull",
            "regular_condition_unexp_pctl": "allCellsFull",
            "regular_condition_SMV_pt": "allCellsFull",
            "regular_condition_SMV_ft": "allCellsFull",
            "regular_condition_PRISM_pctl": "allCellsFull",
            "post_condition_unexp_pt": "recoverAll",
            "post_condition_unexp_ft": "recoverAll",
            "post_condition_unexp_pctl": "recoverAll",
            "post_condition_SMV_pt": "recoverAll",
            "post_condition_SMV_ft": "recoverAll",
            "post_condition_PRISM_pctl": "recoverAll",
            "ft": "((LAST V (((! allCellsFull) & ((! LAST) & (X allCellsFull))) -> (X ((F[<=1] recoverAll) | (F[<1] LAST))))) & (allCellsFull -> ((F[<=1] recoverAll) | (F[<1] LAST))))",
            "pt": "(H ((O[=1] ((allCellsFull & (Z (! allCellsFull))) & (! recoverAll))) -> (O[<1] ((Z FALSE) | recoverAll))))",
            "pctl": "P>=1[((G (((! allCellsFull) & (X allCellsFull)) => (X (P<=0.75[(F<=1 recoverAll)])))) & (allCellsFull => (P<=0.75[(F[<=1] recoverAll)])))]",
            "ptExpanded": "(H ((O[1,1] ((allCellsFull & (Z (! allCellsFull))) & (! recoverAll))) -> (O[0,0] ((Z FALSE) | recoverAll))))",
            "CoCoSpecCode": "H((OT(1, 1, ((allCellsFull and ZtoPre(not (allCellsFull))) and not (recoverAll))) => OT(0, 0, (ZtoPre(false) or recoverAll))))",
            "ftExpanded": "((LAST V (((! allCellsFull) & ((! LAST) & (X allCellsFull))) -> (X ((F[0,1] recoverAll) | (F[0,0] LAST))))) & (allCellsFull -> ((F[0,1] recoverAll) | (F[0,0] LAST))))",
            "pctlExpanded": "P>=1[((G (((! allCellsFull) & (X allCellsFull)) => (X (P<=0.75[(F<=1 recoverAll)])))) & (allCellsFull => (P<=0.75[(F[<=1] recoverAll)])))]",
            "ftInfAUExpanded": "((G (((! allCellsFull) & (X allCellsFull)) -> (X (F[0,1] recoverAll)))) & (allCellsFull -> (F[0,1] recoverAll)))",
            "component": "System"
        },
        "status": "",
        "_id": "7458412e-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R49",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "With a probability of at least 99.9% a reaction to a change in a sensor value will be issued within 200ms.",
        "comments": "",
        "fulltext": "upon sensorChange System shall with probability >= 0.999 within 200 ticks satisfy react ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "sensorChange",
                "react"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(sensorChange)",
            "regular_condition": "(sensorChange)",
            "conditionTextRange": [
                0,
                16
            ],
            "component_name": "System",
            "componentTextRange": [
                18,
                23
            ],
            "probability_bound": [
                ">=",
                "0.999"
            ],
            "probabilityTextRange": [
                31,
                55
            ],
            "duration": "200",
            "timingTextRange": [
                57,
                72
            ],
            "post_condition": "(react)",
            "responseTextRange": [
                74,
                86
            ],
            "diagramVariables": "TC = <b><i>(sensorChange)</i></b>,  n = <b><i>200</i></b>, Response = <b><i>(react)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(sensorChange)</i></b> is true and any point in the interval where <b><i>(sensorChange)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>200</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>200</i></b>). If the interval ends sooner than trigger+<b><i>200</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.999",
            "regular_condition_unexp_pt": "sensorChange",
            "regular_condition_unexp_ft": "sensorChange",
            "regular_condition_unexp_pctl": "sensorChange",
            "regular_condition_SMV_pt": "sensorChange",
            "regular_condition_SMV_ft": "sensorChange",
            "regular_condition_PRISM_pctl": "sensorChange",
            "post_condition_unexp_pt": "react",
            "post_condition_unexp_ft": "react",
            "post_condition_unexp_pctl": "react",
            "post_condition_SMV_pt": "react",
            "post_condition_SMV_ft": "react",
            "post_condition_PRISM_pctl": "react",
            "ft": "((LAST V (((! sensorChange) & ((! LAST) & (X sensorChange))) -> (X ((F[<=200] react) | (F[<200] LAST))))) & (sensorChange -> ((F[<=200] react) | (F[<200] LAST))))",
            "pt": "(H ((O[=200] ((sensorChange & (Z (! sensorChange))) & (! react))) -> (O[<200] ((Z FALSE) | react))))",
            "pctl": "P>=1[((G (((! sensorChange) & (X sensorChange)) => (X (P>=0.999[(F<=200 react)])))) & (sensorChange => (P>=0.999[(F[<=200] react)])))]",
            "ptExpanded": "(H ((O[200,200] ((sensorChange & (Z (! sensorChange))) & (! react))) -> (O[0,199] ((Z FALSE) | react))))",
            "CoCoSpecCode": "H((OT(200, 200, ((sensorChange and ZtoPre(not (sensorChange))) and not (react))) => OT(199, 0, (ZtoPre(false) or react))))",
            "ftExpanded": "((LAST V (((! sensorChange) & ((! LAST) & (X sensorChange))) -> (X ((F[0,200] react) | (F[0,199] LAST))))) & (sensorChange -> ((F[0,200] react) | (F[0,199] LAST))))",
            "pctlExpanded": "P>=1[((G (((! sensorChange) & (X sensorChange)) => (X (P>=0.999[(F<=200 react)])))) & (sensorChange => (P>=0.999[(F[<=200] react)])))]",
            "ftInfAUExpanded": "((G (((! sensorChange) & (X sensorChange)) -> (X (F[0,200] react)))) & (sensorChange -> (F[0,200] react)))",
            "component": "System"
        },
        "status": "",
        "_id": "7458412f-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R29a",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "In 99% of the cases the controller should respond to an alarm by opening a valve within 4 time units, but in all cases the controller should respond to an alarm by opening a valve within 10 time units ",
        "comments": "",
        "fulltext": "if alarm System shall with probability >=1 within 10 ticks satisfy openValve",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "alarm",
                "openValve"
            ],
            "qualifier_word": "if",
            "pre_condition": "(alarm)",
            "regular_condition": "(alarm)",
            "conditionTextRange": [
                0,
                7
            ],
            "component_name": "System",
            "componentTextRange": [
                9,
                14
            ],
            "probability_bound": [
                ">=",
                "1"
            ],
            "probabilityTextRange": [
                22,
                41
            ],
            "duration": "10",
            "timingTextRange": [
                43,
                57
            ],
            "post_condition": "(openValve)",
            "responseTextRange": [
                59,
                75
            ],
            "diagramVariables": "TC = <b><i>(alarm)</i></b>,  n = <b><i>10</i></b>, Response = <b><i>(openValve)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(alarm)</i></b> is true and any point in the interval where <b><i>(alarm)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=1",
            "regular_condition_unexp_pt": "alarm",
            "regular_condition_unexp_ft": "alarm",
            "regular_condition_unexp_pctl": "alarm",
            "regular_condition_SMV_pt": "alarm",
            "regular_condition_SMV_ft": "alarm",
            "regular_condition_PRISM_pctl": "alarm",
            "post_condition_unexp_pt": "openValve",
            "post_condition_unexp_ft": "openValve",
            "post_condition_unexp_pctl": "openValve",
            "post_condition_SMV_pt": "openValve",
            "post_condition_SMV_ft": "openValve",
            "post_condition_PRISM_pctl": "openValve",
            "ft": "((LAST V (((! alarm) & ((! LAST) & (X alarm))) -> (X ((F[<=10] openValve) | (F[<10] LAST))))) & (alarm -> ((F[<=10] openValve) | (F[<10] LAST))))",
            "pt": "(H ((O[=10] ((alarm & (Z (! alarm))) & (! openValve))) -> (O[<10] ((Z FALSE) | openValve))))",
            "pctl": "P>=1[((G (((! alarm) & (X alarm)) => (X (P>=1[(F<=10 openValve)])))) & (alarm => (P>=1[(F[<=10] openValve)])))]",
            "ptExpanded": "(H ((O[10,10] ((alarm & (Z (! alarm))) & (! openValve))) -> (O[0,9] ((Z FALSE) | openValve))))",
            "CoCoSpecCode": "H((OT(10, 10, ((alarm and ZtoPre(not (alarm))) and not (openValve))) => OT(9, 0, (ZtoPre(false) or openValve))))",
            "ftExpanded": "((LAST V (((! alarm) & ((! LAST) & (X alarm))) -> (X ((F[0,10] openValve) | (F[0,9] LAST))))) & (alarm -> ((F[0,10] openValve) | (F[0,9] LAST))))",
            "pctlExpanded": "P>=1[((G (((! alarm) & (X alarm)) => (X (P>=1[(F<=10 openValve)])))) & (alarm => (P>=1[(F[<=10] openValve)])))]",
            "ftInfAUExpanded": "((G (((! alarm) & (X alarm)) -> (X (F[0,10] openValve)))) & (alarm -> (F[0,10] openValve)))",
            "component": "System"
        },
        "status": "",
        "_id": "74584130-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R17",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "The probability to reach a red state while passing only green states  exeeds p",
        "comments": "",
        "fulltext": "System shall with probability >0.5 until red satisfy green",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "red",
                "green"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                33
            ],
            "stop_condition": "(red)",
            "timingTextRange": [
                35,
                43
            ],
            "post_condition": "(green)",
            "responseTextRange": [
                45,
                57
            ],
            "diagramVariables": "SC = <b><i>(red)</i></b>, Response = <b><i>(green)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_until_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "green",
            "post_condition_unexp_ft": "green",
            "post_condition_unexp_pctl": "green",
            "post_condition_SMV_pt": "green",
            "post_condition_SMV_ft": "green",
            "post_condition_PRISM_pctl": "green",
            "stop_condition_unexp_pt": "red",
            "stop_condition_unexp_ft": "red",
            "stop_condition_PRISM_pctl": "red",
            "stop_condition_SMV_pt": "red",
            "stop_condition_SMV_ft": "red",
            "ft": "((red V (green | red)) | (LAST V green))",
            "pt": "(H ((H (! red)) -> green))",
            "pctl": "(P>0.5[((undefined R (green | undefined)) | (LAST R green))])",
            "ptExpanded": "(H ((H (! red)) -> green))",
            "CoCoSpecCode": "H((H(not (red)) => green))",
            "ftExpanded": "((red V (green | red)) | (LAST V green))",
            "pctlExpanded": "(P>0.5[((red R (green | red)) | (false R green))])",
            "ftInfAUExpanded": "(red V (green | red))",
            "component": "System"
        },
        "status": "",
        "_id": "74584131-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R88",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "The probability that the telescope eventually crashes without ever having only one operational gyroscope left is at most 10−4",
        "comments": "",
        "fulltext": "System shall with probability <= 0.001 until crash satisfy ! onlyOneGyroscope",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "crash",
                "onlyOneGyroscope"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<=",
                "0.001"
            ],
            "probabilityTextRange": [
                13,
                37
            ],
            "stop_condition": "(crash)",
            "timingTextRange": [
                39,
                49
            ],
            "post_condition": "(! onlyOneGyroscope)",
            "responseTextRange": [
                51,
                76
            ],
            "diagramVariables": "SC = <b><i>(crash)</i></b>, Response = <b><i>(! onlyOneGyroscope)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_until_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<=0.001",
            "post_condition_unexp_pt": "(! onlyOneGyroscope)",
            "post_condition_unexp_ft": "(! onlyOneGyroscope)",
            "post_condition_unexp_pctl": "(! onlyOneGyroscope)",
            "post_condition_SMV_pt": "(! onlyOneGyroscope)",
            "post_condition_SMV_ft": "(! onlyOneGyroscope)",
            "post_condition_PRISM_pctl": "(! onlyOneGyroscope)",
            "stop_condition_unexp_pt": "crash",
            "stop_condition_unexp_ft": "crash",
            "stop_condition_PRISM_pctl": "crash",
            "stop_condition_SMV_pt": "crash",
            "stop_condition_SMV_ft": "crash",
            "ft": "((crash V ((! onlyOneGyroscope) | crash)) | (LAST V (! onlyOneGyroscope)))",
            "pt": "(H ((H (! crash)) -> (! onlyOneGyroscope)))",
            "pctl": "(P<=0.001[((undefined R ((! onlyOneGyroscope) | undefined)) | (LAST R (! onlyOneGyroscope)))])",
            "ptExpanded": "(H ((H (! crash)) -> (! onlyOneGyroscope)))",
            "CoCoSpecCode": "H((H(not (crash)) => not (onlyOneGyroscope)))",
            "ftExpanded": "((crash V ((! onlyOneGyroscope) | crash)) | (LAST V (! onlyOneGyroscope)))",
            "pctlExpanded": "(P<=0.001[((crash R ((! onlyOneGyroscope) | crash)) | (false R (! onlyOneGyroscope)))])",
            "ftInfAUExpanded": "(crash V ((! onlyOneGyroscope) | crash))",
            "component": "System"
        },
        "status": "",
        "_id": "74584132-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R105",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "\"the probability of reaching a state where A does\nnot know a pair while B does know a pair is less then t\"",
        "comments": "",
        "fulltext": "System shall with probability < 0.5 eventually satisfy  !Aknows & Bknows",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "Aknows",
                "Bknows"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "timingTextRange": [
                36,
                45
            ],
            "post_condition": "(! Aknows & Bknows)",
            "responseTextRange": [
                47,
                71
            ],
            "diagramVariables": "Response = <b><i>(! Aknows & Bknows)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.5",
            "post_condition_unexp_pt": "((! Aknows) & Bknows)",
            "post_condition_unexp_ft": "((! Aknows) & Bknows)",
            "post_condition_unexp_pctl": "((! Aknows) & Bknows)",
            "post_condition_SMV_pt": "((! Aknows) & Bknows)",
            "post_condition_SMV_ft": "((! Aknows) & Bknows)",
            "post_condition_PRISM_pctl": "((! Aknows) & Bknows)",
            "ft": "((! LAST) U ((! Aknows) & Bknows))",
            "pt": "(O ((! Aknows) & Bknows))",
            "pctl": "(P<0.5[(F ((! Aknows) & Bknows))])",
            "ptExpanded": "(O ((! Aknows) & Bknows))",
            "CoCoSpecCode": "O((not (Aknows) and Bknows))",
            "ftExpanded": "((! LAST) U ((! Aknows) & Bknows))",
            "pctlExpanded": "(P<0.5[(F ((! Aknows) & Bknows))])",
            "ftInfAUExpanded": "(F ((! Aknows) & Bknows))",
            "component": "System"
        },
        "status": "",
        "_id": "74584133-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R9",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "The probability of electing a leader within 5 steps is higher than 85%.",
        "comments": "",
        "fulltext": "System shall with probability >= 0.85 within 5 ticks satisfy leaderElected",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "leaderElected"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">=",
                "0.85"
            ],
            "probabilityTextRange": [
                13,
                36
            ],
            "duration": "5",
            "timingTextRange": [
                38,
                51
            ],
            "post_condition": "(leaderElected)",
            "responseTextRange": [
                53,
                73
            ],
            "diagramVariables": " n = <b><i>5</i></b>, Response = <b><i>(leaderElected)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>5</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>5</i></b>). If the interval ends sooner than trigger+<b><i>5</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.85",
            "post_condition_unexp_pt": "leaderElected",
            "post_condition_unexp_ft": "leaderElected",
            "post_condition_unexp_pctl": "leaderElected",
            "post_condition_SMV_pt": "leaderElected",
            "post_condition_SMV_ft": "leaderElected",
            "post_condition_PRISM_pctl": "leaderElected",
            "ft": "((F[<=5] leaderElected) | (F[<5] LAST))",
            "pt": "(H ((H (! leaderElected)) -> (O[<5] (Z FALSE))))",
            "pctl": "(P>=0.85[(F<=5 leaderElected)])",
            "ptExpanded": "(H ((H (! leaderElected)) -> (O[0,4] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (leaderElected)) => OT(4, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,5] leaderElected) | (F[0,4] LAST))",
            "pctlExpanded": "(P>=0.85[(F<=5 leaderElected)])",
            "ftInfAUExpanded": "(F[0,5] leaderElected)",
            "component": "System"
        },
        "status": "",
        "_id": "74584134-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R39",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "For all adversaries, the probability of reaching the location done within t (deadline) nanoseconds is p or greater",
        "comments": "",
        "fulltext": "System shall with probability >=0.5 within 50 ticks satisfy done",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "done"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">=",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "duration": "50",
            "timingTextRange": [
                36,
                50
            ],
            "post_condition": "(done)",
            "responseTextRange": [
                52,
                63
            ],
            "diagramVariables": " n = <b><i>50</i></b>, Response = <b><i>(done)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>50</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>50</i></b>). If the interval ends sooner than trigger+<b><i>50</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.5",
            "post_condition_unexp_pt": "done",
            "post_condition_unexp_ft": "done",
            "post_condition_unexp_pctl": "done",
            "post_condition_SMV_pt": "done",
            "post_condition_SMV_ft": "done",
            "post_condition_PRISM_pctl": "done",
            "ft": "((F[<=50] done) | (F[<50] LAST))",
            "pt": "(H ((H (! done)) -> (O[<50] (Z FALSE))))",
            "pctl": "(P>=0.5[(F<=50 done)])",
            "ptExpanded": "(H ((H (! done)) -> (O[0,49] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (done)) => OT(49, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,50] done) | (F[0,49] LAST))",
            "pctlExpanded": "(P>=0.5[(F<=50 done)])",
            "ftInfAUExpanded": "(F[0,50] done)",
            "component": "System"
        },
        "status": "",
        "_id": "74584135-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R25",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "The transient probability of state s21 at time t is at most 0.2",
        "comments": "",
        "fulltext": "System shall with probability <=0.2 after 10 ticks satisfy s21",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "after",
            "response": "satisfaction",
            "variables": [
                "s21"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<=",
                "0.2"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "duration": "10",
            "timingTextRange": [
                36,
                49
            ],
            "post_condition": "(s21)",
            "responseTextRange": [
                51,
                61
            ],
            "diagramVariables": " n = <b><i>10</i></b>, Response = <b><i>(s21)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must be false at all time points with distance <=<b><i>10</i></b> from the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>10</i></b>). Moreover, RES must hold at the point that is at distance <b><i>10</i></b>+1 from the trigger, that is, trigger+<b><i>10</i></b>+1, except if the end of the interval occurs earlier.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_after_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<=0.2",
            "post_condition_unexp_pt": "s21",
            "post_condition_unexp_ft": "s21",
            "post_condition_unexp_pctl": "s21",
            "post_condition_SMV_pt": "s21",
            "post_condition_SMV_ft": "s21",
            "post_condition_PRISM_pctl": "s21",
            "ft": "(((G[<=10] (! s21)) | (LAST V (! s21))) & ((F[<=10+1] s21) | (F[<10+1] LAST)))",
            "pt": "((H ((O[<=10] (Z FALSE)) -> (! s21))) & (H ((H (! s21)) -> (O[<10+1] (Z FALSE)))))",
            "pctl": "(P<=0.2[((G<=10 (! s21)) & (F<=(10+1) s21))])",
            "ptExpanded": "((H ((O[0,10] (Z FALSE)) -> (! s21))) & (H ((H (! s21)) -> (O[0,10] (Z FALSE)))))",
            "CoCoSpecCode": "(H((OT(10, 0, ZtoPre(false)) => not (s21))) and H((H(not (s21)) => OT(10, 0, ZtoPre(false)))))",
            "ftExpanded": "(((G[0,10] (! s21)) | (LAST V (! s21))) & ((F[0,11] s21) | (F[0,10] LAST)))",
            "pctlExpanded": "(P<=0.2[((G<=10 (! s21)) & (F<=(10+1) s21))])",
            "ftInfAUExpanded": "(((G[0,10] (! s21)) | (G (! s21))) & (F[0,11] s21))",
            "component": "System"
        },
        "status": "",
        "_id": "74584136-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R60",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "after a request for a service, there is at least 98 percent probability that the service will be carried out within 2 seconds",
        "comments": "",
        "fulltext": "if request System shall with probability >= 0.98 within 2 ticks satisfy serviceCarriedOut",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "request",
                "serviceCarriedOut"
            ],
            "qualifier_word": "if",
            "pre_condition": "(request)",
            "regular_condition": "(request)",
            "conditionTextRange": [
                0,
                9
            ],
            "component_name": "System",
            "componentTextRange": [
                11,
                16
            ],
            "probability_bound": [
                ">=",
                "0.98"
            ],
            "probabilityTextRange": [
                24,
                47
            ],
            "duration": "2",
            "timingTextRange": [
                49,
                62
            ],
            "post_condition": "(serviceCarriedOut)",
            "responseTextRange": [
                64,
                88
            ],
            "diagramVariables": "TC = <b><i>(request)</i></b>,  n = <b><i>2</i></b>, Response = <b><i>(serviceCarriedOut)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(request)</i></b> is true and any point in the interval where <b><i>(request)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>2</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>2</i></b>). If the interval ends sooner than trigger+<b><i>2</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.98",
            "regular_condition_unexp_pt": "request",
            "regular_condition_unexp_ft": "request",
            "regular_condition_unexp_pctl": "request",
            "regular_condition_SMV_pt": "request",
            "regular_condition_SMV_ft": "request",
            "regular_condition_PRISM_pctl": "request",
            "post_condition_unexp_pt": "serviceCarriedOut",
            "post_condition_unexp_ft": "serviceCarriedOut",
            "post_condition_unexp_pctl": "serviceCarriedOut",
            "post_condition_SMV_pt": "serviceCarriedOut",
            "post_condition_SMV_ft": "serviceCarriedOut",
            "post_condition_PRISM_pctl": "serviceCarriedOut",
            "ft": "((LAST V (((! request) & ((! LAST) & (X request))) -> (X ((F[<=2] serviceCarriedOut) | (F[<2] LAST))))) & (request -> ((F[<=2] serviceCarriedOut) | (F[<2] LAST))))",
            "pt": "(H ((O[=2] ((request & (Z (! request))) & (! serviceCarriedOut))) -> (O[<2] ((Z FALSE) | serviceCarriedOut))))",
            "pctl": "P>=1[((G (((! request) & (X request)) => (X (P>=0.98[(F<=2 serviceCarriedOut)])))) & (request => (P>=0.98[(F[<=2] serviceCarriedOut)])))]",
            "ptExpanded": "(H ((O[2,2] ((request & (Z (! request))) & (! serviceCarriedOut))) -> (O[0,1] ((Z FALSE) | serviceCarriedOut))))",
            "CoCoSpecCode": "H((OT(2, 2, ((request and ZtoPre(not (request))) and not (serviceCarriedOut))) => OT(1, 0, (ZtoPre(false) or serviceCarriedOut))))",
            "ftExpanded": "((LAST V (((! request) & ((! LAST) & (X request))) -> (X ((F[0,2] serviceCarriedOut) | (F[0,1] LAST))))) & (request -> ((F[0,2] serviceCarriedOut) | (F[0,1] LAST))))",
            "pctlExpanded": "P>=1[((G (((! request) & (X request)) => (X (P>=0.98[(F<=2 serviceCarriedOut)])))) & (request => (P>=0.98[(F[<=2] serviceCarriedOut)])))]",
            "ftInfAUExpanded": "((G (((! request) & (X request)) -> (X (F[0,2] serviceCarriedOut)))) & (request -> (F[0,2] serviceCarriedOut)))",
            "component": "System"
        },
        "status": "",
        "_id": "74584137-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R67",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "the probability to reach a state where at least N collisions (with 1 ≤ N ≤ α) have occurred for sender 1 before deadline d is less than p ",
        "comments": "",
        "fulltext": "System shall with probability < 0.5 before deadline satisfy sender1Collisions >= N",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "before",
            "response": "satisfaction",
            "variables": [
                "deadline",
                "sender1Collisions",
                "N"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "stop_condition": "(deadline)",
            "timingTextRange": [
                36,
                50
            ],
            "post_condition": "(sender1Collisions >= N)",
            "responseTextRange": [
                52,
                81
            ],
            "diagramVariables": "SC = <b><i>(deadline)</i></b>, Response = <b><i>(sender1Collisions >= N)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at least once strictly before the state where the stop condition holds. If the stop condition never occurs in the interval, RES does not need to hold. If the stop condition holds at the trigger, the requirement is not satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_before_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.5",
            "post_condition_unexp_pt": "(sender1Collisions >= N)",
            "post_condition_unexp_ft": "(sender1Collisions >= N)",
            "post_condition_unexp_pctl": "(sender1Collisions >= N)",
            "post_condition_SMV_pt": "(sender1Collisions >= N)",
            "post_condition_SMV_ft": "(sender1Collisions >= N)",
            "post_condition_PRISM_pctl": "(sender1Collisions >= N)",
            "stop_condition_unexp_pt": "deadline",
            "stop_condition_unexp_ft": "deadline",
            "stop_condition_PRISM_pctl": "deadline",
            "stop_condition_SMV_pt": "deadline",
            "stop_condition_SMV_ft": "deadline",
            "ft": "(((sender1Collisions >= N) | LAST) V (! deadline))",
            "pt": "(H (deadline -> (Y (O (sender1Collisions >= N)))))",
            "pctl": "(P<0.5[(((sender1Collisions >= N) | LAST) R (! undefined))])",
            "ptExpanded": "(H (deadline -> (Y (O (sender1Collisions >= N)))))",
            "CoCoSpecCode": "H((deadline => YtoPre(O((sender1Collisions >= N)))))",
            "ftExpanded": "(((sender1Collisions >= N) | LAST) V (! deadline))",
            "pctlExpanded": "(P<0.5[(((sender1Collisions >= N) | false) R (! deadline))])",
            "ftInfAUExpanded": "((sender1Collisions >= N) V (! deadline))",
            "component": "System"
        },
        "status": "",
        "_id": "74584138-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R50",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "After a request for a service, there is at least a 98 percent probability that the service will be carried out within 2 seconds",
        "comments": "",
        "fulltext": "if request System shall with probability >= 0.98 within 2 ticks satisfy serviceCarriedOut",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "request",
                "serviceCarriedOut"
            ],
            "qualifier_word": "if",
            "pre_condition": "(request)",
            "regular_condition": "(request)",
            "conditionTextRange": [
                0,
                9
            ],
            "component_name": "System",
            "componentTextRange": [
                11,
                16
            ],
            "probability_bound": [
                ">=",
                "0.98"
            ],
            "probabilityTextRange": [
                24,
                47
            ],
            "duration": "2",
            "timingTextRange": [
                49,
                62
            ],
            "post_condition": "(serviceCarriedOut)",
            "responseTextRange": [
                64,
                88
            ],
            "diagramVariables": "TC = <b><i>(request)</i></b>,  n = <b><i>2</i></b>, Response = <b><i>(serviceCarriedOut)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(request)</i></b> is true and any point in the interval where <b><i>(request)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>2</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>2</i></b>). If the interval ends sooner than trigger+<b><i>2</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.98",
            "regular_condition_unexp_pt": "request",
            "regular_condition_unexp_ft": "request",
            "regular_condition_unexp_pctl": "request",
            "regular_condition_SMV_pt": "request",
            "regular_condition_SMV_ft": "request",
            "regular_condition_PRISM_pctl": "request",
            "post_condition_unexp_pt": "serviceCarriedOut",
            "post_condition_unexp_ft": "serviceCarriedOut",
            "post_condition_unexp_pctl": "serviceCarriedOut",
            "post_condition_SMV_pt": "serviceCarriedOut",
            "post_condition_SMV_ft": "serviceCarriedOut",
            "post_condition_PRISM_pctl": "serviceCarriedOut",
            "ft": "((LAST V (((! request) & ((! LAST) & (X request))) -> (X ((F[<=2] serviceCarriedOut) | (F[<2] LAST))))) & (request -> ((F[<=2] serviceCarriedOut) | (F[<2] LAST))))",
            "pt": "(H ((O[=2] ((request & (Z (! request))) & (! serviceCarriedOut))) -> (O[<2] ((Z FALSE) | serviceCarriedOut))))",
            "pctl": "P>=1[((G (((! request) & (X request)) => (X (P>=0.98[(F<=2 serviceCarriedOut)])))) & (request => (P>=0.98[(F[<=2] serviceCarriedOut)])))]",
            "ptExpanded": "(H ((O[2,2] ((request & (Z (! request))) & (! serviceCarriedOut))) -> (O[0,1] ((Z FALSE) | serviceCarriedOut))))",
            "CoCoSpecCode": "H((OT(2, 2, ((request and ZtoPre(not (request))) and not (serviceCarriedOut))) => OT(1, 0, (ZtoPre(false) or serviceCarriedOut))))",
            "ftExpanded": "((LAST V (((! request) & ((! LAST) & (X request))) -> (X ((F[0,2] serviceCarriedOut) | (F[0,1] LAST))))) & (request -> ((F[0,2] serviceCarriedOut) | (F[0,1] LAST))))",
            "pctlExpanded": "P>=1[((G (((! request) & (X request)) => (X (P>=0.98[(F<=2 serviceCarriedOut)])))) & (request => (P>=0.98[(F[<=2] serviceCarriedOut)])))]",
            "ftInfAUExpanded": "((G (((! request) & (X request)) -> (X (F[0,2] serviceCarriedOut)))) & (request -> (F[0,2] serviceCarriedOut)))",
            "component": "System"
        },
        "status": "",
        "_id": "74584139-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R79",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "The Probability that n servers become faulty within 15.07 seconds is at most 0.01",
        "comments": "",
        "fulltext": "System shall with probability <= 0.01 within 15.07 ticks satisfy faultyServerCount = n",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "faultyServerCount",
                "n"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<=",
                "0.01"
            ],
            "probabilityTextRange": [
                13,
                36
            ],
            "duration": "15.07",
            "timingTextRange": [
                38,
                55
            ],
            "post_condition": "(faultyServerCount = n)",
            "responseTextRange": [
                57,
                85
            ],
            "diagramVariables": " n = <b><i>15.07</i></b>, Response = <b><i>(faultyServerCount = n)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>15.07</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>15.07</i></b>). If the interval ends sooner than trigger+<b><i>15.07</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<=0.01",
            "post_condition_unexp_pt": "(faultyServerCount = n)",
            "post_condition_unexp_ft": "(faultyServerCount = n)",
            "post_condition_unexp_pctl": "(faultyServerCount = n)",
            "post_condition_SMV_pt": "(faultyServerCount = n)",
            "post_condition_SMV_ft": "(faultyServerCount = n)",
            "post_condition_PRISM_pctl": "(faultyServerCount = n)",
            "ft": "((F[<=15.07] (faultyServerCount = n)) | (F[<15.07] LAST))",
            "pt": "(H ((H (! (faultyServerCount = n))) -> (O[<15.07] (Z FALSE))))",
            "pctl": "(P<=0.01[(F<=15.07 (faultyServerCount = n))])",
            "ptExpanded": "(H ((H (! (faultyServerCount = n))) -> (O[<15.07] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not ((faultyServerCount = n))) => OT(15.07, LessThan, ZtoPre(false))))",
            "ftExpanded": "((F[<=15.07] (faultyServerCount = n)) | (F[<15.07] LAST))",
            "pctlExpanded": "(P<=0.01[(F<=15.07 (faultyServerCount = n))])",
            "ftInfAUExpanded": "(F[<=15.07] (faultyServerCount = n))",
            "component": "System"
        },
        "status": "",
        "_id": "7458413a-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R18",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "With a probaility less than p the queue will leave the blocked state in less than t time units",
        "comments": "",
        "fulltext": "System shall with probability <0.5 within 10 ticks satisfy !queueBlocked ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "queueBlocked"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                33
            ],
            "duration": "10",
            "timingTextRange": [
                35,
                49
            ],
            "post_condition": "(! queueBlocked)",
            "responseTextRange": [
                51,
                71
            ],
            "diagramVariables": " n = <b><i>10</i></b>, Response = <b><i>(! queueBlocked)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.5",
            "post_condition_unexp_pt": "(! queueBlocked)",
            "post_condition_unexp_ft": "(! queueBlocked)",
            "post_condition_unexp_pctl": "(! queueBlocked)",
            "post_condition_SMV_pt": "(! queueBlocked)",
            "post_condition_SMV_ft": "(! queueBlocked)",
            "post_condition_PRISM_pctl": "(! queueBlocked)",
            "ft": "((F[<=10] (! queueBlocked)) | (F[<10] LAST))",
            "pt": "(H ((H (! (! queueBlocked))) -> (O[<10] (Z FALSE))))",
            "pctl": "(P<0.5[(F<=10 (! queueBlocked))])",
            "ptExpanded": "(H ((H queueBlocked) -> (O[0,9] (Z FALSE))))",
            "CoCoSpecCode": "H((H(queueBlocked) => OT(9, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,10] (! queueBlocked)) | (F[0,9] LAST))",
            "pctlExpanded": "(P<0.5[(F<=10 (! queueBlocked))])",
            "ftInfAUExpanded": "(F[0,10] (! queueBlocked))",
            "component": "System"
        },
        "status": "",
        "_id": "7458413b-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R89",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "With a 99% chance the system will not fail ",
        "comments": "",
        "fulltext": "System shall with probability = 0.99 never satisfy fail",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "never",
            "response": "satisfaction",
            "variables": [
                "fail"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "=",
                "0.99"
            ],
            "probabilityTextRange": [
                13,
                35
            ],
            "timingTextRange": [
                37,
                41
            ],
            "post_condition": "(fail)",
            "responseTextRange": [
                43,
                54
            ],
            "diagramVariables": "Response = <b><i>(fail)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must be false at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_never_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "=0.99",
            "post_condition_unexp_pt": "fail",
            "post_condition_unexp_ft": "fail",
            "post_condition_unexp_pctl": "fail",
            "post_condition_SMV_pt": "fail",
            "post_condition_SMV_ft": "fail",
            "post_condition_PRISM_pctl": "fail",
            "ft": "(LAST V (! fail))",
            "pt": "(H (! fail))",
            "pctl": "(P=0.99[(G (! fail))])",
            "ptExpanded": "(H (! fail))",
            "CoCoSpecCode": "H(not (fail))",
            "ftExpanded": "(LAST V (! fail))",
            "pctlExpanded": "(P=0.99[(G (! fail))])",
            "ftInfAUExpanded": "(G (! fail))",
            "component": "System"
        },
        "status": "",
        "_id": "7458413c-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R29b",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "In 99% of the cases the controller should respond to an alarm by opening a valve within 4 time units, but in all cases the controller should respond to an alarm by opening a valve within 10 time units ",
        "comments": "",
        "fulltext": "if alarm System shall with probability >=0.99 within 4 ticks satisfy openValve",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "alarm",
                "openValve"
            ],
            "qualifier_word": "if",
            "pre_condition": "(alarm)",
            "regular_condition": "(alarm)",
            "conditionTextRange": [
                0,
                7
            ],
            "component_name": "System",
            "componentTextRange": [
                9,
                14
            ],
            "probability_bound": [
                ">=",
                "0.99"
            ],
            "probabilityTextRange": [
                22,
                44
            ],
            "duration": "4",
            "timingTextRange": [
                46,
                59
            ],
            "post_condition": "(openValve)",
            "responseTextRange": [
                61,
                77
            ],
            "diagramVariables": "TC = <b><i>(alarm)</i></b>,  n = <b><i>4</i></b>, Response = <b><i>(openValve)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(alarm)</i></b> is true and any point in the interval where <b><i>(alarm)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>4</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>4</i></b>). If the interval ends sooner than trigger+<b><i>4</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.99",
            "regular_condition_unexp_pt": "alarm",
            "regular_condition_unexp_ft": "alarm",
            "regular_condition_unexp_pctl": "alarm",
            "regular_condition_SMV_pt": "alarm",
            "regular_condition_SMV_ft": "alarm",
            "regular_condition_PRISM_pctl": "alarm",
            "post_condition_unexp_pt": "openValve",
            "post_condition_unexp_ft": "openValve",
            "post_condition_unexp_pctl": "openValve",
            "post_condition_SMV_pt": "openValve",
            "post_condition_SMV_ft": "openValve",
            "post_condition_PRISM_pctl": "openValve",
            "ft": "((LAST V (((! alarm) & ((! LAST) & (X alarm))) -> (X ((F[<=4] openValve) | (F[<4] LAST))))) & (alarm -> ((F[<=4] openValve) | (F[<4] LAST))))",
            "pt": "(H ((O[=4] ((alarm & (Z (! alarm))) & (! openValve))) -> (O[<4] ((Z FALSE) | openValve))))",
            "pctl": "P>=1[((G (((! alarm) & (X alarm)) => (X (P>=0.99[(F<=4 openValve)])))) & (alarm => (P>=0.99[(F[<=4] openValve)])))]",
            "ptExpanded": "(H ((O[4,4] ((alarm & (Z (! alarm))) & (! openValve))) -> (O[0,3] ((Z FALSE) | openValve))))",
            "CoCoSpecCode": "H((OT(4, 4, ((alarm and ZtoPre(not (alarm))) and not (openValve))) => OT(3, 0, (ZtoPre(false) or openValve))))",
            "ftExpanded": "((LAST V (((! alarm) & ((! LAST) & (X alarm))) -> (X ((F[0,4] openValve) | (F[0,3] LAST))))) & (alarm -> ((F[0,4] openValve) | (F[0,3] LAST))))",
            "pctlExpanded": "P>=1[((G (((! alarm) & (X alarm)) => (X (P>=0.99[(F<=4 openValve)])))) & (alarm => (P>=0.99[(F[<=4] openValve)])))]",
            "ftInfAUExpanded": "((G (((! alarm) & (X alarm)) -> (X (F[0,4] openValve)))) & (alarm -> (F[0,4] openValve)))",
            "component": "System"
        },
        "status": "",
        "_id": "7458413d-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R106",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "from the initial state, with probability at least 0.5, all honest parties have the same prevote in round r + 1, and hence decide by round r + 1.",
        "comments": "",
        "fulltext": "System shall with probability >= 0.5eventually satisfy state_formula_for_the_property",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "state_formula_for_the_property"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">=",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                35
            ],
            "timingTextRange": [
                36,
                45
            ],
            "post_condition": "(state_formula_for_the_property)",
            "responseTextRange": [
                47,
                84
            ],
            "diagramVariables": "Response = <b><i>(state_formula_for_the_property)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.5",
            "post_condition_unexp_pt": "state_formula_for_the_property",
            "post_condition_unexp_ft": "state_formula_for_the_property",
            "post_condition_unexp_pctl": "state_formula_for_the_property",
            "post_condition_SMV_pt": "state_formula_for_the_property",
            "post_condition_SMV_ft": "state_formula_for_the_property",
            "post_condition_PRISM_pctl": "state_formula_for_the_property",
            "ft": "((! LAST) U state_formula_for_the_property)",
            "pt": "(O state_formula_for_the_property)",
            "pctl": "(P>=0.5[(F state_formula_for_the_property)])",
            "ptExpanded": "(O state_formula_for_the_property)",
            "CoCoSpecCode": "O(state_formula_for_the_property)",
            "ftExpanded": "((! LAST) U state_formula_for_the_property)",
            "pctlExpanded": "(P>=0.5[(F state_formula_for_the_property)])",
            "ftInfAUExpanded": "(F state_formula_for_the_property)",
            "component": "System"
        },
        "status": "",
        "_id": "7458413e-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R51",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "rec (receive) will appear in at least 99% of the cases within 5 time units from the submission of a send.",
        "comments": "",
        "fulltext": "if send System shall with probability >= 0.99 within 5 ticks satisfy receive",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "send",
                "receive"
            ],
            "qualifier_word": "if",
            "pre_condition": "(send)",
            "regular_condition": "(send)",
            "conditionTextRange": [
                0,
                6
            ],
            "component_name": "System",
            "componentTextRange": [
                8,
                13
            ],
            "probability_bound": [
                ">=",
                "0.99"
            ],
            "probabilityTextRange": [
                21,
                44
            ],
            "duration": "5",
            "timingTextRange": [
                46,
                59
            ],
            "post_condition": "(receive)",
            "responseTextRange": [
                61,
                75
            ],
            "diagramVariables": "TC = <b><i>(send)</i></b>,  n = <b><i>5</i></b>, Response = <b><i>(receive)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(send)</i></b> is true and any point in the interval where <b><i>(send)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>5</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>5</i></b>). If the interval ends sooner than trigger+<b><i>5</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.99",
            "regular_condition_unexp_pt": "send",
            "regular_condition_unexp_ft": "send",
            "regular_condition_unexp_pctl": "send",
            "regular_condition_SMV_pt": "send",
            "regular_condition_SMV_ft": "send",
            "regular_condition_PRISM_pctl": "send",
            "post_condition_unexp_pt": "receive",
            "post_condition_unexp_ft": "receive",
            "post_condition_unexp_pctl": "receive",
            "post_condition_SMV_pt": "receive",
            "post_condition_SMV_ft": "receive",
            "post_condition_PRISM_pctl": "receive",
            "ft": "((LAST V (((! send) & ((! LAST) & (X send))) -> (X ((F[<=5] receive) | (F[<5] LAST))))) & (send -> ((F[<=5] receive) | (F[<5] LAST))))",
            "pt": "(H ((O[=5] ((send & (Z (! send))) & (! receive))) -> (O[<5] ((Z FALSE) | receive))))",
            "pctl": "P>=1[((G (((! send) & (X send)) => (X (P>=0.99[(F<=5 receive)])))) & (send => (P>=0.99[(F[<=5] receive)])))]",
            "ptExpanded": "(H ((O[5,5] ((send & (Z (! send))) & (! receive))) -> (O[0,4] ((Z FALSE) | receive))))",
            "CoCoSpecCode": "H((OT(5, 5, ((send and ZtoPre(not (send))) and not (receive))) => OT(4, 0, (ZtoPre(false) or receive))))",
            "ftExpanded": "((LAST V (((! send) & ((! LAST) & (X send))) -> (X ((F[0,5] receive) | (F[0,4] LAST))))) & (send -> ((F[0,5] receive) | (F[0,4] LAST))))",
            "pctlExpanded": "P>=1[((G (((! send) & (X send)) => (X (P>=0.99[(F<=5 receive)])))) & (send => (P>=0.99[(F[<=5] receive)])))]",
            "ftInfAUExpanded": "((G (((! send) & (X send)) -> (X (F[0,5] receive)))) & (send -> (F[0,5] receive)))",
            "component": "System"
        },
        "status": "",
        "_id": "7458413f-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R68",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "\"The probability of electing a leader within t discrete time\nsteps is at most 0.5\"",
        "comments": "",
        "fulltext": "System shall with probability <= 0.5 within 10 ticks satisfy leaderElected",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "leaderElected"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<=",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                35
            ],
            "duration": "10",
            "timingTextRange": [
                37,
                51
            ],
            "post_condition": "(leaderElected)",
            "responseTextRange": [
                53,
                73
            ],
            "diagramVariables": " n = <b><i>10</i></b>, Response = <b><i>(leaderElected)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<=0.5",
            "post_condition_unexp_pt": "leaderElected",
            "post_condition_unexp_ft": "leaderElected",
            "post_condition_unexp_pctl": "leaderElected",
            "post_condition_SMV_pt": "leaderElected",
            "post_condition_SMV_ft": "leaderElected",
            "post_condition_PRISM_pctl": "leaderElected",
            "ft": "((F[<=10] leaderElected) | (F[<10] LAST))",
            "pt": "(H ((H (! leaderElected)) -> (O[<10] (Z FALSE))))",
            "pctl": "(P<=0.5[(F<=10 leaderElected)])",
            "ptExpanded": "(H ((H (! leaderElected)) -> (O[0,9] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (leaderElected)) => OT(9, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,10] leaderElected) | (F[0,9] LAST))",
            "pctlExpanded": "(P<=0.5[(F<=10 leaderElected)])",
            "ftInfAUExpanded": "(F[0,10] leaderElected)",
            "component": "System"
        },
        "status": "",
        "_id": "74584140-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R10",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "eventually some philosopher gets to eat within 20 steps",
        "comments": "",
        "fulltext": "System shall with probability > 0.9 within 20 ticks satisfy philosopherEats ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "philosopherEats"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.9"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "duration": "20",
            "timingTextRange": [
                36,
                50
            ],
            "post_condition": "(philosopherEats)",
            "responseTextRange": [
                52,
                74
            ],
            "diagramVariables": " n = <b><i>20</i></b>, Response = <b><i>(philosopherEats)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>20</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>20</i></b>). If the interval ends sooner than trigger+<b><i>20</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.9",
            "post_condition_unexp_pt": "philosopherEats",
            "post_condition_unexp_ft": "philosopherEats",
            "post_condition_unexp_pctl": "philosopherEats",
            "post_condition_SMV_pt": "philosopherEats",
            "post_condition_SMV_ft": "philosopherEats",
            "post_condition_PRISM_pctl": "philosopherEats",
            "ft": "((F[<=20] philosopherEats) | (F[<20] LAST))",
            "pt": "(H ((H (! philosopherEats)) -> (O[<20] (Z FALSE))))",
            "pctl": "(P>0.9[(F<=20 philosopherEats)])",
            "ptExpanded": "(H ((H (! philosopherEats)) -> (O[0,19] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (philosopherEats)) => OT(19, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,20] philosopherEats) | (F[0,19] LAST))",
            "pctlExpanded": "(P>0.9[(F<=20 philosopherEats)])",
            "ftInfAUExpanded": "(F[0,20] philosopherEats)",
            "component": "System"
        },
        "status": "",
        "_id": "74584141-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R40",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "\"There exists an adversary such that the probability of reaching the location deadline_exceeded is\np or greater\"",
        "comments": "",
        "fulltext": "System shall with probability >=0.5 eventually satisfy deadline_exceeded",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "deadline_exceeded"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">=",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "timingTextRange": [
                36,
                45
            ],
            "post_condition": "(deadline_exceeded)",
            "responseTextRange": [
                47,
                71
            ],
            "diagramVariables": "Response = <b><i>(deadline_exceeded)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.5",
            "post_condition_unexp_pt": "deadline_exceeded",
            "post_condition_unexp_ft": "deadline_exceeded",
            "post_condition_unexp_pctl": "deadline_exceeded",
            "post_condition_SMV_pt": "deadline_exceeded",
            "post_condition_SMV_ft": "deadline_exceeded",
            "post_condition_PRISM_pctl": "deadline_exceeded",
            "ft": "((! LAST) U deadline_exceeded)",
            "pt": "(O deadline_exceeded)",
            "pctl": "(P>=0.5[(F deadline_exceeded)])",
            "ptExpanded": "(O deadline_exceeded)",
            "CoCoSpecCode": "O(deadline_exceeded)",
            "ftExpanded": "((! LAST) U deadline_exceeded)",
            "pctlExpanded": "(P>=0.5[(F deadline_exceeded)])",
            "ftInfAUExpanded": "(F deadline_exceeded)",
            "component": "System"
        },
        "status": "",
        "_id": "74584142-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R26",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "\"The probability to have at least two processors\nrunning at time t exceeds 0.99\"",
        "comments": "",
        "fulltext": "System shall with probability > 0.99 after 10 ticks satisfy processorsrunning>=2 ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "after",
            "response": "satisfaction",
            "variables": [
                "processorsrunning"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.99"
            ],
            "probabilityTextRange": [
                13,
                35
            ],
            "duration": "10",
            "timingTextRange": [
                37,
                50
            ],
            "post_condition": "(processorsrunning >= 2)",
            "responseTextRange": [
                52,
                79
            ],
            "diagramVariables": " n = <b><i>10</i></b>, Response = <b><i>(processorsrunning >= 2)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must be false at all time points with distance <=<b><i>10</i></b> from the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>10</i></b>). Moreover, RES must hold at the point that is at distance <b><i>10</i></b>+1 from the trigger, that is, trigger+<b><i>10</i></b>+1, except if the end of the interval occurs earlier.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_after_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.99",
            "post_condition_unexp_pt": "(processorsrunning >= 2)",
            "post_condition_unexp_ft": "(processorsrunning >= 2)",
            "post_condition_unexp_pctl": "(processorsrunning >= 2)",
            "post_condition_SMV_pt": "(processorsrunning >= 2)",
            "post_condition_SMV_ft": "(processorsrunning >= 2)",
            "post_condition_PRISM_pctl": "(processorsrunning >= 2)",
            "ft": "(((G[<=10] (! (processorsrunning >= 2))) | (LAST V (! (processorsrunning >= 2)))) & ((F[<=10+1] (processorsrunning >= 2)) | (F[<10+1] LAST)))",
            "pt": "((H ((O[<=10] (Z FALSE)) -> (! (processorsrunning >= 2)))) & (H ((H (! (processorsrunning >= 2))) -> (O[<10+1] (Z FALSE)))))",
            "pctl": "(P>0.99[((G<=10 (! (processorsrunning >= 2))) & (F<=(10+1) (processorsrunning >= 2)))])",
            "ptExpanded": "((H ((O[0,10] (Z FALSE)) -> (! (processorsrunning >= 2)))) & (H ((H (! (processorsrunning >= 2))) -> (O[0,10] (Z FALSE)))))",
            "CoCoSpecCode": "(H((OT(10, 0, ZtoPre(false)) => not ((processorsrunning >= 2)))) and H((H(not ((processorsrunning >= 2))) => OT(10, 0, ZtoPre(false)))))",
            "ftExpanded": "(((G[0,10] (! (processorsrunning >= 2))) | (LAST V (! (processorsrunning >= 2)))) & ((F[0,11] (processorsrunning >= 2)) | (F[0,10] LAST)))",
            "pctlExpanded": "(P>0.99[((G<=10 (! (processorsrunning >= 2))) & (F<=(10+1) (processorsrunning >= 2)))])",
            "ftInfAUExpanded": "(((G[0,10] (! (processorsrunning >= 2))) | (G (! (processorsrunning >= 2)))) & (F[0,11] (processorsrunning >= 2)))",
            "component": "System"
        },
        "status": "",
        "_id": "74584143-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R61",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "\"the probability that process 1\nterminates before process 2 completes is greate then t\"",
        "comments": "",
        "fulltext": "System shall with probability > 0.5 until p1complete satisfy !p2complete ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "p1complete",
                "p2complete"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "stop_condition": "(p1complete)",
            "timingTextRange": [
                36,
                51
            ],
            "post_condition": "(! p2complete)",
            "responseTextRange": [
                53,
                71
            ],
            "diagramVariables": "SC = <b><i>(p1complete)</i></b>, Response = <b><i>(! p2complete)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_until_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "(! p2complete)",
            "post_condition_unexp_ft": "(! p2complete)",
            "post_condition_unexp_pctl": "(! p2complete)",
            "post_condition_SMV_pt": "(! p2complete)",
            "post_condition_SMV_ft": "(! p2complete)",
            "post_condition_PRISM_pctl": "(! p2complete)",
            "stop_condition_unexp_pt": "p1complete",
            "stop_condition_unexp_ft": "p1complete",
            "stop_condition_PRISM_pctl": "p1complete",
            "stop_condition_SMV_pt": "p1complete",
            "stop_condition_SMV_ft": "p1complete",
            "ft": "((p1complete V ((! p2complete) | p1complete)) | (LAST V (! p2complete)))",
            "pt": "(H ((H (! p1complete)) -> (! p2complete)))",
            "pctl": "(P>0.5[((undefined R ((! p2complete) | undefined)) | (LAST R (! p2complete)))])",
            "ptExpanded": "(H ((H (! p1complete)) -> (! p2complete)))",
            "CoCoSpecCode": "H((H(not (p1complete)) => not (p2complete)))",
            "ftExpanded": "((p1complete V ((! p2complete) | p1complete)) | (LAST V (! p2complete)))",
            "pctlExpanded": "(P>0.5[((p1complete R ((! p2complete) | p1complete)) | (false R (! p2complete)))])",
            "ftInfAUExpanded": "(p1complete V ((! p2complete) | p1complete))",
            "component": "System"
        },
        "status": "",
        "_id": "74584144-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R19",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "The probability that any individual dies",
        "comments": "",
        "fulltext": "System shall with probability <= 0.000001  until deadd satisfy (!(deadc1) & !(deadc2))",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "deadd",
                "deadc1",
                "deadc2"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<=",
                "0.000001"
            ],
            "probabilityTextRange": [
                13,
                40
            ],
            "stop_condition": "(deadd)",
            "timingTextRange": [
                43,
                53
            ],
            "post_condition": "(( ! ( deadc1 ) & ! ( deadc2 ) ))",
            "responseTextRange": [
                55,
                85
            ],
            "diagramVariables": "SC = <b><i>(deadd)</i></b>, Response = <b><i>(( ! ( deadc1 ) & ! ( deadc2 ) ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_until_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<=0.000001",
            "post_condition_unexp_pt": "((! deadc1) & (! deadc2))",
            "post_condition_unexp_ft": "((! deadc1) & (! deadc2))",
            "post_condition_unexp_pctl": "((! deadc1) & (! deadc2))",
            "post_condition_SMV_pt": "((! deadc1) & (! deadc2))",
            "post_condition_SMV_ft": "((! deadc1) & (! deadc2))",
            "post_condition_PRISM_pctl": "((! deadc1) & (! deadc2))",
            "stop_condition_unexp_pt": "deadd",
            "stop_condition_unexp_ft": "deadd",
            "stop_condition_PRISM_pctl": "deadd",
            "stop_condition_SMV_pt": "deadd",
            "stop_condition_SMV_ft": "deadd",
            "ft": "((deadd V (((! deadc1) & (! deadc2)) | deadd)) | (LAST V ((! deadc1) & (! deadc2))))",
            "pt": "(H ((H (! deadd)) -> ((! deadc1) & (! deadc2))))",
            "pctl": "(P<=0.000001[((undefined R (((! deadc1) & (! deadc2)) | undefined)) | (LAST R ((! deadc1) & (! deadc2))))])",
            "ptExpanded": "(H ((H (! deadd)) -> ((! deadc1) & (! deadc2))))",
            "CoCoSpecCode": "H((H(not (deadd)) => (not (deadc1) and not (deadc2))))",
            "ftExpanded": "((deadd V (((! deadc1) & (! deadc2)) | deadd)) | (LAST V ((! deadc1) & (! deadc2))))",
            "pctlExpanded": "(P<=0.000001[((deadd R (((! deadc1) & (! deadc2)) | deadd)) | (false R ((! deadc1) & (! deadc2))))])",
            "ftInfAUExpanded": "(deadd V (((! deadc1) & (! deadc2)) | deadd))",
            "component": "System"
        },
        "status": "",
        "_id": "74584145-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R100",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "if the system is having critically high temperature then it will reach a safe state (temperature x1 < thigh) in less than τ0 time units with a probability greater than p0.",
        "comments": "",
        "fulltext": "if criticallyHigh System shall with probability > 0.5 within 5 ticks satisfy safeState",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "criticallyHigh",
                "safeState"
            ],
            "qualifier_word": "if",
            "pre_condition": "(criticallyHigh)",
            "regular_condition": "(criticallyHigh)",
            "conditionTextRange": [
                0,
                16
            ],
            "component_name": "System",
            "componentTextRange": [
                18,
                23
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                31,
                52
            ],
            "duration": "5",
            "timingTextRange": [
                54,
                67
            ],
            "post_condition": "(safeState)",
            "responseTextRange": [
                69,
                85
            ],
            "diagramVariables": "TC = <b><i>(criticallyHigh)</i></b>,  n = <b><i>5</i></b>, Response = <b><i>(safeState)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(criticallyHigh)</i></b> is true and any point in the interval where <b><i>(criticallyHigh)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>5</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>5</i></b>). If the interval ends sooner than trigger+<b><i>5</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "regular_condition_unexp_pt": "criticallyHigh",
            "regular_condition_unexp_ft": "criticallyHigh",
            "regular_condition_unexp_pctl": "criticallyHigh",
            "regular_condition_SMV_pt": "criticallyHigh",
            "regular_condition_SMV_ft": "criticallyHigh",
            "regular_condition_PRISM_pctl": "criticallyHigh",
            "post_condition_unexp_pt": "safeState",
            "post_condition_unexp_ft": "safeState",
            "post_condition_unexp_pctl": "safeState",
            "post_condition_SMV_pt": "safeState",
            "post_condition_SMV_ft": "safeState",
            "post_condition_PRISM_pctl": "safeState",
            "ft": "((LAST V (((! criticallyHigh) & ((! LAST) & (X criticallyHigh))) -> (X ((F[<=5] safeState) | (F[<5] LAST))))) & (criticallyHigh -> ((F[<=5] safeState) | (F[<5] LAST))))",
            "pt": "(H ((O[=5] ((criticallyHigh & (Z (! criticallyHigh))) & (! safeState))) -> (O[<5] ((Z FALSE) | safeState))))",
            "pctl": "P>=1[((G (((! criticallyHigh) & (X criticallyHigh)) => (X (P>0.5[(F<=5 safeState)])))) & (criticallyHigh => (P>0.5[(F[<=5] safeState)])))]",
            "ptExpanded": "(H ((O[5,5] ((criticallyHigh & (Z (! criticallyHigh))) & (! safeState))) -> (O[0,4] ((Z FALSE) | safeState))))",
            "CoCoSpecCode": "H((OT(5, 5, ((criticallyHigh and ZtoPre(not (criticallyHigh))) and not (safeState))) => OT(4, 0, (ZtoPre(false) or safeState))))",
            "ftExpanded": "((LAST V (((! criticallyHigh) & ((! LAST) & (X criticallyHigh))) -> (X ((F[0,5] safeState) | (F[0,4] LAST))))) & (criticallyHigh -> ((F[0,5] safeState) | (F[0,4] LAST))))",
            "pctlExpanded": "P>=1[((G (((! criticallyHigh) & (X criticallyHigh)) => (X (P>0.5[(F<=5 safeState)])))) & (criticallyHigh => (P>0.5[(F[<=5] safeState)])))]",
            "ftInfAUExpanded": "((G (((! criticallyHigh) & (X criticallyHigh)) -> (X (F[0,5] safeState)))) & (criticallyHigh -> (F[0,5] safeState)))",
            "component": "System"
        },
        "status": "",
        "_id": "74584146-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R108",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "highest probability of reducing the range of PINs to some particular size is less than p",
        "comments": "",
        "fulltext": "System shall with probability < 0.5 eventually satisfy PIN_possibilities < k",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "PIN_possibilities",
                "k"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "timingTextRange": [
                36,
                45
            ],
            "post_condition": "(PIN_possibilities < k)",
            "responseTextRange": [
                47,
                75
            ],
            "diagramVariables": "Response = <b><i>(PIN_possibilities < k)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.5",
            "post_condition_unexp_pt": "(PIN_possibilities < k)",
            "post_condition_unexp_ft": "(PIN_possibilities < k)",
            "post_condition_unexp_pctl": "(PIN_possibilities < k)",
            "post_condition_SMV_pt": "(PIN_possibilities < k)",
            "post_condition_SMV_ft": "(PIN_possibilities < k)",
            "post_condition_PRISM_pctl": "(PIN_possibilities < k)",
            "ft": "((! LAST) U (PIN_possibilities < k))",
            "pt": "(O (PIN_possibilities < k))",
            "pctl": "(P<0.5[(F (PIN_possibilities < k))])",
            "ptExpanded": "(O (PIN_possibilities < k))",
            "CoCoSpecCode": "O((PIN_possibilities < k))",
            "ftExpanded": "((! LAST) U (PIN_possibilities < k))",
            "pctlExpanded": "(P<0.5[(F (PIN_possibilities < k))])",
            "ftInfAUExpanded": "(F (PIN_possibilities < k))",
            "component": "System"
        },
        "status": "",
        "_id": "74584147-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R90",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "The water alarm should be raised with a probability higher than 10-4 when the water level exceeds the 'Overflow' limit",
        "comments": "",
        "fulltext": "upon level > overflow System shall with probability > 0.001 immediately satisfy alarm",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "level",
                "overflow",
                "alarm"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(level > overflow)",
            "regular_condition": "(level > overflow)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "System",
            "componentTextRange": [
                22,
                27
            ],
            "probability_bound": [
                ">",
                "0.001"
            ],
            "probabilityTextRange": [
                35,
                58
            ],
            "timingTextRange": [
                60,
                70
            ],
            "post_condition": "(alarm)",
            "responseTextRange": [
                72,
                84
            ],
            "diagramVariables": "TC = <b><i>(level > overflow)</i></b>, Response = <b><i>(alarm)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(level > overflow)</i></b> is true and any point in the interval where <b><i>(level > overflow)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.001",
            "regular_condition_unexp_pt": "(level > overflow)",
            "regular_condition_unexp_ft": "(level > overflow)",
            "regular_condition_unexp_pctl": "(level > overflow)",
            "regular_condition_SMV_pt": "(level > overflow)",
            "regular_condition_SMV_ft": "(level > overflow)",
            "regular_condition_PRISM_pctl": "(level > overflow)",
            "post_condition_unexp_pt": "alarm",
            "post_condition_unexp_ft": "alarm",
            "post_condition_unexp_pctl": "alarm",
            "post_condition_SMV_pt": "alarm",
            "post_condition_SMV_ft": "alarm",
            "post_condition_PRISM_pctl": "alarm",
            "ft": "((LAST V (((! (level > overflow)) & ((! LAST) & (X (level > overflow)))) -> (X alarm))) & ((level > overflow) -> alarm))",
            "pt": "(H (((level > overflow) & (Z (! (level > overflow)))) -> alarm))",
            "pctl": "P>=1[((G (((! (level > overflow)) & (X (level > overflow))) => (X (P>0.001[alarm])))) & ((level > overflow) => (P>0.001[alarm])))]",
            "ptExpanded": "(H (((level > overflow) & (Z (! (level > overflow)))) -> alarm))",
            "CoCoSpecCode": "H((((level > overflow) and ZtoPre(not ((level > overflow)))) => alarm))",
            "ftExpanded": "((LAST V (((! (level > overflow)) & ((! LAST) & (X (level > overflow)))) -> (X alarm))) & ((level > overflow) -> alarm))",
            "pctlExpanded": "P>=1[((G (((! (level > overflow)) & (X (level > overflow))) => (X (P>0.001[alarm])))) & ((level > overflow) => (P>0.001[alarm])))]",
            "ftInfAUExpanded": "((G (((! (level > overflow)) & (X (level > overflow))) -> (X alarm))) & ((level > overflow) -> alarm))",
            "component": "System"
        },
        "status": "",
        "_id": "74584148-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R30",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "the transient probability of having a saturated buffer (buffer = max capacity) after one day",
        "comments": "",
        "fulltext": "System shall with probability > 0.5 within 1 tick satisfy buffer = max_capacity",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "buffer",
                "max_capacity"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "duration": "1",
            "timingTextRange": [
                36,
                48
            ],
            "post_condition": "(buffer = max_capacity)",
            "responseTextRange": [
                50,
                78
            ],
            "diagramVariables": " n = <b><i>1</i></b>, Response = <b><i>(buffer = max_capacity)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>1</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>1</i></b>). If the interval ends sooner than trigger+<b><i>1</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "(buffer = max_capacity)",
            "post_condition_unexp_ft": "(buffer = max_capacity)",
            "post_condition_unexp_pctl": "(buffer = max_capacity)",
            "post_condition_SMV_pt": "(buffer = max_capacity)",
            "post_condition_SMV_ft": "(buffer = max_capacity)",
            "post_condition_PRISM_pctl": "(buffer = max_capacity)",
            "ft": "((F[<=1] (buffer = max_capacity)) | (F[<1] LAST))",
            "pt": "(H ((H (! (buffer = max_capacity))) -> (O[<1] (Z FALSE))))",
            "pctl": "(P>0.5[(F<=1 (buffer = max_capacity))])",
            "ptExpanded": "(H ((H (! (buffer = max_capacity))) -> (O[0,0] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not ((buffer = max_capacity))) => OT(0, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,1] (buffer = max_capacity)) | (F[0,0] LAST))",
            "pctlExpanded": "(P>0.5[(F<=1 (buffer = max_capacity))])",
            "ftInfAUExpanded": "(F[0,1] (buffer = max_capacity))",
            "component": "System"
        },
        "status": "",
        "_id": "74584149-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R80",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "The probability is less than 10% that the QoS is not minimal",
        "comments": "",
        "fulltext": "System shall with probability < 0.1 eventually satisfy !QoSMinimal ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "QoSMinimal"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<",
                "0.1"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "timingTextRange": [
                36,
                45
            ],
            "post_condition": "(! QoSMinimal)",
            "responseTextRange": [
                47,
                65
            ],
            "diagramVariables": "Response = <b><i>(! QoSMinimal)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.1",
            "post_condition_unexp_pt": "(! QoSMinimal)",
            "post_condition_unexp_ft": "(! QoSMinimal)",
            "post_condition_unexp_pctl": "(! QoSMinimal)",
            "post_condition_SMV_pt": "(! QoSMinimal)",
            "post_condition_SMV_ft": "(! QoSMinimal)",
            "post_condition_PRISM_pctl": "(! QoSMinimal)",
            "ft": "((! LAST) U (! QoSMinimal))",
            "pt": "(O (! QoSMinimal))",
            "pctl": "(P<0.1[(F (! QoSMinimal))])",
            "ptExpanded": "(O (! QoSMinimal))",
            "CoCoSpecCode": "O(not (QoSMinimal))",
            "ftExpanded": "((! LAST) U (! QoSMinimal))",
            "pctlExpanded": "(P<0.1[(F (! QoSMinimal))])",
            "ftInfAUExpanded": "(F (! QoSMinimal))",
            "component": "System"
        },
        "status": "",
        "_id": "7458414a-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R1a",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "With a probability of 1 we will eventually reach a population size of 50, while maintaining a minimum of probability of 0.9 of eventually reaching a population of size 70 within 100 steps.",
        "comments": "",
        "fulltext": "System shall with probability >=1 eventually satisfy n=50 ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "n"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">=",
                "1"
            ],
            "probabilityTextRange": [
                13,
                32
            ],
            "timingTextRange": [
                34,
                43
            ],
            "post_condition": "(n = 50)",
            "responseTextRange": [
                45,
                56
            ],
            "diagramVariables": "Response = <b><i>(n = 50)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=1",
            "post_condition_unexp_pt": "(n = 50)",
            "post_condition_unexp_ft": "(n = 50)",
            "post_condition_unexp_pctl": "(n = 50)",
            "post_condition_SMV_pt": "(n = 50)",
            "post_condition_SMV_ft": "(n = 50)",
            "post_condition_PRISM_pctl": "(n = 50)",
            "ft": "((! LAST) U (n = 50))",
            "pt": "(O (n = 50))",
            "pctl": "(P>=1[(F (n = 50))])",
            "ptExpanded": "(O (n = 50))",
            "CoCoSpecCode": "O((n = 50))",
            "ftExpanded": "((! LAST) U (n = 50))",
            "pctlExpanded": "(P>=1[(F (n = 50))])",
            "ftInfAUExpanded": "(F (n = 50))",
            "component": "System"
        },
        "status": "",
        "_id": "7458414b-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R69",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "\"the probability for the system to lose a message\nbefore 100s is lower than 0.01\"",
        "comments": "",
        "fulltext": "System shall with probability < 0.01 before t = 100 satisfy messageLost",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "before",
            "response": "satisfaction",
            "variables": [
                "t",
                "messageLost"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<",
                "0.01"
            ],
            "probabilityTextRange": [
                13,
                35
            ],
            "stop_condition": "(t = 100)",
            "timingTextRange": [
                37,
                50
            ],
            "post_condition": "(messageLost)",
            "responseTextRange": [
                52,
                70
            ],
            "diagramVariables": "SC = <b><i>(t = 100)</i></b>, Response = <b><i>(messageLost)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at least once strictly before the state where the stop condition holds. If the stop condition never occurs in the interval, RES does not need to hold. If the stop condition holds at the trigger, the requirement is not satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_before_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.01",
            "post_condition_unexp_pt": "messageLost",
            "post_condition_unexp_ft": "messageLost",
            "post_condition_unexp_pctl": "messageLost",
            "post_condition_SMV_pt": "messageLost",
            "post_condition_SMV_ft": "messageLost",
            "post_condition_PRISM_pctl": "messageLost",
            "stop_condition_unexp_pt": "(t = 100)",
            "stop_condition_unexp_ft": "(t = 100)",
            "stop_condition_PRISM_pctl": "(t = 100)",
            "stop_condition_SMV_pt": "(t = 100)",
            "stop_condition_SMV_ft": "(t = 100)",
            "ft": "((messageLost | LAST) V (! (t = 100)))",
            "pt": "(H ((t = 100) -> (Y (O messageLost))))",
            "pctl": "(P<0.01[((messageLost | LAST) R (! undefined))])",
            "ptExpanded": "(H ((t = 100) -> (Y (O messageLost))))",
            "CoCoSpecCode": "H(((t = 100) => YtoPre(O(messageLost))))",
            "ftExpanded": "((messageLost | LAST) V (! (t = 100)))",
            "pctlExpanded": "(P<0.01[((messageLost | false) R (! (t = 100)))])",
            "ftInfAUExpanded": "(messageLost V (! (t = 100)))",
            "component": "System"
        },
        "status": "",
        "_id": "7458414c-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R52",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "Once station 1 has become busy, with probability higher than   p it will be polled within t time units.",
        "comments": "",
        "fulltext": "Upon station1Busy System shall with probability > 0.5 within 20 ticks satisfy station1Polled",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "station1Busy",
                "station1Polled"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(station1Busy)",
            "regular_condition": "(station1Busy)",
            "conditionTextRange": [
                0,
                16
            ],
            "component_name": "System",
            "componentTextRange": [
                18,
                23
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                31,
                52
            ],
            "duration": "20",
            "timingTextRange": [
                54,
                68
            ],
            "post_condition": "(station1Polled)",
            "responseTextRange": [
                70,
                91
            ],
            "diagramVariables": "TC = <b><i>(station1Busy)</i></b>,  n = <b><i>20</i></b>, Response = <b><i>(station1Polled)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(station1Busy)</i></b> is true and any point in the interval where <b><i>(station1Busy)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>20</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>20</i></b>). If the interval ends sooner than trigger+<b><i>20</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "regular_condition_unexp_pt": "station1Busy",
            "regular_condition_unexp_ft": "station1Busy",
            "regular_condition_unexp_pctl": "station1Busy",
            "regular_condition_SMV_pt": "station1Busy",
            "regular_condition_SMV_ft": "station1Busy",
            "regular_condition_PRISM_pctl": "station1Busy",
            "post_condition_unexp_pt": "station1Polled",
            "post_condition_unexp_ft": "station1Polled",
            "post_condition_unexp_pctl": "station1Polled",
            "post_condition_SMV_pt": "station1Polled",
            "post_condition_SMV_ft": "station1Polled",
            "post_condition_PRISM_pctl": "station1Polled",
            "ft": "((LAST V (((! station1Busy) & ((! LAST) & (X station1Busy))) -> (X ((F[<=20] station1Polled) | (F[<20] LAST))))) & (station1Busy -> ((F[<=20] station1Polled) | (F[<20] LAST))))",
            "pt": "(H ((O[=20] ((station1Busy & (Z (! station1Busy))) & (! station1Polled))) -> (O[<20] ((Z FALSE) | station1Polled))))",
            "pctl": "P>=1[((G (((! station1Busy) & (X station1Busy)) => (X (P>0.5[(F<=20 station1Polled)])))) & (station1Busy => (P>0.5[(F[<=20] station1Polled)])))]",
            "ptExpanded": "(H ((O[20,20] ((station1Busy & (Z (! station1Busy))) & (! station1Polled))) -> (O[0,19] ((Z FALSE) | station1Polled))))",
            "CoCoSpecCode": "H((OT(20, 20, ((station1Busy and ZtoPre(not (station1Busy))) and not (station1Polled))) => OT(19, 0, (ZtoPre(false) or station1Polled))))",
            "ftExpanded": "((LAST V (((! station1Busy) & ((! LAST) & (X station1Busy))) -> (X ((F[0,20] station1Polled) | (F[0,19] LAST))))) & (station1Busy -> ((F[0,20] station1Polled) | (F[0,19] LAST))))",
            "pctlExpanded": "P>=1[((G (((! station1Busy) & (X station1Busy)) => (X (P>0.5[(F<=20 station1Polled)])))) & (station1Busy => (P>0.5[(F[<=20] station1Polled)])))]",
            "ftInfAUExpanded": "((G (((! station1Busy) & (X station1Busy)) -> (X (F[0,20] station1Polled)))) & (station1Busy -> (F[0,20] station1Polled)))",
            "component": "System"
        },
        "status": "",
        "_id": "7458414d-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R41",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "the probability of the system eventually completing its execution successfully is at least 0.98",
        "comments": "",
        "fulltext": "System shall with probability >= 0.98 eventually satisfy complete",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "complete"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">=",
                "0.98"
            ],
            "probabilityTextRange": [
                13,
                36
            ],
            "timingTextRange": [
                38,
                47
            ],
            "post_condition": "(complete)",
            "responseTextRange": [
                49,
                64
            ],
            "diagramVariables": "Response = <b><i>(complete)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.98",
            "post_condition_unexp_pt": "complete",
            "post_condition_unexp_ft": "complete",
            "post_condition_unexp_pctl": "complete",
            "post_condition_SMV_pt": "complete",
            "post_condition_SMV_ft": "complete",
            "post_condition_PRISM_pctl": "complete",
            "ft": "((! LAST) U complete)",
            "pt": "(O complete)",
            "pctl": "(P>=0.98[(F complete)])",
            "ptExpanded": "(O complete)",
            "CoCoSpecCode": "O(complete)",
            "ftExpanded": "((! LAST) U complete)",
            "pctlExpanded": "(P>=0.98[(F complete)])",
            "ftInfAUExpanded": "(F complete)",
            "component": "System"
        },
        "status": "",
        "_id": "7458414e-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R101",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "with a probability of 66% the emergency signal is detected in less than 20 time steps\"",
        "comments": "",
        "fulltext": "upon emergencySignal System shall with probability =0.66 within 20 ticks satisfy emergencyDetected",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "emergencySignal",
                "emergencyDetected"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(emergencySignal)",
            "regular_condition": "(emergencySignal)",
            "conditionTextRange": [
                0,
                19
            ],
            "component_name": "System",
            "componentTextRange": [
                21,
                26
            ],
            "probability_bound": [
                "=",
                "0.66"
            ],
            "probabilityTextRange": [
                34,
                55
            ],
            "duration": "20",
            "timingTextRange": [
                57,
                71
            ],
            "post_condition": "(emergencyDetected)",
            "responseTextRange": [
                73,
                97
            ],
            "diagramVariables": "TC = <b><i>(emergencySignal)</i></b>,  n = <b><i>20</i></b>, Response = <b><i>(emergencyDetected)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(emergencySignal)</i></b> is true and any point in the interval where <b><i>(emergencySignal)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>20</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>20</i></b>). If the interval ends sooner than trigger+<b><i>20</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "=0.66",
            "regular_condition_unexp_pt": "emergencySignal",
            "regular_condition_unexp_ft": "emergencySignal",
            "regular_condition_unexp_pctl": "emergencySignal",
            "regular_condition_SMV_pt": "emergencySignal",
            "regular_condition_SMV_ft": "emergencySignal",
            "regular_condition_PRISM_pctl": "emergencySignal",
            "post_condition_unexp_pt": "emergencyDetected",
            "post_condition_unexp_ft": "emergencyDetected",
            "post_condition_unexp_pctl": "emergencyDetected",
            "post_condition_SMV_pt": "emergencyDetected",
            "post_condition_SMV_ft": "emergencyDetected",
            "post_condition_PRISM_pctl": "emergencyDetected",
            "ft": "((LAST V (((! emergencySignal) & ((! LAST) & (X emergencySignal))) -> (X ((F[<=20] emergencyDetected) | (F[<20] LAST))))) & (emergencySignal -> ((F[<=20] emergencyDetected) | (F[<20] LAST))))",
            "pt": "(H ((O[=20] ((emergencySignal & (Z (! emergencySignal))) & (! emergencyDetected))) -> (O[<20] ((Z FALSE) | emergencyDetected))))",
            "pctl": "P>=1[((G (((! emergencySignal) & (X emergencySignal)) => (X (P=0.66[(F<=20 emergencyDetected)])))) & (emergencySignal => (P=0.66[(F[<=20] emergencyDetected)])))]",
            "ptExpanded": "(H ((O[20,20] ((emergencySignal & (Z (! emergencySignal))) & (! emergencyDetected))) -> (O[0,19] ((Z FALSE) | emergencyDetected))))",
            "CoCoSpecCode": "H((OT(20, 20, ((emergencySignal and ZtoPre(not (emergencySignal))) and not (emergencyDetected))) => OT(19, 0, (ZtoPre(false) or emergencyDetected))))",
            "ftExpanded": "((LAST V (((! emergencySignal) & ((! LAST) & (X emergencySignal))) -> (X ((F[0,20] emergencyDetected) | (F[0,19] LAST))))) & (emergencySignal -> ((F[0,20] emergencyDetected) | (F[0,19] LAST))))",
            "pctlExpanded": "P>=1[((G (((! emergencySignal) & (X emergencySignal)) => (X (P=0.66[(F<=20 emergencyDetected)])))) & (emergencySignal => (P=0.66[(F[<=20] emergencyDetected)])))]",
            "ftInfAUExpanded": "((G (((! emergencySignal) & (X emergencySignal)) -> (X (F[0,20] emergencyDetected)))) & (emergencySignal -> (F[0,20] emergencyDetected)))",
            "component": "System"
        },
        "status": "",
        "_id": "7458414f-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R11",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "The probability that we reach a quarter of the maximum population, within m/2 steps, is at least 0.9.",
        "comments": "",
        "fulltext": "System shall with probability>=0.9 within 10 ticks satisfy pop=(popMax/4)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "pop",
                "popMax"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">=",
                "0.9"
            ],
            "probabilityTextRange": [
                13,
                33
            ],
            "duration": "10",
            "timingTextRange": [
                35,
                49
            ],
            "post_condition": "(pop = ( popMax / 4 ))",
            "responseTextRange": [
                51,
                72
            ],
            "diagramVariables": " n = <b><i>10</i></b>, Response = <b><i>(pop = ( popMax / 4 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.9",
            "post_condition_unexp_pt": "(pop = (popMax / 4))",
            "post_condition_unexp_ft": "(pop = (popMax / 4))",
            "post_condition_unexp_pctl": "(pop = (popMax / 4))",
            "post_condition_SMV_pt": "(pop = (popMax / 4))",
            "post_condition_SMV_ft": "(pop = (popMax / 4))",
            "post_condition_PRISM_pctl": "(pop = (popMax / 4))",
            "ft": "((F[<=10] (pop = (popMax / 4))) | (F[<10] LAST))",
            "pt": "(H ((H (! (pop = (popMax / 4)))) -> (O[<10] (Z FALSE))))",
            "pctl": "(P>=0.9[(F<=10 (pop = (popMax / 4)))])",
            "ptExpanded": "(H ((H (! (pop = (popMax / 4)))) -> (O[0,9] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not ((pop = (popMax / 4)))) => OT(9, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,10] (pop = (popMax / 4))) | (F[0,9] LAST))",
            "pctlExpanded": "(P>=0.9[(F<=10 (pop = (popMax / 4)))])",
            "ftInfAUExpanded": "(F[0,10] (pop = (popMax / 4)))",
            "component": "System"
        },
        "status": "",
        "_id": "74584150-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R91",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "The probability that the plunger is falling fast and the motor is turned on should be less then 0.000876 in one year",
        "comments": "",
        "fulltext": "System shall with probability < 0.000876 within 1 tick satisfy (stateP=fallingBelow & stateM=switchOn)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "stateP",
                "fallingBelow",
                "stateM",
                "switchOn"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<",
                "0.000876"
            ],
            "probabilityTextRange": [
                13,
                39
            ],
            "duration": "1",
            "timingTextRange": [
                41,
                53
            ],
            "post_condition": "(( stateP = fallingBelow & stateM = switchOn ))",
            "responseTextRange": [
                55,
                101
            ],
            "diagramVariables": " n = <b><i>1</i></b>, Response = <b><i>(( stateP = fallingBelow & stateM = switchOn ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>1</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>1</i></b>). If the interval ends sooner than trigger+<b><i>1</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.000876",
            "post_condition_unexp_pt": "((stateP = fallingBelow) & (stateM = switchOn))",
            "post_condition_unexp_ft": "((stateP = fallingBelow) & (stateM = switchOn))",
            "post_condition_unexp_pctl": "((stateP = fallingBelow) & (stateM = switchOn))",
            "post_condition_SMV_pt": "((stateP = fallingBelow) & (stateM = switchOn))",
            "post_condition_SMV_ft": "((stateP = fallingBelow) & (stateM = switchOn))",
            "post_condition_PRISM_pctl": "((stateP = fallingBelow) & (stateM = switchOn))",
            "ft": "((F[<=1] ((stateP = fallingBelow) & (stateM = switchOn))) | (F[<1] LAST))",
            "pt": "(H ((H (! ((stateP = fallingBelow) & (stateM = switchOn)))) -> (O[<1] (Z FALSE))))",
            "pctl": "(P<0.000876[(F<=1 ((stateP = fallingBelow) & (stateM = switchOn)))])",
            "ptExpanded": "(H ((H (! ((stateP = fallingBelow) & (stateM = switchOn)))) -> (O[0,0] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (((stateP = fallingBelow) and (stateM = switchOn)))) => OT(0, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,1] ((stateP = fallingBelow) & (stateM = switchOn))) | (F[0,0] LAST))",
            "pctlExpanded": "(P<0.000876[(F<=1 ((stateP = fallingBelow) & (stateM = switchOn)))])",
            "ftInfAUExpanded": "(F[0,1] ((stateP = fallingBelow) & (stateM = switchOn)))",
            "component": "System"
        },
        "status": "",
        "_id": "74584151-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R107",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "The probabiliy of a dectab attack (P1_guessed ∧ P2_guessed ∧ P3_guessed ∧ P4_guessed) for a pin input devise of an ATM  is less than p",
        "comments": "",
        "fulltext": "System shall with probability < 0.5 eventually satisfy P1_guessed & P2_guessed & P3_guessed & P4_guessed",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "P1_guessed",
                "P2_guessed",
                "P3_guessed",
                "P4_guessed"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "timingTextRange": [
                36,
                45
            ],
            "post_condition": "(P1_guessed & P2_guessed & P3_guessed & P4_guessed)",
            "responseTextRange": [
                47,
                103
            ],
            "diagramVariables": "Response = <b><i>(P1_guessed & P2_guessed & P3_guessed & P4_guessed)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.5",
            "post_condition_unexp_pt": "(((P1_guessed & P2_guessed) & P3_guessed) & P4_guessed)",
            "post_condition_unexp_ft": "(((P1_guessed & P2_guessed) & P3_guessed) & P4_guessed)",
            "post_condition_unexp_pctl": "(((P1_guessed & P2_guessed) & P3_guessed) & P4_guessed)",
            "post_condition_SMV_pt": "(((P1_guessed & P2_guessed) & P3_guessed) & P4_guessed)",
            "post_condition_SMV_ft": "(((P1_guessed & P2_guessed) & P3_guessed) & P4_guessed)",
            "post_condition_PRISM_pctl": "(((P1_guessed & P2_guessed) & P3_guessed) & P4_guessed)",
            "ft": "((! LAST) U (((P1_guessed & P2_guessed) & P3_guessed) & P4_guessed))",
            "pt": "(O (((P1_guessed & P2_guessed) & P3_guessed) & P4_guessed))",
            "pctl": "(P<0.5[(F (((P1_guessed & P2_guessed) & P3_guessed) & P4_guessed))])",
            "ptExpanded": "(O (((P1_guessed & P2_guessed) & P3_guessed) & P4_guessed))",
            "CoCoSpecCode": "O((((P1_guessed and P2_guessed) and P3_guessed) and P4_guessed))",
            "ftExpanded": "((! LAST) U (((P1_guessed & P2_guessed) & P3_guessed) & P4_guessed))",
            "pctlExpanded": "(P<0.5[(F (((P1_guessed & P2_guessed) & P3_guessed) & P4_guessed))])",
            "ftInfAUExpanded": "(F (((P1_guessed & P2_guessed) & P3_guessed) & P4_guessed))",
            "component": "System"
        },
        "status": "",
        "_id": "74584152-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R81",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "the maximum probability that more than 10 messages have been lost by time T",
        "comments": "",
        "fulltext": "System shall with probability > 0.5 within 20 ticks satisfy messages_lost>=10",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "messages_lost"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "duration": "20",
            "timingTextRange": [
                36,
                50
            ],
            "post_condition": "(messages_lost >= 10)",
            "responseTextRange": [
                52,
                76
            ],
            "diagramVariables": " n = <b><i>20</i></b>, Response = <b><i>(messages_lost >= 10)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>20</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>20</i></b>). If the interval ends sooner than trigger+<b><i>20</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "(messages_lost >= 10)",
            "post_condition_unexp_ft": "(messages_lost >= 10)",
            "post_condition_unexp_pctl": "(messages_lost >= 10)",
            "post_condition_SMV_pt": "(messages_lost >= 10)",
            "post_condition_SMV_ft": "(messages_lost >= 10)",
            "post_condition_PRISM_pctl": "(messages_lost >= 10)",
            "ft": "((F[<=20] (messages_lost >= 10)) | (F[<20] LAST))",
            "pt": "(H ((H (! (messages_lost >= 10))) -> (O[<20] (Z FALSE))))",
            "pctl": "(P>0.5[(F<=20 (messages_lost >= 10))])",
            "ptExpanded": "(H ((H (! (messages_lost >= 10))) -> (O[0,19] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not ((messages_lost >= 10))) => OT(19, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,20] (messages_lost >= 10)) | (F[0,19] LAST))",
            "pctlExpanded": "(P>0.5[(F<=20 (messages_lost >= 10))])",
            "ftInfAUExpanded": "(F[0,20] (messages_lost >= 10))",
            "component": "System"
        },
        "status": "",
        "_id": "74584153-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R20",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "\"the probability that Plc is the first cause of\ndegradation or relocation.\"",
        "comments": "",
        "fulltext": "System shall with probability > 0.5 until apic satisfy !(asrc & aplc  & aspry)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "apic",
                "asrc",
                "aplc",
                "aspry"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "stop_condition": "(apic)",
            "timingTextRange": [
                36,
                45
            ],
            "post_condition": "(! ( asrc & aplc & aspry ))",
            "responseTextRange": [
                47,
                77
            ],
            "diagramVariables": "SC = <b><i>(apic)</i></b>, Response = <b><i>(! ( asrc & aplc & aspry ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_until_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "(! ((asrc & aplc) & aspry))",
            "post_condition_unexp_ft": "(! ((asrc & aplc) & aspry))",
            "post_condition_unexp_pctl": "(! ((asrc & aplc) & aspry))",
            "post_condition_SMV_pt": "(! ((asrc & aplc) & aspry))",
            "post_condition_SMV_ft": "(! ((asrc & aplc) & aspry))",
            "post_condition_PRISM_pctl": "(! ((asrc & aplc) & aspry))",
            "stop_condition_unexp_pt": "apic",
            "stop_condition_unexp_ft": "apic",
            "stop_condition_PRISM_pctl": "apic",
            "stop_condition_SMV_pt": "apic",
            "stop_condition_SMV_ft": "apic",
            "ft": "((apic V ((! ((asrc & aplc) & aspry)) | apic)) | (LAST V (! ((asrc & aplc) & aspry))))",
            "pt": "(H ((H (! apic)) -> (! ((asrc & aplc) & aspry))))",
            "pctl": "(P>0.5[((undefined R ((! ((asrc & aplc) & aspry)) | undefined)) | (LAST R (! ((asrc & aplc) & aspry))))])",
            "ptExpanded": "(H ((H (! apic)) -> (! ((asrc & aplc) & aspry))))",
            "CoCoSpecCode": "H((H(not (apic)) => not (((asrc and aplc) and aspry))))",
            "ftExpanded": "((apic V ((! ((asrc & aplc) & aspry)) | apic)) | (LAST V (! ((asrc & aplc) & aspry))))",
            "pctlExpanded": "(P>0.5[((apic R ((! ((asrc & aplc) & aspry)) | apic)) | (false R (! ((asrc & aplc) & aspry))))])",
            "ftInfAUExpanded": "(apic V ((! ((asrc & aplc) & aspry)) | apic))",
            "component": "System"
        },
        "status": "",
        "_id": "74584154-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R27",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "the probability of the system being down within 10 time units after having continuously operated with at least two processors is at most 0.01",
        "comments": "",
        "fulltext": "Upon on the system shall with probability <= 0.01 after 10 ticks satisfy !on",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "after",
            "response": "satisfaction",
            "variables": [
                "on"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(on)",
            "regular_condition": "(on)",
            "conditionTextRange": [
                0,
                6
            ],
            "component_name": "system",
            "componentTextRange": [
                8,
                17
            ],
            "probability_bound": [
                "<=",
                "0.01"
            ],
            "probabilityTextRange": [
                25,
                48
            ],
            "duration": "10",
            "timingTextRange": [
                50,
                63
            ],
            "post_condition": "(! on)",
            "responseTextRange": [
                65,
                75
            ],
            "diagramVariables": "TC = <b><i>(on)</i></b>,  n = <b><i>10</i></b>, Response = <b><i>(! on)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(on)</i></b> is true and any point in the interval where <b><i>(on)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must be false at all time points with distance <=<b><i>10</i></b> from the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>10</i></b>). Moreover, RES must hold at the point that is at distance <b><i>10</i></b>+1 from the trigger, that is, trigger+<b><i>10</i></b>+1, except if the end of the interval occurs earlier.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_after_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<=0.01",
            "regular_condition_unexp_pt": "on",
            "regular_condition_unexp_ft": "on",
            "regular_condition_unexp_pctl": "on",
            "regular_condition_SMV_pt": "on",
            "regular_condition_SMV_ft": "on",
            "regular_condition_PRISM_pctl": "on",
            "post_condition_unexp_pt": "(! on)",
            "post_condition_unexp_ft": "(! on)",
            "post_condition_unexp_pctl": "(! on)",
            "post_condition_SMV_pt": "(! on)",
            "post_condition_SMV_ft": "(! on)",
            "post_condition_PRISM_pctl": "(! on)",
            "ft": "((LAST V (((! on) & ((! LAST) & (X on))) -> (X (((G[<=10] (! (! on))) | (LAST V (! (! on)))) & ((F[<=10+1] (! on)) | (F[<10+1] LAST)))))) & (on -> (((G[<=10] (! (! on))) | (LAST V (! (! on)))) & ((F[<=10+1] (! on)) | (F[<10+1] LAST)))))",
            "pt": "((H ((O[<=10] (on & (Z (! on)))) -> ((H (! on)) | (! (! on))))) & (H ((O[=10+1] ((on & (Z (! on))) & (! (! on)))) -> (O[<10+1] ((Z FALSE) | (! on))))))",
            "pctl": "P>=1[((G (((! on) & (X on)) => (X (P<=0.01[((G<=10 (! (! on))) & (F<=(10+1) (! on)))])))) & (on => (P<=0.01[((G[<=10] (! (! on))) & (F[<=10+1] (! on)))])))]",
            "ptExpanded": "((H ((O[0,10] (on & (Z (! on)))) -> ((H (! on)) | on))) & (H ((O[11,11] ((on & (Z (! on))) & on)) -> (O[0,10] ((Z FALSE) | (! on))))))",
            "CoCoSpecCode": "(H((OT(10, 0, (on and ZtoPre(not (on)))) => (H(not (on)) or on))) and H((OT(11, 11, ((on and ZtoPre(not (on))) and on)) => OT(10, 0, (ZtoPre(false) or not (on))))))",
            "ftExpanded": "((LAST V (((! on) & ((! LAST) & (X on))) -> (X (((G[0,10] on) | (LAST V on)) & ((F[0,11] (! on)) | (F[0,10] LAST)))))) & (on -> (((G[0,10] on) | (LAST V on)) & ((F[0,11] (! on)) | (F[0,10] LAST)))))",
            "pctlExpanded": "P>=1[((G (((! on) & (X on)) => (X (P<=0.01[((G<=10 (! (! on))) & (F<=(10+1) (! on)))])))) & (on => (P<=0.01[((G[<=10] (! (! on))) & (F[<=10+1] (! on)))])))]",
            "ftInfAUExpanded": "((G (((! on) & (X on)) -> (X (((G[0,10] on) | (G on)) & (F[0,11] (! on)))))) & (on -> (((G[0,10] on) | (G on)) & (F[0,11] (! on)))))",
            "component": "system"
        },
        "status": "",
        "_id": "74584155-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R31",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "The probability to reach an accept state within t time units exeeds p",
        "comments": "",
        "fulltext": "System shall with probability > 0.5 within 10 ticks satisfy accept",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "accept"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "duration": "10",
            "timingTextRange": [
                36,
                50
            ],
            "post_condition": "(accept)",
            "responseTextRange": [
                52,
                65
            ],
            "diagramVariables": " n = <b><i>10</i></b>, Response = <b><i>(accept)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "accept",
            "post_condition_unexp_ft": "accept",
            "post_condition_unexp_pctl": "accept",
            "post_condition_SMV_pt": "accept",
            "post_condition_SMV_ft": "accept",
            "post_condition_PRISM_pctl": "accept",
            "ft": "((F[<=10] accept) | (F[<10] LAST))",
            "pt": "(H ((H (! accept)) -> (O[<10] (Z FALSE))))",
            "pctl": "(P>0.5[(F<=10 accept)])",
            "ptExpanded": "(H ((H (! accept)) -> (O[0,9] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (accept)) => OT(9, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,10] accept) | (F[0,9] LAST))",
            "pctlExpanded": "(P>0.5[(F<=10 accept)])",
            "ftInfAUExpanded": "(F[0,10] accept)",
            "component": "System"
        },
        "status": "",
        "_id": "74584156-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R70",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "\"The probability for a system error within 4 time units\nis less than 10−9\"",
        "comments": "",
        "fulltext": "System shall with probability < 0.00001 within 4 ticks satisfy error",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "error"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<",
                "0.00001"
            ],
            "probabilityTextRange": [
                13,
                38
            ],
            "duration": "4",
            "timingTextRange": [
                40,
                53
            ],
            "post_condition": "(error)",
            "responseTextRange": [
                55,
                67
            ],
            "diagramVariables": " n = <b><i>4</i></b>, Response = <b><i>(error)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>4</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>4</i></b>). If the interval ends sooner than trigger+<b><i>4</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.00001",
            "post_condition_unexp_pt": "error",
            "post_condition_unexp_ft": "error",
            "post_condition_unexp_pctl": "error",
            "post_condition_SMV_pt": "error",
            "post_condition_SMV_ft": "error",
            "post_condition_PRISM_pctl": "error",
            "ft": "((F[<=4] error) | (F[<4] LAST))",
            "pt": "(H ((H (! error)) -> (O[<4] (Z FALSE))))",
            "pctl": "(P<0.00001[(F<=4 error)])",
            "ptExpanded": "(H ((H (! error)) -> (O[0,3] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (error)) => OT(3, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,4] error) | (F[0,3] LAST))",
            "pctlExpanded": "(P<0.00001[(F<=4 error)])",
            "ftInfAUExpanded": "(F[0,4] error)",
            "component": "System"
        },
        "status": "",
        "_id": "74584157-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R62",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "the probability of the queue being full after exactly one hour is less than 0.01",
        "comments": "",
        "fulltext": "System shall with probability < 0.01 after 60 ticks satisfy queue_size=maximum",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "after",
            "response": "satisfaction",
            "variables": [
                "queue_size",
                "maximum"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<",
                "0.01"
            ],
            "probabilityTextRange": [
                13,
                35
            ],
            "duration": "60",
            "timingTextRange": [
                37,
                50
            ],
            "post_condition": "(queue_size = maximum)",
            "responseTextRange": [
                52,
                77
            ],
            "diagramVariables": " n = <b><i>60</i></b>, Response = <b><i>(queue_size = maximum)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must be false at all time points with distance <=<b><i>60</i></b> from the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>60</i></b>). Moreover, RES must hold at the point that is at distance <b><i>60</i></b>+1 from the trigger, that is, trigger+<b><i>60</i></b>+1, except if the end of the interval occurs earlier.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_after_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.01",
            "post_condition_unexp_pt": "(queue_size = maximum)",
            "post_condition_unexp_ft": "(queue_size = maximum)",
            "post_condition_unexp_pctl": "(queue_size = maximum)",
            "post_condition_SMV_pt": "(queue_size = maximum)",
            "post_condition_SMV_ft": "(queue_size = maximum)",
            "post_condition_PRISM_pctl": "(queue_size = maximum)",
            "ft": "(((G[<=60] (! (queue_size = maximum))) | (LAST V (! (queue_size = maximum)))) & ((F[<=60+1] (queue_size = maximum)) | (F[<60+1] LAST)))",
            "pt": "((H ((O[<=60] (Z FALSE)) -> (! (queue_size = maximum)))) & (H ((H (! (queue_size = maximum))) -> (O[<60+1] (Z FALSE)))))",
            "pctl": "(P<0.01[((G<=60 (! (queue_size = maximum))) & (F<=(60+1) (queue_size = maximum)))])",
            "ptExpanded": "((H ((O[0,60] (Z FALSE)) -> (! (queue_size = maximum)))) & (H ((H (! (queue_size = maximum))) -> (O[0,60] (Z FALSE)))))",
            "CoCoSpecCode": "(H((OT(60, 0, ZtoPre(false)) => not ((queue_size = maximum)))) and H((H(not ((queue_size = maximum))) => OT(60, 0, ZtoPre(false)))))",
            "ftExpanded": "(((G[0,60] (! (queue_size = maximum))) | (LAST V (! (queue_size = maximum)))) & ((F[0,61] (queue_size = maximum)) | (F[0,60] LAST)))",
            "pctlExpanded": "(P<0.01[((G<=60 (! (queue_size = maximum))) & (F<=(60+1) (queue_size = maximum)))])",
            "ftInfAUExpanded": "(((G[0,60] (! (queue_size = maximum))) | (G (! (queue_size = maximum)))) & (F[0,61] (queue_size = maximum)))",
            "component": "System"
        },
        "status": "",
        "_id": "74584158-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R1b",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "With a probability of 1 we will eventually reach a population size of 50, while maintaining a minimum of probability of 0.9 of eventually reaching a population of size 70 within 100 steps.",
        "comments": "",
        "fulltext": "System shall with probability >=0.9 within 100 ticks satisfy  (n=70) ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "n"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">=",
                "0.9"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "duration": "100",
            "timingTextRange": [
                36,
                51
            ],
            "post_condition": "(( n = 70 ))",
            "responseTextRange": [
                53,
                67
            ],
            "diagramVariables": " n = <b><i>100</i></b>, Response = <b><i>(( n = 70 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>100</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>100</i></b>). If the interval ends sooner than trigger+<b><i>100</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.9",
            "post_condition_unexp_pt": "(n = 70)",
            "post_condition_unexp_ft": "(n = 70)",
            "post_condition_unexp_pctl": "(n = 70)",
            "post_condition_SMV_pt": "(n = 70)",
            "post_condition_SMV_ft": "(n = 70)",
            "post_condition_PRISM_pctl": "(n = 70)",
            "ft": "((F[<=100] (n = 70)) | (F[<100] LAST))",
            "pt": "(H ((H (! (n = 70))) -> (O[<100] (Z FALSE))))",
            "pctl": "(P>=0.9[(F<=100 (n = 70))])",
            "ptExpanded": "(H ((H (! (n = 70))) -> (O[0,99] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not ((n = 70))) => OT(99, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,100] (n = 70)) | (F[0,99] LAST))",
            "pctlExpanded": "(P>=0.9[(F<=100 (n = 70))])",
            "ftInfAUExpanded": "(F[0,100] (n = 70))",
            "component": "System"
        },
        "status": "",
        "_id": "74584159-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R42",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "\"the probability that a request is served within the first\n4.5 seconds is greater than 0.9\"",
        "comments": "",
        "fulltext": "System shall with probability > 0.9 within 4.5 ticks satisfy requestServed ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "requestServed"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.9"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "duration": "4.5",
            "timingTextRange": [
                36,
                51
            ],
            "post_condition": "(requestServed)",
            "responseTextRange": [
                53,
                73
            ],
            "diagramVariables": " n = <b><i>4.5</i></b>, Response = <b><i>(requestServed)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>4.5</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>4.5</i></b>). If the interval ends sooner than trigger+<b><i>4.5</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.9",
            "post_condition_unexp_pt": "requestServed",
            "post_condition_unexp_ft": "requestServed",
            "post_condition_unexp_pctl": "requestServed",
            "post_condition_SMV_pt": "requestServed",
            "post_condition_SMV_ft": "requestServed",
            "post_condition_PRISM_pctl": "requestServed",
            "ft": "((F[<=4.5] requestServed) | (F[<4.5] LAST))",
            "pt": "(H ((H (! requestServed)) -> (O[<4.5] (Z FALSE))))",
            "pctl": "(P>0.9[(F<=4.5 requestServed)])",
            "ptExpanded": "(H ((H (! requestServed)) -> (O[<4.5] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (requestServed)) => OT(4.5, LessThan, ZtoPre(false))))",
            "ftExpanded": "((F[<=4.5] requestServed) | (F[<4.5] LAST))",
            "pctlExpanded": "(P>0.9[(F<=4.5 requestServed)])",
            "ftInfAUExpanded": "(F[<=4.5] requestServed)",
            "component": "System"
        },
        "status": "",
        "_id": "7458415a-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R92",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "The probability that the plunger is rising  and the motor is turned off should be less then 0.000876 in one year",
        "comments": "",
        "fulltext": "System shall with probability < 0.000876 within 1 tick satisfy ((stateP=risingBelow | stateP = risingAbove) & stateM=switchOn)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "stateP",
                "risingBelow",
                "risingAbove",
                "stateM",
                "switchOn"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<",
                "0.000876"
            ],
            "probabilityTextRange": [
                13,
                39
            ],
            "duration": "1",
            "timingTextRange": [
                41,
                53
            ],
            "post_condition": "(( ( stateP = risingBelow | stateP = risingAbove ) & stateM = switchOn ))",
            "responseTextRange": [
                55,
                125
            ],
            "diagramVariables": " n = <b><i>1</i></b>, Response = <b><i>(( ( stateP = risingBelow | stateP = risingAbove ) & stateM = switchOn ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>1</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>1</i></b>). If the interval ends sooner than trigger+<b><i>1</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.000876",
            "post_condition_unexp_pt": "(((stateP = risingBelow) | (stateP = risingAbove)) & (stateM = switchOn))",
            "post_condition_unexp_ft": "(((stateP = risingBelow) | (stateP = risingAbove)) & (stateM = switchOn))",
            "post_condition_unexp_pctl": "(((stateP = risingBelow) | (stateP = risingAbove)) & (stateM = switchOn))",
            "post_condition_SMV_pt": "(((stateP = risingBelow) | (stateP = risingAbove)) & (stateM = switchOn))",
            "post_condition_SMV_ft": "(((stateP = risingBelow) | (stateP = risingAbove)) & (stateM = switchOn))",
            "post_condition_PRISM_pctl": "(((stateP = risingBelow) | (stateP = risingAbove)) & (stateM = switchOn))",
            "ft": "((F[<=1] (((stateP = risingBelow) | (stateP = risingAbove)) & (stateM = switchOn))) | (F[<1] LAST))",
            "pt": "(H ((H (! (((stateP = risingBelow) | (stateP = risingAbove)) & (stateM = switchOn)))) -> (O[<1] (Z FALSE))))",
            "pctl": "(P<0.000876[(F<=1 (((stateP = risingBelow) | (stateP = risingAbove)) & (stateM = switchOn)))])",
            "ptExpanded": "(H ((H (! (((stateP = risingBelow) | (stateP = risingAbove)) & (stateM = switchOn)))) -> (O[0,0] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not ((((stateP = risingBelow) or (stateP = risingAbove)) and (stateM = switchOn)))) => OT(0, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,1] (((stateP = risingBelow) | (stateP = risingAbove)) & (stateM = switchOn))) | (F[0,0] LAST))",
            "pctlExpanded": "(P<0.000876[(F<=1 (((stateP = risingBelow) | (stateP = risingAbove)) & (stateM = switchOn)))])",
            "ftInfAUExpanded": "(F[0,1] (((stateP = risingBelow) | (stateP = risingAbove)) & (stateM = switchOn)))",
            "component": "System"
        },
        "status": "",
        "_id": "7458415b-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R82",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "with probability of at least 0.99 no error will occur in the next hundred time units.",
        "comments": "",
        "fulltext": "System shall with probability >= 0.99 within 100 ticks satisfy !error",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "error"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">=",
                "0.99"
            ],
            "probabilityTextRange": [
                13,
                36
            ],
            "duration": "100",
            "timingTextRange": [
                38,
                53
            ],
            "post_condition": "(! error)",
            "responseTextRange": [
                55,
                68
            ],
            "diagramVariables": " n = <b><i>100</i></b>, Response = <b><i>(! error)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>100</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>100</i></b>). If the interval ends sooner than trigger+<b><i>100</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.99",
            "post_condition_unexp_pt": "(! error)",
            "post_condition_unexp_ft": "(! error)",
            "post_condition_unexp_pctl": "(! error)",
            "post_condition_SMV_pt": "(! error)",
            "post_condition_SMV_ft": "(! error)",
            "post_condition_PRISM_pctl": "(! error)",
            "ft": "((F[<=100] (! error)) | (F[<100] LAST))",
            "pt": "(H ((H (! (! error))) -> (O[<100] (Z FALSE))))",
            "pctl": "(P>=0.99[(F<=100 (! error))])",
            "ptExpanded": "(H ((H error) -> (O[0,99] (Z FALSE))))",
            "CoCoSpecCode": "H((H(error) => OT(99, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,100] (! error)) | (F[0,99] LAST))",
            "pctlExpanded": "(P>=0.99[(F<=100 (! error))])",
            "ftInfAUExpanded": "(F[0,100] (! error))",
            "component": "System"
        },
        "status": "",
        "_id": "7458415c-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R102",
        "parent_reqid": "",
        "project": "GrunskeProbabilisticRequirements",
        "rationale": "With a probability of at least 99.9% a reaction to a change in a sensor value will be issued within 200ms.",
        "comments": "",
        "fulltext": "upon sensorChange System shall with probability >= 0.999 within 200 ticks satisfy react ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "sensorChange",
                "react"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(sensorChange)",
            "regular_condition": "(sensorChange)",
            "conditionTextRange": [
                0,
                16
            ],
            "component_name": "System",
            "componentTextRange": [
                18,
                23
            ],
            "probability_bound": [
                ">=",
                "0.999"
            ],
            "probabilityTextRange": [
                31,
                55
            ],
            "duration": "200",
            "timingTextRange": [
                57,
                72
            ],
            "post_condition": "(react)",
            "responseTextRange": [
                74,
                86
            ],
            "diagramVariables": "TC = <b><i>(sensorChange)</i></b>,  n = <b><i>200</i></b>, Response = <b><i>(react)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(sensorChange)</i></b> is true and any point in the interval where <b><i>(sensorChange)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>200</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>200</i></b>). If the interval ends sooner than trigger+<b><i>200</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.999",
            "regular_condition_unexp_pt": "sensorChange",
            "regular_condition_unexp_ft": "sensorChange",
            "regular_condition_unexp_pctl": "sensorChange",
            "regular_condition_SMV_pt": "sensorChange",
            "regular_condition_SMV_ft": "sensorChange",
            "regular_condition_PRISM_pctl": "sensorChange",
            "post_condition_unexp_pt": "react",
            "post_condition_unexp_ft": "react",
            "post_condition_unexp_pctl": "react",
            "post_condition_SMV_pt": "react",
            "post_condition_SMV_ft": "react",
            "post_condition_PRISM_pctl": "react",
            "ft": "((LAST V (((! sensorChange) & ((! LAST) & (X sensorChange))) -> (X ((F[<=200] react) | (F[<200] LAST))))) & (sensorChange -> ((F[<=200] react) | (F[<200] LAST))))",
            "pt": "(H ((O[=200] ((sensorChange & (Z (! sensorChange))) & (! react))) -> (O[<200] ((Z FALSE) | react))))",
            "pctl": "P>=1[((G (((! sensorChange) & (X sensorChange)) => (X (P>=0.999[(F<=200 react)])))) & (sensorChange => (P>=0.999[(F[<=200] react)])))]",
            "ptExpanded": "(H ((O[200,200] ((sensorChange & (Z (! sensorChange))) & (! react))) -> (O[0,199] ((Z FALSE) | react))))",
            "CoCoSpecCode": "H((OT(200, 200, ((sensorChange and ZtoPre(not (sensorChange))) and not (react))) => OT(199, 0, (ZtoPre(false) or react))))",
            "ftExpanded": "((LAST V (((! sensorChange) & ((! LAST) & (X sensorChange))) -> (X ((F[0,200] react) | (F[0,199] LAST))))) & (sensorChange -> ((F[0,200] react) | (F[0,199] LAST))))",
            "pctlExpanded": "P>=1[((G (((! sensorChange) & (X sensorChange)) => (X (P>=0.999[(F<=200 react)])))) & (sensorChange => (P>=0.999[(F[<=200] react)])))]",
            "ftInfAUExpanded": "((G (((! sensorChange) & (X sensorChange)) -> (X (F[0,200] react)))) & (sensorChange -> (F[0,200] react)))",
            "component": "System"
        },
        "status": "",
        "_id": "7458415d-41f1-11f0-bf1e-a1c2a6d8f198"
    }
]