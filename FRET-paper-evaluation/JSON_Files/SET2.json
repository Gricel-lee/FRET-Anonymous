[
    {
        "reqid": "R146",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "the probability of the cloud server A going down without warning is at most v1 ",
        "comments": "",
        "fulltext": "CloudServer shall with probability < 0.5 eventually satisfy fail",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "fail"
            ],
            "component_name": "CloudServer",
            "componentTextRange": [
                0,
                10
            ],
            "probability_bound": [
                "<",
                "0.5"
            ],
            "probabilityTextRange": [
                18,
                39
            ],
            "timingTextRange": [
                41,
                50
            ],
            "post_condition": "(fail)",
            "responseTextRange": [
                52,
                63
            ],
            "diagramVariables": "Response = <b><i>(fail)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.5",
            "post_condition_unexp_pt": "fail",
            "post_condition_unexp_ft": "fail",
            "post_condition_unexp_pctl": "fail",
            "post_condition_SMV_pt": "fail",
            "post_condition_SMV_ft": "fail",
            "post_condition_PRISM_pctl": "fail",
            "ft": "((! LAST) U fail)",
            "pt": "(O fail)",
            "pctl": "(P<0.5[(F fail)])",
            "ptExpanded": "(O fail)",
            "CoCoSpecCode": "O(fail)",
            "ftExpanded": "((! LAST) U fail)",
            "pctlExpanded": "(P<0.5[(F fail)])",
            "ftInfAUExpanded": "(F fail)",
            "component": "CloudServer"
        },
        "status": "",
        "_id": "7faddd70-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R175b",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "after sending a patient’s medical parameters to the Lab, TA receives a ‘high’ result within one hour. TA will immediately notify the assistants nearest to the patient and must receive a response from them within one hour with 95% probability",
        "comments": "",
        "fulltext": "upon high_result_received TA  shall immediately satisfy notify_assistant",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "high_result_received",
                "notify_assistant"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(high_result_received)",
            "regular_condition": "(high_result_received)",
            "conditionTextRange": [
                0,
                24
            ],
            "component_name": "TA",
            "componentTextRange": [
                26,
                27
            ],
            "timingTextRange": [
                36,
                46
            ],
            "post_condition": "(notify_assistant)",
            "responseTextRange": [
                48,
                71
            ],
            "diagramVariables": "TC = <b><i>(high_result_received)</i></b>, Response = <b><i>(notify_assistant)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(high_result_received)</i></b> is true and any point in the interval where <b><i>(high_result_received)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "high_result_received",
            "regular_condition_unexp_ft": "high_result_received",
            "regular_condition_unexp_pctl": "high_result_received",
            "regular_condition_SMV_pt": "high_result_received",
            "regular_condition_SMV_ft": "high_result_received",
            "regular_condition_PRISM_pctl": "high_result_received",
            "post_condition_unexp_pt": "notify_assistant",
            "post_condition_unexp_ft": "notify_assistant",
            "post_condition_unexp_pctl": "notify_assistant",
            "post_condition_SMV_pt": "notify_assistant",
            "post_condition_SMV_ft": "notify_assistant",
            "post_condition_PRISM_pctl": "notify_assistant",
            "ft": "((LAST V (((! high_result_received) & ((! LAST) & (X high_result_received))) -> (X notify_assistant))) & (high_result_received -> notify_assistant))",
            "pt": "(H ((high_result_received & (Z (! high_result_received))) -> notify_assistant))",
            "pctl": "P>=1[((G (((! high_result_received) & (X high_result_received)) => (X (P>=1[notify_assistant])))) & (high_result_received => (P>=1[notify_assistant])))]",
            "ptExpanded": "(H ((high_result_received & (Z (! high_result_received))) -> notify_assistant))",
            "CoCoSpecCode": "H(((high_result_received and ZtoPre(not (high_result_received))) => notify_assistant))",
            "ftExpanded": "((LAST V (((! high_result_received) & ((! LAST) & (X high_result_received))) -> (X notify_assistant))) & (high_result_received -> notify_assistant))",
            "pctlExpanded": "P>=1[((G (((! high_result_received) & (X high_result_received)) => (X (P>=1[notify_assistant])))) & (high_result_received => (P>=1[notify_assistant])))]",
            "ftInfAUExpanded": "((G (((! high_result_received) & (X high_result_received)) -> (X notify_assistant))) & (high_result_received -> notify_assistant))",
            "component": "TA"
        },
        "status": "",
        "_id": "7faddd71-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R60",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "\"“after a correct installation, the probability that the system goes offline within 24 hours is less than\n0.02\"",
        "comments": "",
        "fulltext": "upon correct_installation System shall with probability <0.2 within 24 ticks satisfy offline",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "correct_installation",
                "offline"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(correct_installation)",
            "regular_condition": "(correct_installation)",
            "conditionTextRange": [
                0,
                24
            ],
            "component_name": "System",
            "componentTextRange": [
                26,
                31
            ],
            "probability_bound": [
                "<",
                "0.2"
            ],
            "probabilityTextRange": [
                39,
                59
            ],
            "duration": "24",
            "timingTextRange": [
                61,
                75
            ],
            "post_condition": "(offline)",
            "responseTextRange": [
                77,
                91
            ],
            "diagramVariables": "TC = <b><i>(correct_installation)</i></b>,  n = <b><i>24</i></b>, Response = <b><i>(offline)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(correct_installation)</i></b> is true and any point in the interval where <b><i>(correct_installation)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>24</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>24</i></b>). If the interval ends sooner than trigger+<b><i>24</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.2",
            "regular_condition_unexp_pt": "correct_installation",
            "regular_condition_unexp_ft": "correct_installation",
            "regular_condition_unexp_pctl": "correct_installation",
            "regular_condition_SMV_pt": "correct_installation",
            "regular_condition_SMV_ft": "correct_installation",
            "regular_condition_PRISM_pctl": "correct_installation",
            "post_condition_unexp_pt": "offline",
            "post_condition_unexp_ft": "offline",
            "post_condition_unexp_pctl": "offline",
            "post_condition_SMV_pt": "offline",
            "post_condition_SMV_ft": "offline",
            "post_condition_PRISM_pctl": "offline",
            "ft": "((LAST V (((! correct_installation) & ((! LAST) & (X correct_installation))) -> (X ((F[<=24] offline) | (F[<24] LAST))))) & (correct_installation -> ((F[<=24] offline) | (F[<24] LAST))))",
            "pt": "(H ((O[=24] ((correct_installation & (Z (! correct_installation))) & (! offline))) -> (O[<24] ((Z FALSE) | offline))))",
            "pctl": "P>=1[((G (((! correct_installation) & (X correct_installation)) => (X (P<0.2[(F<=24 offline)])))) & (correct_installation => (P<0.2[(F[<=24] offline)])))]",
            "ptExpanded": "(H ((O[24,24] ((correct_installation & (Z (! correct_installation))) & (! offline))) -> (O[0,23] ((Z FALSE) | offline))))",
            "CoCoSpecCode": "H((OT(24, 24, ((correct_installation and ZtoPre(not (correct_installation))) and not (offline))) => OT(23, 0, (ZtoPre(false) or offline))))",
            "ftExpanded": "((LAST V (((! correct_installation) & ((! LAST) & (X correct_installation))) -> (X ((F[0,24] offline) | (F[0,23] LAST))))) & (correct_installation -> ((F[0,24] offline) | (F[0,23] LAST))))",
            "pctlExpanded": "P>=1[((G (((! correct_installation) & (X correct_installation)) => (X (P<0.2[(F<=24 offline)])))) & (correct_installation => (P<0.2[(F[<=24] offline)])))]",
            "ftInfAUExpanded": "((G (((! correct_installation) & (X correct_installation)) -> (X (F[0,24] offline)))) & (correct_installation -> (F[0,24] offline)))",
            "component": "System"
        },
        "status": "",
        "_id": "7faddd72-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R31",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "The visualization of the orders page in less than 1 min shall happen at least in 90% of the times.",
        "comments": "",
        "fulltext": "System shall with probability > 0.9 within 60 seconds satisfy viewOrdersPage",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "viewOrdersPage"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.9"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "duration": "60",
            "timingTextRange": [
                36,
                52
            ],
            "post_condition": "(viewOrdersPage)",
            "responseTextRange": [
                54,
                75
            ],
            "diagramVariables": " n = <b><i>60</i></b>, Response = <b><i>(viewOrdersPage)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>60</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>60</i></b>). If the interval ends sooner than trigger+<b><i>60</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.9",
            "post_condition_unexp_pt": "viewOrdersPage",
            "post_condition_unexp_ft": "viewOrdersPage",
            "post_condition_unexp_pctl": "viewOrdersPage",
            "post_condition_SMV_pt": "viewOrdersPage",
            "post_condition_SMV_ft": "viewOrdersPage",
            "post_condition_PRISM_pctl": "viewOrdersPage",
            "ft": "((F[<=60] viewOrdersPage) | (F[<60] LAST))",
            "pt": "(H ((H (! viewOrdersPage)) -> (O[<60] (Z FALSE))))",
            "pctl": "(P>0.9[(F<=60 viewOrdersPage)])",
            "ptExpanded": "(H ((H (! viewOrdersPage)) -> (O[0,59] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (viewOrdersPage)) => OT(59, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,60] viewOrdersPage) | (F[0,59] LAST))",
            "pctlExpanded": "(P>0.9[(F<=60 viewOrdersPage)])",
            "ftInfAUExpanded": "(F[0,60] viewOrdersPage)",
            "component": "System"
        },
        "status": "",
        "_id": "7faddd73-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R63",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "The probability of observing a timeout within time T . This is a reachability problem with goal set G = {rc} and unsafe set U = ∅",
        "comments": "",
        "fulltext": "System shall with probability > 0.5 within 10 ticks satisfy timeout",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "timeout"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "duration": "10",
            "timingTextRange": [
                36,
                50
            ],
            "post_condition": "(timeout)",
            "responseTextRange": [
                52,
                66
            ],
            "diagramVariables": " n = <b><i>10</i></b>, Response = <b><i>(timeout)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "timeout",
            "post_condition_unexp_ft": "timeout",
            "post_condition_unexp_pctl": "timeout",
            "post_condition_SMV_pt": "timeout",
            "post_condition_SMV_ft": "timeout",
            "post_condition_PRISM_pctl": "timeout",
            "ft": "((F[<=10] timeout) | (F[<10] LAST))",
            "pt": "(H ((H (! timeout)) -> (O[<10] (Z FALSE))))",
            "pctl": "(P>0.5[(F<=10 timeout)])",
            "ptExpanded": "(H ((H (! timeout)) -> (O[0,9] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (timeout)) => OT(9, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,10] timeout) | (F[0,9] LAST))",
            "pctlExpanded": "(P>0.5[(F<=10 timeout)])",
            "ftInfAUExpanded": "(F[0,10] timeout)",
            "component": "System"
        },
        "status": "",
        "_id": "7faddd74-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R104",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "𝑝ℎ𝑖 is always followed by 𝑝𝑠𝑖 with a probability ⋈p",
        "comments": "",
        "fulltext": "whenever phi system shall with probability > 0.5 eventually satisfy psi",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "phi",
                "psi"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(phi)",
            "regular_condition": "(phi)",
            "conditionTextRange": [
                0,
                11
            ],
            "component_name": "system",
            "componentTextRange": [
                13,
                18
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                26,
                47
            ],
            "timingTextRange": [
                49,
                58
            ],
            "post_condition": "(psi)",
            "responseTextRange": [
                60,
                70
            ],
            "diagramVariables": "CC = <b><i>(phi)</i></b>, Response = <b><i>(psi)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(phi)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "regular_condition_unexp_pt": "phi",
            "regular_condition_unexp_ft": "phi",
            "regular_condition_unexp_pctl": "phi",
            "regular_condition_SMV_pt": "phi",
            "regular_condition_SMV_ft": "phi",
            "regular_condition_PRISM_pctl": "phi",
            "post_condition_unexp_pt": "psi",
            "post_condition_unexp_ft": "psi",
            "post_condition_unexp_pctl": "psi",
            "post_condition_SMV_pt": "psi",
            "post_condition_SMV_ft": "psi",
            "post_condition_PRISM_pctl": "psi",
            "ft": "(LAST V (phi -> ((! LAST) U psi)))",
            "pt": "((H (! phi)) | (! ((! psi) S ((! psi) & phi))))",
            "pctl": "P>=1[(G (phi => (P>0.5[(F psi)])))]",
            "ptExpanded": "((H (! phi)) | (! ((! psi) S ((! psi) & phi))))",
            "CoCoSpecCode": "(H(not (phi)) or not (SI(phi,not (psi))))",
            "ftExpanded": "(LAST V (phi -> ((! LAST) U psi)))",
            "pctlExpanded": "P>=1[(G (phi => (P>0.5[(F psi)])))]",
            "ftInfAUExpanded": "(G (phi -> (F psi)))",
            "component": "system"
        },
        "status": "",
        "_id": "7faddd75-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R130",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "The probability that users browse announcements of new cars \n\nP =?[F(NewCarsP age | NewCar)]",
        "comments": "",
        "fulltext": "System shall with probability >0.5 eventually satisfy NewCarsPage | NewCar",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "NewCarsPage",
                "NewCar"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                33
            ],
            "timingTextRange": [
                35,
                44
            ],
            "post_condition": "(NewCarsPage | NewCar)",
            "responseTextRange": [
                46,
                73
            ],
            "diagramVariables": "Response = <b><i>(NewCarsPage | NewCar)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "(NewCarsPage | NewCar)",
            "post_condition_unexp_ft": "(NewCarsPage | NewCar)",
            "post_condition_unexp_pctl": "(NewCarsPage | NewCar)",
            "post_condition_SMV_pt": "(NewCarsPage | NewCar)",
            "post_condition_SMV_ft": "(NewCarsPage | NewCar)",
            "post_condition_PRISM_pctl": "(NewCarsPage | NewCar)",
            "ft": "((! LAST) U (NewCarsPage | NewCar))",
            "pt": "(O (NewCarsPage | NewCar))",
            "pctl": "(P>0.5[(F (NewCarsPage | NewCar))])",
            "ptExpanded": "(O (NewCarsPage | NewCar))",
            "CoCoSpecCode": "O((NewCarsPage or NewCar))",
            "ftExpanded": "((! LAST) U (NewCarsPage | NewCar))",
            "pctlExpanded": "(P>0.5[(F (NewCarsPage | NewCar))])",
            "ftInfAUExpanded": "(F (NewCarsPage | NewCar))",
            "component": "System"
        },
        "status": "",
        "_id": "7faddd76-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R111",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "the probability that a service is available per 24 hours should be greater than 90 percent",
        "comments": "",
        "fulltext": "service shall with probability > 0.9 for 24 hours satisfy available",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "for",
            "response": "satisfaction",
            "variables": [
                "available"
            ],
            "component_name": "service",
            "componentTextRange": [
                0,
                6
            ],
            "probability_bound": [
                ">",
                "0.9"
            ],
            "probabilityTextRange": [
                14,
                35
            ],
            "duration": "24",
            "timingTextRange": [
                37,
                48
            ],
            "post_condition": "(available)",
            "responseTextRange": [
                50,
                66
            ],
            "diagramVariables": " n = <b><i>24</i></b>, Response = <b><i>(available)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the trigger and remain true for <b><i>24</i></b> time points past the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>24</i></b>), or to the end of the interval if the interval ends sooner than trigger+<b><i>24</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_for_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.9",
            "post_condition_unexp_pt": "available",
            "post_condition_unexp_ft": "available",
            "post_condition_unexp_pctl": "available",
            "post_condition_SMV_pt": "available",
            "post_condition_SMV_ft": "available",
            "post_condition_PRISM_pctl": "available",
            "ft": "((G[<=24] available) | (LAST V available))",
            "pt": "(H ((O[<=24] (Z FALSE)) -> available))",
            "pctl": "(P>0.9[(G<=24 available)])",
            "ptExpanded": "(H ((O[0,24] (Z FALSE)) -> available))",
            "CoCoSpecCode": "H((OT(24, 0, ZtoPre(false)) => available))",
            "ftExpanded": "((G[0,24] available) | (LAST V available))",
            "pctlExpanded": "(P>0.9[(G<=24 available)])",
            "ftInfAUExpanded": "((G[0,24] available) | (G available))",
            "component": "service"
        },
        "status": "",
        "_id": "7faddd77-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R7",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "The probability of a duplicate record for the same vehicle at a toll gate gantry occurring within one year is less than 1 %",
        "comments": "",
        "fulltext": "if vehicle1 System shall with probability < 0.01 within 1 tick satisfy duplicateRecord",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "vehicle1",
                "duplicateRecord"
            ],
            "qualifier_word": "if",
            "pre_condition": "(vehicle1)",
            "regular_condition": "(vehicle1)",
            "conditionTextRange": [
                0,
                10
            ],
            "component_name": "System",
            "componentTextRange": [
                12,
                17
            ],
            "probability_bound": [
                "<",
                "0.01"
            ],
            "probabilityTextRange": [
                25,
                47
            ],
            "duration": "1",
            "timingTextRange": [
                49,
                61
            ],
            "post_condition": "(duplicateRecord)",
            "responseTextRange": [
                63,
                85
            ],
            "diagramVariables": "TC = <b><i>(vehicle1)</i></b>,  n = <b><i>1</i></b>, Response = <b><i>(duplicateRecord)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(vehicle1)</i></b> is true and any point in the interval where <b><i>(vehicle1)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>1</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>1</i></b>). If the interval ends sooner than trigger+<b><i>1</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.01",
            "regular_condition_unexp_pt": "vehicle1",
            "regular_condition_unexp_ft": "vehicle1",
            "regular_condition_unexp_pctl": "vehicle1",
            "regular_condition_SMV_pt": "vehicle1",
            "regular_condition_SMV_ft": "vehicle1",
            "regular_condition_PRISM_pctl": "vehicle1",
            "post_condition_unexp_pt": "duplicateRecord",
            "post_condition_unexp_ft": "duplicateRecord",
            "post_condition_unexp_pctl": "duplicateRecord",
            "post_condition_SMV_pt": "duplicateRecord",
            "post_condition_SMV_ft": "duplicateRecord",
            "post_condition_PRISM_pctl": "duplicateRecord",
            "ft": "((LAST V (((! vehicle1) & ((! LAST) & (X vehicle1))) -> (X ((F[<=1] duplicateRecord) | (F[<1] LAST))))) & (vehicle1 -> ((F[<=1] duplicateRecord) | (F[<1] LAST))))",
            "pt": "(H ((O[=1] ((vehicle1 & (Z (! vehicle1))) & (! duplicateRecord))) -> (O[<1] ((Z FALSE) | duplicateRecord))))",
            "pctl": "P>=1[((G (((! vehicle1) & (X vehicle1)) => (X (P<0.01[(F<=1 duplicateRecord)])))) & (vehicle1 => (P<0.01[(F[<=1] duplicateRecord)])))]",
            "ptExpanded": "(H ((O[1,1] ((vehicle1 & (Z (! vehicle1))) & (! duplicateRecord))) -> (O[0,0] ((Z FALSE) | duplicateRecord))))",
            "CoCoSpecCode": "H((OT(1, 1, ((vehicle1 and ZtoPre(not (vehicle1))) and not (duplicateRecord))) => OT(0, 0, (ZtoPre(false) or duplicateRecord))))",
            "ftExpanded": "((LAST V (((! vehicle1) & ((! LAST) & (X vehicle1))) -> (X ((F[0,1] duplicateRecord) | (F[0,0] LAST))))) & (vehicle1 -> ((F[0,1] duplicateRecord) | (F[0,0] LAST))))",
            "pctlExpanded": "P>=1[((G (((! vehicle1) & (X vehicle1)) => (X (P<0.01[(F<=1 duplicateRecord)])))) & (vehicle1 => (P<0.01[(F[<=1] duplicateRecord)])))]",
            "ftInfAUExpanded": "((G (((! vehicle1) & (X vehicle1)) -> (X (F[0,1] duplicateRecord)))) & (vehicle1 -> (F[0,1] duplicateRecord)))",
            "component": "System"
        },
        "status": "",
        "_id": "7faddd78-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R55",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "When performance falls below threshold MIN RPS , the probability of raising performance again above MIN RPS with a cost below the MAX_POLLERS threshold within 100 seconds is greater or equal to 0.9\n\n\"P≥1[G(rpsViolation ⇒ P≥0.9(F\n≤100 dcasCOP ))]\"",
        "comments": "",
        "fulltext": "whenever rpsViolation System shall with probability >= 0.9 within 100 seconds satisfy dcasCOP",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "rpsViolation",
                "dcasCOP"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(rpsViolation)",
            "regular_condition": "(rpsViolation)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "System",
            "componentTextRange": [
                22,
                27
            ],
            "probability_bound": [
                ">=",
                "0.9"
            ],
            "probabilityTextRange": [
                35,
                57
            ],
            "duration": "100",
            "timingTextRange": [
                59,
                76
            ],
            "post_condition": "(dcasCOP)",
            "responseTextRange": [
                78,
                92
            ],
            "diagramVariables": "CC = <b><i>(rpsViolation)</i></b>,  n = <b><i>100</i></b>, Response = <b><i>(dcasCOP)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(rpsViolation)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>100</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>100</i></b>). If the interval ends sooner than trigger+<b><i>100</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.9",
            "regular_condition_unexp_pt": "rpsViolation",
            "regular_condition_unexp_ft": "rpsViolation",
            "regular_condition_unexp_pctl": "rpsViolation",
            "regular_condition_SMV_pt": "rpsViolation",
            "regular_condition_SMV_ft": "rpsViolation",
            "regular_condition_PRISM_pctl": "rpsViolation",
            "post_condition_unexp_pt": "dcasCOP",
            "post_condition_unexp_ft": "dcasCOP",
            "post_condition_unexp_pctl": "dcasCOP",
            "post_condition_SMV_pt": "dcasCOP",
            "post_condition_SMV_ft": "dcasCOP",
            "post_condition_PRISM_pctl": "dcasCOP",
            "ft": "(LAST V (rpsViolation -> ((F[<=100] dcasCOP) | (F[<100] LAST))))",
            "pt": "(H ((O[=100] (rpsViolation & (! dcasCOP))) -> (O[<100] ((Z FALSE) | dcasCOP))))",
            "pctl": "P>=1[(G (rpsViolation => (P>=0.9[(F<=100 dcasCOP)])))]",
            "ptExpanded": "(H ((O[100,100] (rpsViolation & (! dcasCOP))) -> (O[0,99] ((Z FALSE) | dcasCOP))))",
            "CoCoSpecCode": "H((OT(100, 100, (rpsViolation and not (dcasCOP))) => OT(99, 0, (ZtoPre(false) or dcasCOP))))",
            "ftExpanded": "(LAST V (rpsViolation -> ((F[0,100] dcasCOP) | (F[0,99] LAST))))",
            "pctlExpanded": "P>=1[(G (rpsViolation => (P>=0.9[(F<=100 dcasCOP)])))]",
            "ftInfAUExpanded": "(G (rpsViolation -> (F[0,100] dcasCOP)))",
            "component": "System"
        },
        "status": "",
        "_id": "7faddd79-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R35",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": " The airbag is ignited at latest after T2 = 45 ms\n\nP≤0.0001(true U >45 (critical crash ∧ fasic fired))",
        "comments": "",
        "fulltext": "System shall with probability <=0.0001 within 45 ticks satisfy criticalCrash & fasicFired",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "criticalCrash",
                "fasicFired"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<=",
                "0.0001"
            ],
            "probabilityTextRange": [
                13,
                37
            ],
            "duration": "45",
            "timingTextRange": [
                39,
                53
            ],
            "post_condition": "(criticalCrash & fasicFired)",
            "responseTextRange": [
                55,
                88
            ],
            "diagramVariables": " n = <b><i>45</i></b>, Response = <b><i>(criticalCrash & fasicFired)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>45</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>45</i></b>). If the interval ends sooner than trigger+<b><i>45</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<=0.0001",
            "post_condition_unexp_pt": "(criticalCrash & fasicFired)",
            "post_condition_unexp_ft": "(criticalCrash & fasicFired)",
            "post_condition_unexp_pctl": "(criticalCrash & fasicFired)",
            "post_condition_SMV_pt": "(criticalCrash & fasicFired)",
            "post_condition_SMV_ft": "(criticalCrash & fasicFired)",
            "post_condition_PRISM_pctl": "(criticalCrash & fasicFired)",
            "ft": "((F[<=45] (criticalCrash & fasicFired)) | (F[<45] LAST))",
            "pt": "(H ((H (! (criticalCrash & fasicFired))) -> (O[<45] (Z FALSE))))",
            "pctl": "(P<=0.0001[(F<=45 (criticalCrash & fasicFired))])",
            "ptExpanded": "(H ((H (! (criticalCrash & fasicFired))) -> (O[0,44] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not ((criticalCrash and fasicFired))) => OT(44, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,45] (criticalCrash & fasicFired)) | (F[0,44] LAST))",
            "pctlExpanded": "(P<=0.0001[(F<=45 (criticalCrash & fasicFired))])",
            "ftInfAUExpanded": "(F[0,45] (criticalCrash & fasicFired))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae0480-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R159",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "The probability that an Attack (A) is not mitigated within 20 min after starting the attack is less than 10%",
        "comments": "",
        "fulltext": "upon attackStarted System shall with probability < 0.1 for 20 seconds satisfy noMitigation",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "for",
            "response": "satisfaction",
            "variables": [
                "attackStarted",
                "noMitigation"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(attackStarted)",
            "regular_condition": "(attackStarted)",
            "conditionTextRange": [
                0,
                17
            ],
            "component_name": "System",
            "componentTextRange": [
                19,
                24
            ],
            "probability_bound": [
                "<",
                "0.1"
            ],
            "probabilityTextRange": [
                32,
                53
            ],
            "duration": "20",
            "timingTextRange": [
                55,
                68
            ],
            "post_condition": "(noMitigation)",
            "responseTextRange": [
                70,
                89
            ],
            "diagramVariables": "TC = <b><i>(attackStarted)</i></b>,  n = <b><i>20</i></b>, Response = <b><i>(noMitigation)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(attackStarted)</i></b> is true and any point in the interval where <b><i>(attackStarted)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the trigger and remain true for <b><i>20</i></b> time points past the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>20</i></b>), or to the end of the interval if the interval ends sooner than trigger+<b><i>20</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_for_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.1",
            "regular_condition_unexp_pt": "attackStarted",
            "regular_condition_unexp_ft": "attackStarted",
            "regular_condition_unexp_pctl": "attackStarted",
            "regular_condition_SMV_pt": "attackStarted",
            "regular_condition_SMV_ft": "attackStarted",
            "regular_condition_PRISM_pctl": "attackStarted",
            "post_condition_unexp_pt": "noMitigation",
            "post_condition_unexp_ft": "noMitigation",
            "post_condition_unexp_pctl": "noMitigation",
            "post_condition_SMV_pt": "noMitigation",
            "post_condition_SMV_ft": "noMitigation",
            "post_condition_PRISM_pctl": "noMitigation",
            "ft": "((LAST V (((! attackStarted) & ((! LAST) & (X attackStarted))) -> (X ((G[<=20] noMitigation) | (LAST V noMitigation))))) & (attackStarted -> ((G[<=20] noMitigation) | (LAST V noMitigation))))",
            "pt": "(H ((O[<=20] (attackStarted & (Z (! attackStarted)))) -> ((H (! attackStarted)) | noMitigation)))",
            "pctl": "P>=1[((G (((! attackStarted) & (X attackStarted)) => (X (P<0.1[(G<=20 noMitigation)])))) & (attackStarted => (P<0.1[(G[<=20] noMitigation)])))]",
            "ptExpanded": "(H ((O[0,20] (attackStarted & (Z (! attackStarted)))) -> ((H (! attackStarted)) | noMitigation)))",
            "CoCoSpecCode": "H((OT(20, 0, (attackStarted and ZtoPre(not (attackStarted)))) => (H(not (attackStarted)) or noMitigation)))",
            "ftExpanded": "((LAST V (((! attackStarted) & ((! LAST) & (X attackStarted))) -> (X ((G[0,20] noMitigation) | (LAST V noMitigation))))) & (attackStarted -> ((G[0,20] noMitigation) | (LAST V noMitigation))))",
            "pctlExpanded": "P>=1[((G (((! attackStarted) & (X attackStarted)) => (X (P<0.1[(G<=20 noMitigation)])))) & (attackStarted => (P<0.1[(G[<=20] noMitigation)])))]",
            "ftInfAUExpanded": "((G (((! attackStarted) & (X attackStarted)) -> (X ((G[0,20] noMitigation) | (G noMitigation))))) & (attackStarted -> ((G[0,20] noMitigation) | (G noMitigation))))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae0481-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R147",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "the probability from an initial state to the absorbing state s6 has to be less than 0.01.",
        "comments": "",
        "fulltext": "System shall with probability <=0.01 eventually satisfy s=6",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "s"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<=",
                "0.01"
            ],
            "probabilityTextRange": [
                13,
                35
            ],
            "timingTextRange": [
                37,
                46
            ],
            "post_condition": "(s = 6)",
            "responseTextRange": [
                48,
                58
            ],
            "diagramVariables": "Response = <b><i>(s = 6)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<=0.01",
            "post_condition_unexp_pt": "(s = 6)",
            "post_condition_unexp_ft": "(s = 6)",
            "post_condition_unexp_pctl": "(s = 6)",
            "post_condition_SMV_pt": "(s = 6)",
            "post_condition_SMV_ft": "(s = 6)",
            "post_condition_PRISM_pctl": "(s = 6)",
            "ft": "((! LAST) U (s = 6))",
            "pt": "(O (s = 6))",
            "pctl": "(P<=0.01[(F (s = 6))])",
            "ptExpanded": "(O (s = 6))",
            "CoCoSpecCode": "O((s = 6))",
            "ftExpanded": "((! LAST) U (s = 6))",
            "pctlExpanded": "(P<=0.01[(F (s = 6))])",
            "ftInfAUExpanded": "(F (s = 6))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae0482-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R126",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "if for a certain patient the number of results with a ‘high’ criticality is more than three times during a week, the probability for TA to notify the doctors to diagnose the patient within one day is 90% ",
        "comments": "",
        "fulltext": "if high_criticality_rate > (3/7) TA shall with probability > 0.9 within 1 tick satisfy notify_doctors",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "high_criticality_rate",
                "notify_doctors"
            ],
            "qualifier_word": "if",
            "pre_condition": "(high_criticality_rate > ( 3 / 7 ))",
            "regular_condition": "(high_criticality_rate > ( 3 / 7 ))",
            "conditionTextRange": [
                0,
                31
            ],
            "component_name": "TA",
            "componentTextRange": [
                33,
                34
            ],
            "probability_bound": [
                ">",
                "0.9"
            ],
            "probabilityTextRange": [
                42,
                63
            ],
            "duration": "1",
            "timingTextRange": [
                65,
                77
            ],
            "post_condition": "(notify_doctors)",
            "responseTextRange": [
                79,
                100
            ],
            "diagramVariables": "TC = <b><i>(high_criticality_rate > ( 3 / 7 ))</i></b>,  n = <b><i>1</i></b>, Response = <b><i>(notify_doctors)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(high_criticality_rate > ( 3 / 7 ))</i></b> is true and any point in the interval where <b><i>(high_criticality_rate > ( 3 / 7 ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>1</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>1</i></b>). If the interval ends sooner than trigger+<b><i>1</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.9",
            "regular_condition_unexp_pt": "(high_criticality_rate > (3 / 7))",
            "regular_condition_unexp_ft": "(high_criticality_rate > (3 / 7))",
            "regular_condition_unexp_pctl": "(high_criticality_rate > (3 / 7))",
            "regular_condition_SMV_pt": "(high_criticality_rate > (3 / 7))",
            "regular_condition_SMV_ft": "(high_criticality_rate > (3 / 7))",
            "regular_condition_PRISM_pctl": "(high_criticality_rate > (3 / 7))",
            "post_condition_unexp_pt": "notify_doctors",
            "post_condition_unexp_ft": "notify_doctors",
            "post_condition_unexp_pctl": "notify_doctors",
            "post_condition_SMV_pt": "notify_doctors",
            "post_condition_SMV_ft": "notify_doctors",
            "post_condition_PRISM_pctl": "notify_doctors",
            "ft": "((LAST V (((! (high_criticality_rate > (3 / 7))) & ((! LAST) & (X (high_criticality_rate > (3 / 7))))) -> (X ((F[<=1] notify_doctors) | (F[<1] LAST))))) & ((high_criticality_rate > (3 / 7)) -> ((F[<=1] notify_doctors) | (F[<1] LAST))))",
            "pt": "(H ((O[=1] (((high_criticality_rate > (3 / 7)) & (Z (! (high_criticality_rate > (3 / 7))))) & (! notify_doctors))) -> (O[<1] ((Z FALSE) | notify_doctors))))",
            "pctl": "P>=1[((G (((! (high_criticality_rate > (3 / 7))) & (X (high_criticality_rate > (3 / 7)))) => (X (P>0.9[(F<=1 notify_doctors)])))) & ((high_criticality_rate > (3 / 7)) => (P>0.9[(F[<=1] notify_doctors)])))]",
            "ptExpanded": "(H ((O[1,1] (((high_criticality_rate > (3 / 7)) & (Z (! (high_criticality_rate > (3 / 7))))) & (! notify_doctors))) -> (O[0,0] ((Z FALSE) | notify_doctors))))",
            "CoCoSpecCode": "H((OT(1, 1, (((high_criticality_rate > (3 / 7)) and ZtoPre(not ((high_criticality_rate > (3 / 7))))) and not (notify_doctors))) => OT(0, 0, (ZtoPre(false) or notify_doctors))))",
            "ftExpanded": "((LAST V (((! (high_criticality_rate > (3 / 7))) & ((! LAST) & (X (high_criticality_rate > (3 / 7))))) -> (X ((F[0,1] notify_doctors) | (F[0,0] LAST))))) & ((high_criticality_rate > (3 / 7)) -> ((F[0,1] notify_doctors) | (F[0,0] LAST))))",
            "pctlExpanded": "P>=1[((G (((! (high_criticality_rate > (3 / 7))) & (X (high_criticality_rate > (3 / 7)))) => (X (P>0.9[(F<=1 notify_doctors)])))) & ((high_criticality_rate > (3 / 7)) => (P>0.9[(F[<=1] notify_doctors)])))]",
            "ftInfAUExpanded": "((G (((! (high_criticality_rate > (3 / 7))) & (X (high_criticality_rate > (3 / 7)))) -> (X (F[0,1] notify_doctors)))) & ((high_criticality_rate > (3 / 7)) -> (F[0,1] notify_doctors)))",
            "component": "TA"
        },
        "status": "",
        "_id": "7fae0483-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R49",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "\"Probability of handling a request without accessing\nthe database or file server (i.e., cache hit probability)\"\n\nP=?[!(Database & FileServer) U HttpResponse",
        "comments": "",
        "fulltext": "System shall with probability > 0.5 until HttpResponse satisfy !(Database & FileServer)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "HttpResponse",
                "Database",
                "FileServer"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "stop_condition": "(HttpResponse)",
            "timingTextRange": [
                36,
                53
            ],
            "post_condition": "(! ( Database & FileServer ))",
            "responseTextRange": [
                55,
                86
            ],
            "diagramVariables": "SC = <b><i>(HttpResponse)</i></b>, Response = <b><i>(! ( Database & FileServer ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_until_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "(! (Database & FileServer))",
            "post_condition_unexp_ft": "(! (Database & FileServer))",
            "post_condition_unexp_pctl": "(! (Database & FileServer))",
            "post_condition_SMV_pt": "(! (Database & FileServer))",
            "post_condition_SMV_ft": "(! (Database & FileServer))",
            "post_condition_PRISM_pctl": "(! (Database & FileServer))",
            "stop_condition_unexp_pt": "HttpResponse",
            "stop_condition_unexp_ft": "HttpResponse",
            "stop_condition_PRISM_pctl": "HttpResponse",
            "stop_condition_SMV_pt": "HttpResponse",
            "stop_condition_SMV_ft": "HttpResponse",
            "ft": "((HttpResponse V ((! (Database & FileServer)) | HttpResponse)) | (LAST V (! (Database & FileServer))))",
            "pt": "(H ((H (! HttpResponse)) -> (! (Database & FileServer))))",
            "pctl": "(P>0.5[((undefined R ((! (Database & FileServer)) | undefined)) | (LAST R (! (Database & FileServer))))])",
            "ptExpanded": "(H ((H (! HttpResponse)) -> (! (Database & FileServer))))",
            "CoCoSpecCode": "H((H(not (HttpResponse)) => not ((Database and FileServer))))",
            "ftExpanded": "((HttpResponse V ((! (Database & FileServer)) | HttpResponse)) | (LAST V (! (Database & FileServer))))",
            "pctlExpanded": "(P>0.5[((HttpResponse R ((! (Database & FileServer)) | HttpResponse)) | (false R (! (Database & FileServer))))])",
            "ftInfAUExpanded": "(HttpResponse V ((! (Database & FileServer)) | HttpResponse))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae0484-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R46",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "\"when the main power fails, the backup is activated\nwith 85% probability if it has finished charging and 0%\nprobability otherwise\"",
        "comments": "",
        "fulltext": "if main_power_fail & charged System shall with probability > 0.85 eventually satisfy activate_backup",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "main_power_fail",
                "charged",
                "activate_backup"
            ],
            "qualifier_word": "if",
            "pre_condition": "(main_power_fail & charged)",
            "regular_condition": "(main_power_fail & charged)",
            "conditionTextRange": [
                0,
                27
            ],
            "component_name": "System",
            "componentTextRange": [
                29,
                34
            ],
            "probability_bound": [
                ">",
                "0.85"
            ],
            "probabilityTextRange": [
                42,
                64
            ],
            "timingTextRange": [
                66,
                75
            ],
            "post_condition": "(activate_backup)",
            "responseTextRange": [
                77,
                99
            ],
            "diagramVariables": "TC = <b><i>(main_power_fail & charged)</i></b>, Response = <b><i>(activate_backup)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(main_power_fail & charged)</i></b> is true and any point in the interval where <b><i>(main_power_fail & charged)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.85",
            "regular_condition_unexp_pt": "(main_power_fail & charged)",
            "regular_condition_unexp_ft": "(main_power_fail & charged)",
            "regular_condition_unexp_pctl": "(main_power_fail & charged)",
            "regular_condition_SMV_pt": "(main_power_fail & charged)",
            "regular_condition_SMV_ft": "(main_power_fail & charged)",
            "regular_condition_PRISM_pctl": "(main_power_fail & charged)",
            "post_condition_unexp_pt": "activate_backup",
            "post_condition_unexp_ft": "activate_backup",
            "post_condition_unexp_pctl": "activate_backup",
            "post_condition_SMV_pt": "activate_backup",
            "post_condition_SMV_ft": "activate_backup",
            "post_condition_PRISM_pctl": "activate_backup",
            "ft": "((LAST V (((! (main_power_fail & charged)) & ((! LAST) & (X (main_power_fail & charged)))) -> (X ((! LAST) U activate_backup)))) & ((main_power_fail & charged) -> ((! LAST) U activate_backup)))",
            "pt": "((H (! (main_power_fail & charged))) | (! ((! activate_backup) S ((! activate_backup) & ((main_power_fail & charged) & (Z (! (main_power_fail & charged))))))))",
            "pctl": "P>=1[((G (((! (main_power_fail & charged)) & (X (main_power_fail & charged))) => (X (P>0.85[(F activate_backup)])))) & ((main_power_fail & charged) => (P>0.85[(F activate_backup)])))]",
            "ptExpanded": "((H (! (main_power_fail & charged))) | (! ((! activate_backup) S ((! activate_backup) & ((main_power_fail & charged) & (Z (! (main_power_fail & charged))))))))",
            "CoCoSpecCode": "(H(not ((main_power_fail and charged))) or not (SI(((main_power_fail and charged) and ZtoPre(not ((main_power_fail and charged)))),not (activate_backup))))",
            "ftExpanded": "((LAST V (((! (main_power_fail & charged)) & ((! LAST) & (X (main_power_fail & charged)))) -> (X ((! LAST) U activate_backup)))) & ((main_power_fail & charged) -> ((! LAST) U activate_backup)))",
            "pctlExpanded": "P>=1[((G (((! (main_power_fail & charged)) & (X (main_power_fail & charged))) => (X (P>0.85[(F activate_backup)])))) & ((main_power_fail & charged) => (P>0.85[(F activate_backup)])))]",
            "ftInfAUExpanded": "((G (((! (main_power_fail & charged)) & (X (main_power_fail & charged))) -> (X (F activate_backup)))) & ((main_power_fail & charged) -> (F activate_backup)))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae0485-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R5",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "The probability P5 of a changeDrug request being dropped due to the request queue being full during a day of operation is less than 0.05.",
        "comments": "",
        "fulltext": "System shall with probability <=0.5 within 86400 ticks satisfy dropped",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "dropped"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<=",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "duration": "86400",
            "timingTextRange": [
                36,
                53
            ],
            "post_condition": "(dropped)",
            "responseTextRange": [
                55,
                69
            ],
            "diagramVariables": " n = <b><i>86400</i></b>, Response = <b><i>(dropped)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>86400</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>86400</i></b>). If the interval ends sooner than trigger+<b><i>86400</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<=0.5",
            "post_condition_unexp_pt": "dropped",
            "post_condition_unexp_ft": "dropped",
            "post_condition_unexp_pctl": "dropped",
            "post_condition_SMV_pt": "dropped",
            "post_condition_SMV_ft": "dropped",
            "post_condition_PRISM_pctl": "dropped",
            "ft": "((F[<=86400] dropped) | (F[<86400] LAST))",
            "pt": "(H ((H (! dropped)) -> (O[<86400] (Z FALSE))))",
            "pctl": "(P<=0.5[(F<=86400 dropped)])",
            "ptExpanded": "(H ((H (! dropped)) -> (O[0,86399] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (dropped)) => OT(86399, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,86400] dropped) | (F[0,86399] LAST))",
            "pctlExpanded": "(P<=0.5[(F<=86400 dropped)])",
            "ftInfAUExpanded": "(F[0,86400] dropped)",
            "component": "System"
        },
        "status": "",
        "_id": "7fae0486-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R15",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "Probability of success shall be greater than 0.8 (the probability of eventually reaching state 16, which corresponds to the successful completion of the session  is greater than 0.8)",
        "comments": "",
        "fulltext": "System shall with probability  > 0.8 eventually satisfy s=16",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "s"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.8"
            ],
            "probabilityTextRange": [
                13,
                35
            ],
            "timingTextRange": [
                37,
                46
            ],
            "post_condition": "(s = 16)",
            "responseTextRange": [
                48,
                59
            ],
            "diagramVariables": "Response = <b><i>(s = 16)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.8",
            "post_condition_unexp_pt": "(s = 16)",
            "post_condition_unexp_ft": "(s = 16)",
            "post_condition_unexp_pctl": "(s = 16)",
            "post_condition_SMV_pt": "(s = 16)",
            "post_condition_SMV_ft": "(s = 16)",
            "post_condition_PRISM_pctl": "(s = 16)",
            "ft": "((! LAST) U (s = 16))",
            "pt": "(O (s = 16))",
            "pctl": "(P>0.8[(F (s = 16))])",
            "ptExpanded": "(O (s = 16))",
            "CoCoSpecCode": "O((s = 16))",
            "ftExpanded": "((! LAST) U (s = 16))",
            "pctlExpanded": "(P>0.8[(F (s = 16))])",
            "ftInfAUExpanded": "(F (s = 16))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae0487-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R87",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": " After the User orders the desired travel, the probability that the travel schedule will be sent to the User within 20 s is 85%.",
        "comments": "",
        "fulltext": "Upon desiredTravelOrdered system shall with probability > 0.85 within 20 seconds satisfy send_travelSchedule",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "desiredTravelOrdered",
                "send_travelSchedule"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(desiredTravelOrdered)",
            "regular_condition": "(desiredTravelOrdered)",
            "conditionTextRange": [
                0,
                24
            ],
            "component_name": "system",
            "componentTextRange": [
                26,
                31
            ],
            "probability_bound": [
                ">",
                "0.85"
            ],
            "probabilityTextRange": [
                39,
                61
            ],
            "duration": "20",
            "timingTextRange": [
                63,
                79
            ],
            "post_condition": "(send_travelSchedule)",
            "responseTextRange": [
                81,
                107
            ],
            "diagramVariables": "TC = <b><i>(desiredTravelOrdered)</i></b>,  n = <b><i>20</i></b>, Response = <b><i>(send_travelSchedule)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(desiredTravelOrdered)</i></b> is true and any point in the interval where <b><i>(desiredTravelOrdered)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>20</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>20</i></b>). If the interval ends sooner than trigger+<b><i>20</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.85",
            "regular_condition_unexp_pt": "desiredTravelOrdered",
            "regular_condition_unexp_ft": "desiredTravelOrdered",
            "regular_condition_unexp_pctl": "desiredTravelOrdered",
            "regular_condition_SMV_pt": "desiredTravelOrdered",
            "regular_condition_SMV_ft": "desiredTravelOrdered",
            "regular_condition_PRISM_pctl": "desiredTravelOrdered",
            "post_condition_unexp_pt": "send_travelSchedule",
            "post_condition_unexp_ft": "send_travelSchedule",
            "post_condition_unexp_pctl": "send_travelSchedule",
            "post_condition_SMV_pt": "send_travelSchedule",
            "post_condition_SMV_ft": "send_travelSchedule",
            "post_condition_PRISM_pctl": "send_travelSchedule",
            "ft": "((LAST V (((! desiredTravelOrdered) & ((! LAST) & (X desiredTravelOrdered))) -> (X ((F[<=20] send_travelSchedule) | (F[<20] LAST))))) & (desiredTravelOrdered -> ((F[<=20] send_travelSchedule) | (F[<20] LAST))))",
            "pt": "(H ((O[=20] ((desiredTravelOrdered & (Z (! desiredTravelOrdered))) & (! send_travelSchedule))) -> (O[<20] ((Z FALSE) | send_travelSchedule))))",
            "pctl": "P>=1[((G (((! desiredTravelOrdered) & (X desiredTravelOrdered)) => (X (P>0.85[(F<=20 send_travelSchedule)])))) & (desiredTravelOrdered => (P>0.85[(F[<=20] send_travelSchedule)])))]",
            "ptExpanded": "(H ((O[20,20] ((desiredTravelOrdered & (Z (! desiredTravelOrdered))) & (! send_travelSchedule))) -> (O[0,19] ((Z FALSE) | send_travelSchedule))))",
            "CoCoSpecCode": "H((OT(20, 20, ((desiredTravelOrdered and ZtoPre(not (desiredTravelOrdered))) and not (send_travelSchedule))) => OT(19, 0, (ZtoPre(false) or send_travelSchedule))))",
            "ftExpanded": "((LAST V (((! desiredTravelOrdered) & ((! LAST) & (X desiredTravelOrdered))) -> (X ((F[0,20] send_travelSchedule) | (F[0,19] LAST))))) & (desiredTravelOrdered -> ((F[0,20] send_travelSchedule) | (F[0,19] LAST))))",
            "pctlExpanded": "P>=1[((G (((! desiredTravelOrdered) & (X desiredTravelOrdered)) => (X (P>0.85[(F<=20 send_travelSchedule)])))) & (desiredTravelOrdered => (P>0.85[(F[<=20] send_travelSchedule)])))]",
            "ftInfAUExpanded": "((G (((! desiredTravelOrdered) & (X desiredTravelOrdered)) -> (X (F[0,20] send_travelSchedule)))) & (desiredTravelOrdered -> (F[0,20] send_travelSchedule)))",
            "component": "system"
        },
        "status": "",
        "_id": "7fae0488-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R74",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "“It is true with a probability greater than 0.95 that GFP increases until it reaches the half of its maximum concentration",
        "comments": "",
        "fulltext": "System shall with probability >0.95 until gfp = maximum/2 satisfy gfp>0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "gfp",
                "maximum"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.95"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "stop_condition": "(gfp = maximum / 2)",
            "timingTextRange": [
                36,
                56
            ],
            "post_condition": "(gfp > 0)",
            "responseTextRange": [
                58,
                70
            ],
            "diagramVariables": "SC = <b><i>(gfp = maximum / 2)</i></b>, Response = <b><i>(gfp > 0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_until_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.95",
            "post_condition_unexp_pt": "(gfp > 0)",
            "post_condition_unexp_ft": "(gfp > 0)",
            "post_condition_unexp_pctl": "(gfp > 0)",
            "post_condition_SMV_pt": "(gfp > 0)",
            "post_condition_SMV_ft": "(gfp > 0)",
            "post_condition_PRISM_pctl": "(gfp > 0)",
            "stop_condition_unexp_pt": "(gfp = (maximum / 2))",
            "stop_condition_unexp_ft": "(gfp = (maximum / 2))",
            "stop_condition_PRISM_pctl": "(gfp = (maximum / 2))",
            "stop_condition_SMV_pt": "(gfp = (maximum / 2))",
            "stop_condition_SMV_ft": "(gfp = (maximum / 2))",
            "ft": "(((gfp = (maximum / 2)) V ((gfp > 0) | (gfp = (maximum / 2)))) | (LAST V (gfp > 0)))",
            "pt": "(H ((H (! (gfp = (maximum / 2)))) -> (gfp > 0)))",
            "pctl": "(P>0.95[((undefined R ((gfp > 0) | undefined)) | (LAST R (gfp > 0)))])",
            "ptExpanded": "(H ((H (! (gfp = (maximum / 2)))) -> (gfp > 0)))",
            "CoCoSpecCode": "H((H(not ((gfp = (maximum / 2)))) => (gfp > 0)))",
            "ftExpanded": "(((gfp = (maximum / 2)) V ((gfp > 0) | (gfp = (maximum / 2)))) | (LAST V (gfp > 0)))",
            "pctlExpanded": "(P>0.95[(((gfp = (maximum / 2)) R ((gfp > 0) | (gfp = (maximum / 2)))) | (false R (gfp > 0)))])",
            "ftInfAUExpanded": "((gfp = (maximum / 2)) V ((gfp > 0) | (gfp = (maximum / 2))))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae0489-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R112",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "the probability that a service is offline per 24 hours should be less than 2 percent",
        "comments": "",
        "fulltext": "service shall with probability <0.02 for 24 hours satisfy offline",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "for",
            "response": "satisfaction",
            "variables": [
                "offline"
            ],
            "component_name": "service",
            "componentTextRange": [
                0,
                6
            ],
            "probability_bound": [
                "<",
                "0.02"
            ],
            "probabilityTextRange": [
                14,
                35
            ],
            "duration": "24",
            "timingTextRange": [
                37,
                48
            ],
            "post_condition": "(offline)",
            "responseTextRange": [
                50,
                64
            ],
            "diagramVariables": " n = <b><i>24</i></b>, Response = <b><i>(offline)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the trigger and remain true for <b><i>24</i></b> time points past the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>24</i></b>), or to the end of the interval if the interval ends sooner than trigger+<b><i>24</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_for_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.02",
            "post_condition_unexp_pt": "offline",
            "post_condition_unexp_ft": "offline",
            "post_condition_unexp_pctl": "offline",
            "post_condition_SMV_pt": "offline",
            "post_condition_SMV_ft": "offline",
            "post_condition_PRISM_pctl": "offline",
            "ft": "((G[<=24] offline) | (LAST V offline))",
            "pt": "(H ((O[<=24] (Z FALSE)) -> offline))",
            "pctl": "(P<0.02[(G<=24 offline)])",
            "ptExpanded": "(H ((O[0,24] (Z FALSE)) -> offline))",
            "CoCoSpecCode": "H((OT(24, 0, ZtoPre(false)) => offline))",
            "ftExpanded": "((G[0,24] offline) | (LAST V offline))",
            "pctlExpanded": "(P<0.02[(G<=24 offline)])",
            "ftInfAUExpanded": "((G[0,24] offline) | (G offline))",
            "component": "service"
        },
        "status": "",
        "_id": "7fae048a-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R24a",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "browseCatalog (class A, denoted with a star symbol in Fig. 9) invoked with a probability of 99 %, and makePurchase (class B, denoted with a bullet point in Fig. 9) is invoked with a probability of 1 %.",
        "comments": "",
        "fulltext": "System shall with probability >=0.99 eventually satisfy invokeBrowseCatalog",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "invokeBrowseCatalog"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">=",
                "0.99"
            ],
            "probabilityTextRange": [
                13,
                35
            ],
            "timingTextRange": [
                37,
                46
            ],
            "post_condition": "(invokeBrowseCatalog)",
            "responseTextRange": [
                48,
                74
            ],
            "diagramVariables": "Response = <b><i>(invokeBrowseCatalog)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.99",
            "post_condition_unexp_pt": "invokeBrowseCatalog",
            "post_condition_unexp_ft": "invokeBrowseCatalog",
            "post_condition_unexp_pctl": "invokeBrowseCatalog",
            "post_condition_SMV_pt": "invokeBrowseCatalog",
            "post_condition_SMV_ft": "invokeBrowseCatalog",
            "post_condition_PRISM_pctl": "invokeBrowseCatalog",
            "ft": "((! LAST) U invokeBrowseCatalog)",
            "pt": "(O invokeBrowseCatalog)",
            "pctl": "(P>=0.99[(F invokeBrowseCatalog)])",
            "ptExpanded": "(O invokeBrowseCatalog)",
            "CoCoSpecCode": "O(invokeBrowseCatalog)",
            "ftExpanded": "((! LAST) U invokeBrowseCatalog)",
            "pctlExpanded": "(P>=0.99[(F invokeBrowseCatalog)])",
            "ftInfAUExpanded": "(F invokeBrowseCatalog)",
            "component": "System"
        },
        "status": "",
        "_id": "7fae048b-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R140a",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "computing the probability with which certain nodes (e.g., nodes 1 and 2) receive the broadcast message\n\nP=?[ true U (active1=0) ] and P=?[ true U (active2=0) ]",
        "comments": "",
        "fulltext": "System shall with probability > 0.5 eventually satisfy active1 = 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "active1"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "timingTextRange": [
                36,
                45
            ],
            "post_condition": "(active1 = 0)",
            "responseTextRange": [
                47,
                65
            ],
            "diagramVariables": "Response = <b><i>(active1 = 0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "(active1 = 0)",
            "post_condition_unexp_ft": "(active1 = 0)",
            "post_condition_unexp_pctl": "(active1 = 0)",
            "post_condition_SMV_pt": "(active1 = 0)",
            "post_condition_SMV_ft": "(active1 = 0)",
            "post_condition_PRISM_pctl": "(active1 = 0)",
            "ft": "((! LAST) U (active1 = 0))",
            "pt": "(O (active1 = 0))",
            "pctl": "(P>0.5[(F (active1 = 0))])",
            "ptExpanded": "(O (active1 = 0))",
            "CoCoSpecCode": "O((active1 = 0))",
            "ftExpanded": "((! LAST) U (active1 = 0))",
            "pctlExpanded": "(P>0.5[(F (active1 = 0))])",
            "ftInfAUExpanded": "(F (active1 = 0))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae048c-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R43",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": " due to unbounded PDF supports, mutual exclusion can be violated with probability greater than zero",
        "comments": "",
        "fulltext": "System shall with probability >0 eventually satisfy violateMutualExclusion",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "violateMutualExclusion"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0"
            ],
            "probabilityTextRange": [
                13,
                31
            ],
            "timingTextRange": [
                33,
                42
            ],
            "post_condition": "(violateMutualExclusion)",
            "responseTextRange": [
                44,
                73
            ],
            "diagramVariables": "Response = <b><i>(violateMutualExclusion)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0",
            "post_condition_unexp_pt": "violateMutualExclusion",
            "post_condition_unexp_ft": "violateMutualExclusion",
            "post_condition_unexp_pctl": "violateMutualExclusion",
            "post_condition_SMV_pt": "violateMutualExclusion",
            "post_condition_SMV_ft": "violateMutualExclusion",
            "post_condition_PRISM_pctl": "violateMutualExclusion",
            "ft": "((! LAST) U violateMutualExclusion)",
            "pt": "(O violateMutualExclusion)",
            "pctl": "(P>0[(F violateMutualExclusion)])",
            "ptExpanded": "(O violateMutualExclusion)",
            "CoCoSpecCode": "O(violateMutualExclusion)",
            "ftExpanded": "((! LAST) U violateMutualExclusion)",
            "pctlExpanded": "(P>0[(F violateMutualExclusion)])",
            "ftInfAUExpanded": "(F violateMutualExclusion)",
            "component": "System"
        },
        "status": "",
        "_id": "7fae048d-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R105",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "The robot eventually grabs food with a probability greater than 0.9  (s=3 will eventually hold, until then true holds with a probability >0.9)",
        "comments": "",
        "fulltext": "robot shall with probability > 0.9 eventually satisfy s=3",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "s"
            ],
            "component_name": "robot",
            "componentTextRange": [
                0,
                4
            ],
            "probability_bound": [
                ">",
                "0.9"
            ],
            "probabilityTextRange": [
                12,
                33
            ],
            "timingTextRange": [
                35,
                44
            ],
            "post_condition": "(s = 3)",
            "responseTextRange": [
                46,
                56
            ],
            "diagramVariables": "Response = <b><i>(s = 3)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.9",
            "post_condition_unexp_pt": "(s = 3)",
            "post_condition_unexp_ft": "(s = 3)",
            "post_condition_unexp_pctl": "(s = 3)",
            "post_condition_SMV_pt": "(s = 3)",
            "post_condition_SMV_ft": "(s = 3)",
            "post_condition_PRISM_pctl": "(s = 3)",
            "ft": "((! LAST) U (s = 3))",
            "pt": "(O (s = 3))",
            "pctl": "(P>0.9[(F (s = 3))])",
            "ptExpanded": "(O (s = 3))",
            "CoCoSpecCode": "O((s = 3))",
            "ftExpanded": "((! LAST) U (s = 3))",
            "pctlExpanded": "(P>0.9[(F (s = 3))])",
            "ftInfAUExpanded": "(F (s = 3))",
            "component": "robot"
        },
        "status": "",
        "_id": "7fae048e-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R22",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "{}P =?[(F sales anncs) & (!(F renting anncs))]",
        "comments": "",
        "fulltext": "System shall with probability >0.95 eventually satisfy sales_anncs & !(Future(renting_anncs))",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "sales_anncs",
                "Future",
                "renting_anncs"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.95"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "timingTextRange": [
                36,
                45
            ],
            "post_condition": "(sales_anncs & ! ( Future ( renting_anncs ) ))",
            "responseTextRange": [
                47,
                92
            ],
            "diagramVariables": "Response = <b><i>(sales_anncs & ! ( Future ( renting_anncs ) ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.95",
            "post_condition_unexp_pt": "(sales_anncs & (! (F renting_anncs)))",
            "post_condition_unexp_ft": "(sales_anncs & (! (F renting_anncs)))",
            "post_condition_unexp_pctl": "(sales_anncs & (! (F renting_anncs)))",
            "post_condition_SMV_pt": "(sales_anncs & (! (F renting_anncs)))",
            "post_condition_SMV_ft": "(sales_anncs & (! (F renting_anncs)))",
            "post_condition_PRISM_pctl": "(sales_anncs & (! (F renting_anncs)))",
            "ft": "((! LAST) U (sales_anncs & (! (F renting_anncs))))",
            "pt": "(O (sales_anncs & (! (F renting_anncs))))",
            "pctl": "(P>0.95[(F (sales_anncs & (! (F renting_anncs))))])",
            "ptExpanded": "(O (sales_anncs & (! (F renting_anncs))))",
            "CoCoSpecCode": "O((sales_anncs and not (Future(renting_anncs))))",
            "ftExpanded": "((! LAST) U (sales_anncs & (! (F renting_anncs))))",
            "pctlExpanded": "(P>0.95[(F (sales_anncs & (! (F renting_anncs))))])",
            "ftInfAUExpanded": "(F (sales_anncs & (! (F renting_anncs))))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae048f-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R118",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "If a PM person expresses positive sentiments, what is the probability that it leads to positive sentiment expressed by a non-PM person",
        "comments": "",
        "fulltext": "upon PMexpressingPositiveSentiments System shall with probability > 0.5 eventually satisfy NonPMExpressingPositiveSentiment",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "PMexpressingPositiveSentiments",
                "NonPMExpressingPositiveSentiment"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(PMexpressingPositiveSentiments)",
            "regular_condition": "(PMexpressingPositiveSentiments)",
            "conditionTextRange": [
                0,
                34
            ],
            "component_name": "System",
            "componentTextRange": [
                36,
                41
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                49,
                70
            ],
            "timingTextRange": [
                72,
                81
            ],
            "post_condition": "(NonPMExpressingPositiveSentiment)",
            "responseTextRange": [
                83,
                122
            ],
            "diagramVariables": "TC = <b><i>(PMexpressingPositiveSentiments)</i></b>, Response = <b><i>(NonPMExpressingPositiveSentiment)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(PMexpressingPositiveSentiments)</i></b> is true and any point in the interval where <b><i>(PMexpressingPositiveSentiments)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "regular_condition_unexp_pt": "PMexpressingPositiveSentiments",
            "regular_condition_unexp_ft": "PMexpressingPositiveSentiments",
            "regular_condition_unexp_pctl": "PMexpressingPositiveSentiments",
            "regular_condition_SMV_pt": "PMexpressingPositiveSentiments",
            "regular_condition_SMV_ft": "PMexpressingPositiveSentiments",
            "regular_condition_PRISM_pctl": "PMexpressingPositiveSentiments",
            "post_condition_unexp_pt": "NonPMExpressingPositiveSentiment",
            "post_condition_unexp_ft": "NonPMExpressingPositiveSentiment",
            "post_condition_unexp_pctl": "NonPMExpressingPositiveSentiment",
            "post_condition_SMV_pt": "NonPMExpressingPositiveSentiment",
            "post_condition_SMV_ft": "NonPMExpressingPositiveSentiment",
            "post_condition_PRISM_pctl": "NonPMExpressingPositiveSentiment",
            "ft": "((LAST V (((! PMexpressingPositiveSentiments) & ((! LAST) & (X PMexpressingPositiveSentiments))) -> (X ((! LAST) U NonPMExpressingPositiveSentiment)))) & (PMexpressingPositiveSentiments -> ((! LAST) U NonPMExpressingPositiveSentiment)))",
            "pt": "((H (! PMexpressingPositiveSentiments)) | (! ((! NonPMExpressingPositiveSentiment) S ((! NonPMExpressingPositiveSentiment) & (PMexpressingPositiveSentiments & (Z (! PMexpressingPositiveSentiments)))))))",
            "pctl": "P>=1[((G (((! PMexpressingPositiveSentiments) & (X PMexpressingPositiveSentiments)) => (X (P>0.5[(F NonPMExpressingPositiveSentiment)])))) & (PMexpressingPositiveSentiments => (P>0.5[(F NonPMExpressingPositiveSentiment)])))]",
            "ptExpanded": "((H (! PMexpressingPositiveSentiments)) | (! ((! NonPMExpressingPositiveSentiment) S ((! NonPMExpressingPositiveSentiment) & (PMexpressingPositiveSentiments & (Z (! PMexpressingPositiveSentiments)))))))",
            "CoCoSpecCode": "(H(not (PMexpressingPositiveSentiments)) or not (SI((PMexpressingPositiveSentiments and ZtoPre(not (PMexpressingPositiveSentiments))),not (NonPMExpressingPositiveSentiment))))",
            "ftExpanded": "((LAST V (((! PMexpressingPositiveSentiments) & ((! LAST) & (X PMexpressingPositiveSentiments))) -> (X ((! LAST) U NonPMExpressingPositiveSentiment)))) & (PMexpressingPositiveSentiments -> ((! LAST) U NonPMExpressingPositiveSentiment)))",
            "pctlExpanded": "P>=1[((G (((! PMexpressingPositiveSentiments) & (X PMexpressingPositiveSentiments)) => (X (P>0.5[(F NonPMExpressingPositiveSentiment)])))) & (PMexpressingPositiveSentiments => (P>0.5[(F NonPMExpressingPositiveSentiment)])))]",
            "ftInfAUExpanded": "((G (((! PMexpressingPositiveSentiments) & (X PMexpressingPositiveSentiments)) -> (X (F NonPMExpressingPositiveSentiment)))) & (PMexpressingPositiveSentiments -> (F NonPMExpressingPositiveSentiment)))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae0490-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R64",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "P<0.167(true U[0,50] timeout)",
        "comments": "",
        "fulltext": "System shall with probability < 0.167 within 50 ticks satisfy timeout",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "timeout"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<",
                "0.167"
            ],
            "probabilityTextRange": [
                13,
                36
            ],
            "duration": "50",
            "timingTextRange": [
                38,
                52
            ],
            "post_condition": "(timeout)",
            "responseTextRange": [
                54,
                68
            ],
            "diagramVariables": " n = <b><i>50</i></b>, Response = <b><i>(timeout)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>50</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>50</i></b>). If the interval ends sooner than trigger+<b><i>50</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.167",
            "post_condition_unexp_pt": "timeout",
            "post_condition_unexp_ft": "timeout",
            "post_condition_unexp_pctl": "timeout",
            "post_condition_SMV_pt": "timeout",
            "post_condition_SMV_ft": "timeout",
            "post_condition_PRISM_pctl": "timeout",
            "ft": "((F[<=50] timeout) | (F[<50] LAST))",
            "pt": "(H ((H (! timeout)) -> (O[<50] (Z FALSE))))",
            "pctl": "(P<0.167[(F<=50 timeout)])",
            "ptExpanded": "(H ((H (! timeout)) -> (O[0,49] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (timeout)) => OT(49, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,50] timeout) | (F[0,49] LAST))",
            "pctlExpanded": "(P<0.167[(F<=50 timeout)])",
            "ftInfAUExpanded": "(F[0,50] timeout)",
            "component": "System"
        },
        "status": "",
        "_id": "7fae0491-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R123",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "If the forward vehicle V1 is stationary and the trailing vehicle V2 is traveling at 100km/hr, there is 7.3s before V2 must stop to avoid colliding with V1, it would depend on the V2V device receiving the message in time to warn the driver and the driver in V2 acting upon that warning immediately – with a probability of 0.99",
        "comments": "",
        "fulltext": "if v1=stationary & v2_speed =100 V2 shall with probability > 0.99 after 7.3 seconds satisfy stop",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "after",
            "response": "satisfaction",
            "variables": [
                "v1",
                "stationary",
                "v2_speed",
                "stop"
            ],
            "qualifier_word": "if",
            "pre_condition": "(v1 = stationary & v2_speed = 100)",
            "regular_condition": "(v1 = stationary & v2_speed = 100)",
            "conditionTextRange": [
                0,
                31
            ],
            "component_name": "V2",
            "componentTextRange": [
                33,
                34
            ],
            "probability_bound": [
                ">",
                "0.99"
            ],
            "probabilityTextRange": [
                42,
                64
            ],
            "duration": "7.3",
            "timingTextRange": [
                66,
                82
            ],
            "post_condition": "(stop)",
            "responseTextRange": [
                84,
                95
            ],
            "diagramVariables": "TC = <b><i>(v1 = stationary & v2_speed = 100)</i></b>,  n = <b><i>7.3</i></b>, Response = <b><i>(stop)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(v1 = stationary & v2_speed = 100)</i></b> is true and any point in the interval where <b><i>(v1 = stationary & v2_speed = 100)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must be false at all time points with distance <=<b><i>7.3</i></b> from the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>7.3</i></b>). Moreover, RES must hold at the point that is at distance <b><i>7.3</i></b>+1 from the trigger, that is, trigger+<b><i>7.3</i></b>+1, except if the end of the interval occurs earlier.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_after_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.99",
            "regular_condition_unexp_pt": "((v1 = stationary) & (v2_speed = 100))",
            "regular_condition_unexp_ft": "((v1 = stationary) & (v2_speed = 100))",
            "regular_condition_unexp_pctl": "((v1 = stationary) & (v2_speed = 100))",
            "regular_condition_SMV_pt": "((v1 = stationary) & (v2_speed = 100))",
            "regular_condition_SMV_ft": "((v1 = stationary) & (v2_speed = 100))",
            "regular_condition_PRISM_pctl": "((v1 = stationary) & (v2_speed = 100))",
            "post_condition_unexp_pt": "stop",
            "post_condition_unexp_ft": "stop",
            "post_condition_unexp_pctl": "stop",
            "post_condition_SMV_pt": "stop",
            "post_condition_SMV_ft": "stop",
            "post_condition_PRISM_pctl": "stop",
            "ft": "((LAST V (((! ((v1 = stationary) & (v2_speed = 100))) & ((! LAST) & (X ((v1 = stationary) & (v2_speed = 100))))) -> (X (((G[<=7.3] (! stop)) | (LAST V (! stop))) & ((F[<=7.3+1] stop) | (F[<7.3+1] LAST)))))) & (((v1 = stationary) & (v2_speed = 100)) -> (((G[<=7.3] (! stop)) | (LAST V (! stop))) & ((F[<=7.3+1] stop) | (F[<7.3+1] LAST)))))",
            "pt": "((H ((O[<=7.3] (((v1 = stationary) & (v2_speed = 100)) & (Z (! ((v1 = stationary) & (v2_speed = 100)))))) -> ((H (! ((v1 = stationary) & (v2_speed = 100)))) | (! stop)))) & (H ((O[=7.3+1] ((((v1 = stationary) & (v2_speed = 100)) & (Z (! ((v1 = stationary) & (v2_speed = 100))))) & (! stop))) -> (O[<7.3+1] ((Z FALSE) | stop)))))",
            "pctl": "P>=1[((G (((! ((v1 = stationary) & (v2_speed = 100))) & (X ((v1 = stationary) & (v2_speed = 100)))) => (X (P>0.99[((G<=7.3 (! stop)) & (F<=(7.3+1) stop))])))) & (((v1 = stationary) & (v2_speed = 100)) => (P>0.99[((G[<=7.3] (! stop)) & (F[<=7.3+1] stop))])))]",
            "ptExpanded": "((H ((O[<=7.3] (((v1 = stationary) & (v2_speed = 100)) & (Z (! ((v1 = stationary) & (v2_speed = 100)))))) -> ((H (! ((v1 = stationary) & (v2_speed = 100)))) | (! stop)))) & (H ((O[=7.3+1] ((((v1 = stationary) & (v2_speed = 100)) & (Z (! ((v1 = stationary) & (v2_speed = 100))))) & (! stop))) -> (O[<7.3+1] ((Z FALSE) | stop)))))",
            "CoCoSpecCode": "(H((OT(7.3, LessThanOrEqual, (((v1 = stationary) and (v2_speed = 100)) and ZtoPre(not (((v1 = stationary) and (v2_speed = 100)))))) => (H(not (((v1 = stationary) and (v2_speed = 100)))) or not (stop)))) and H((OT(Plus,7.3,1, Equal, ((((v1 = stationary) and (v2_speed = 100)) and ZtoPre(not (((v1 = stationary) and (v2_speed = 100))))) and not (stop))) => OT(Plus,7.3,1, LessThan, (ZtoPre(false) or stop)))))",
            "ftExpanded": "((LAST V (((! ((v1 = stationary) & (v2_speed = 100))) & ((! LAST) & (X ((v1 = stationary) & (v2_speed = 100))))) -> (X (((G[<=7.3] (! stop)) | (LAST V (! stop))) & ((F[<=7.3+1] stop) | (F[<7.3+1] LAST)))))) & (((v1 = stationary) & (v2_speed = 100)) -> (((G[<=7.3] (! stop)) | (LAST V (! stop))) & ((F[<=7.3+1] stop) | (F[<7.3+1] LAST)))))",
            "pctlExpanded": "P>=1[((G (((! ((v1 = stationary) & (v2_speed = 100))) & (X ((v1 = stationary) & (v2_speed = 100)))) => (X (P>0.99[((G<=7.3 (! stop)) & (F<=(7.3+1) stop))])))) & (((v1 = stationary) & (v2_speed = 100)) => (P>0.99[((G[<=7.3] (! stop)) & (F[<=7.3+1] stop))])))]",
            "ftInfAUExpanded": "((G (((! ((v1 = stationary) & (v2_speed = 100))) & (X ((v1 = stationary) & (v2_speed = 100)))) -> (X (((G[<=7.3] (! stop)) | (G (! stop))) & (F[<=7.3+1] stop))))) & (((v1 = stationary) & (v2_speed = 100)) -> (((G[<=7.3] (! stop)) | (G (! stop))) & (F[<=7.3+1] stop))))",
            "component": "V2"
        },
        "status": "",
        "_id": "7fae0492-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R41",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "“The probability for a request of dynamic content of experiencing a cache miss is less than 0.25\n\nP≤0.25(true U s = 6) in s = 1",
        "comments": "",
        "fulltext": "System shall with probability <= 0.25 eventually satisfy s=6",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "s"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<=",
                "0.25"
            ],
            "probabilityTextRange": [
                13,
                36
            ],
            "timingTextRange": [
                38,
                47
            ],
            "post_condition": "(s = 6)",
            "responseTextRange": [
                49,
                59
            ],
            "diagramVariables": "Response = <b><i>(s = 6)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<=0.25",
            "post_condition_unexp_pt": "(s = 6)",
            "post_condition_unexp_ft": "(s = 6)",
            "post_condition_unexp_pctl": "(s = 6)",
            "post_condition_SMV_pt": "(s = 6)",
            "post_condition_SMV_ft": "(s = 6)",
            "post_condition_PRISM_pctl": "(s = 6)",
            "ft": "((! LAST) U (s = 6))",
            "pt": "(O (s = 6))",
            "pctl": "(P<=0.25[(F (s = 6))])",
            "ptExpanded": "(O (s = 6))",
            "CoCoSpecCode": "O((s = 6))",
            "ftExpanded": "((! LAST) U (s = 6))",
            "pctlExpanded": "(P<=0.25[(F (s = 6))])",
            "ftInfAUExpanded": "(F (s = 6))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae0493-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R13a",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "if a road toll gantry fails to detect a RFID signal from a passing vehicle then a camera takes a picture of the vehicle number plate 99.5% of the time and a record of an unpaid vehicle is created 99.99% of the time unless the roadside system is down.",
        "comments": "",
        "fulltext": "whenever detectionFailed Camera shall with probability >= 0.995 at the next timepoint satisfy takePicture ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "bound",
            "timing": "next",
            "response": "satisfaction",
            "variables": [
                "detectionFailed",
                "takePicture"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(detectionFailed)",
            "regular_condition": "(detectionFailed)",
            "conditionTextRange": [
                0,
                23
            ],
            "component_name": "Camera",
            "componentTextRange": [
                25,
                30
            ],
            "probability_bound": [
                ">=",
                "0.995"
            ],
            "probabilityTextRange": [
                38,
                62
            ],
            "timingTextRange": [
                64,
                84
            ],
            "post_condition": "(takePicture)",
            "responseTextRange": [
                86,
                104
            ],
            "diagramVariables": "CC = <b><i>(detectionFailed)</i></b>, Response = <b><i>(takePicture)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(detectionFailed)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_next_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.995",
            "regular_condition_unexp_pt": "detectionFailed",
            "regular_condition_unexp_ft": "detectionFailed",
            "regular_condition_unexp_pctl": "detectionFailed",
            "regular_condition_SMV_pt": "detectionFailed",
            "regular_condition_SMV_ft": "detectionFailed",
            "regular_condition_PRISM_pctl": "detectionFailed",
            "post_condition_unexp_pt": "takePicture",
            "post_condition_unexp_ft": "takePicture",
            "post_condition_unexp_pctl": "takePicture",
            "post_condition_SMV_pt": "takePicture",
            "post_condition_SMV_ft": "takePicture",
            "post_condition_PRISM_pctl": "takePicture",
            "ft": "(LAST V (detectionFailed -> (LAST | (X takePicture))))",
            "pt": "(H ((Y detectionFailed) -> (takePicture | (Z FALSE))))",
            "pctl": "P>=1[(G (detectionFailed => (P>=0.995[(LAST | (X takePicture))])))]",
            "ptExpanded": "(H ((Y detectionFailed) -> (takePicture | (Z FALSE))))",
            "CoCoSpecCode": "H((YtoPre(detectionFailed) => (takePicture or ZtoPre(false))))",
            "ftExpanded": "(LAST V (detectionFailed -> (LAST | (X takePicture))))",
            "pctlExpanded": "P>=1[(G (detectionFailed => (P>=0.995[(false | (X takePicture))])))]",
            "ftInfAUExpanded": "(G (detectionFailed -> (X takePicture)))",
            "component": "Camera"
        },
        "status": "",
        "_id": "7fae0494-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R91",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "the probability of the airbag being deployed, during the mission time T, when there is no crash situation\n\n P=?[(true)U <=T (inadvertent deployment)]",
        "comments": "",
        "fulltext": "during mission_time system shall with probability > 0.5 eventually satisfy inadvertent_deloyment",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "mission_time",
                "inadvertent_deloyment"
            ],
            "scope_mode": "mission_time",
            "scopeTextRange": [
                0,
                18
            ],
            "component_name": "system",
            "componentTextRange": [
                20,
                25
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                33,
                54
            ],
            "timingTextRange": [
                56,
                65
            ],
            "post_condition": "(inadvertent_deloyment)",
            "responseTextRange": [
                67,
                95
            ],
            "diagramVariables": "M = <b><i>mission_time</i></b>, Response = <b><i>(inadvertent_deloyment)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>mission_time</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_eventually_satisfaction.svg",
            "scope_mode_pt": "mission_time",
            "scope_mode_ft": "mission_time",
            "scope_mode_pctl": "mission_time",
            "bound": ">0.5",
            "post_condition_unexp_pt": "inadvertent_deloyment",
            "post_condition_unexp_ft": "inadvertent_deloyment",
            "post_condition_unexp_pctl": "inadvertent_deloyment",
            "post_condition_SMV_pt": "inadvertent_deloyment",
            "post_condition_SMV_ft": "inadvertent_deloyment",
            "post_condition_PRISM_pctl": "inadvertent_deloyment",
            "ft": "((LAST V ((! (Fin_mission_time & (! LAST))) | (X ((! (Lin_mission_time | LAST)) U inadvertent_deloyment)))) & (mission_time -> ((! (Lin_mission_time | LAST)) U inadvertent_deloyment)))",
            "pt": "((H (Lin_mission_time -> (Y (! ((! inadvertent_deloyment) S ((! inadvertent_deloyment) & Fin_mission_time)))))) & (((! Lin_mission_time) S ((! Lin_mission_time) & Fin_mission_time)) -> (! ((! inadvertent_deloyment) S ((! inadvertent_deloyment) & Fin_mission_time)))))",
            "pctl": "P>=1[((G ((! (Fin_mission_time & (! LAST))) | (X (P>0.5[((! Lin_mission_time) U inadvertent_deloyment)])))) & (mission_time => (Lin_mission_time | (P>0.5[((! Lin_mission_time) U inadvertent_deloyment)]))))]",
            "ptExpanded": "((H (((! mission_time) & (Y mission_time)) -> (Y (! ((! inadvertent_deloyment) S ((! inadvertent_deloyment) & (mission_time & (Z (! mission_time))))))))) & (((! ((! mission_time) & (Y mission_time))) S ((! ((! mission_time) & (Y mission_time))) & (mission_time & (Z (! mission_time))))) -> (! ((! inadvertent_deloyment) S ((! inadvertent_deloyment) & (mission_time & (Z (! mission_time))))))))",
            "CoCoSpecCode": "(H(((not (mission_time) and YtoPre(mission_time)) => YtoPre(not (SI((mission_time and ZtoPre(not (mission_time))),not (inadvertent_deloyment)))))) and (SI((mission_time and ZtoPre(not (mission_time))),not ((not (mission_time) and YtoPre(mission_time)))) => not (SI((mission_time and ZtoPre(not (mission_time))),not (inadvertent_deloyment)))))",
            "ftExpanded": "((LAST V ((! ((((! mission_time) & (! LAST)) & (X mission_time)) & (! LAST))) | (X ((! (((mission_time & (! LAST)) & (X (! mission_time))) | LAST)) U inadvertent_deloyment)))) & (mission_time -> ((! (((mission_time & (! LAST)) & (X (! mission_time))) | LAST)) U inadvertent_deloyment)))",
            "pctlExpanded": "P>=1[((G ((! (((! mission_time) & (X mission_time)) & (! false))) | (X (P>0.5[((! (mission_time & (X (! mission_time)))) U inadvertent_deloyment)])))) & (mission_time => ((mission_time & (X (! mission_time))) | (P>0.5[((! (mission_time & (X (! mission_time)))) U inadvertent_deloyment)]))))]",
            "ftInfAUExpanded": "((G ((! ((! mission_time) & (X mission_time))) | (X ((! (mission_time & (X (! mission_time)))) U inadvertent_deloyment)))) & (mission_time -> ((! (mission_time & (X (! mission_time)))) U inadvertent_deloyment)))",
            "component": "system"
        },
        "status": "",
        "_id": "7fae0495-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R71",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "What is the probability that the monomer is at level i at time T ",
        "comments": "",
        "fulltext": "System shall with probability >0.5 after 10 ticks satisfy monomer_level = i",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "after",
            "response": "satisfaction",
            "variables": [
                "monomer_level",
                "i"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                33
            ],
            "duration": "10",
            "timingTextRange": [
                35,
                48
            ],
            "post_condition": "(monomer_level = i)",
            "responseTextRange": [
                50,
                74
            ],
            "diagramVariables": " n = <b><i>10</i></b>, Response = <b><i>(monomer_level = i)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must be false at all time points with distance <=<b><i>10</i></b> from the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>10</i></b>). Moreover, RES must hold at the point that is at distance <b><i>10</i></b>+1 from the trigger, that is, trigger+<b><i>10</i></b>+1, except if the end of the interval occurs earlier.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_after_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "(monomer_level = i)",
            "post_condition_unexp_ft": "(monomer_level = i)",
            "post_condition_unexp_pctl": "(monomer_level = i)",
            "post_condition_SMV_pt": "(monomer_level = i)",
            "post_condition_SMV_ft": "(monomer_level = i)",
            "post_condition_PRISM_pctl": "(monomer_level = i)",
            "ft": "(((G[<=10] (! (monomer_level = i))) | (LAST V (! (monomer_level = i)))) & ((F[<=10+1] (monomer_level = i)) | (F[<10+1] LAST)))",
            "pt": "((H ((O[<=10] (Z FALSE)) -> (! (monomer_level = i)))) & (H ((H (! (monomer_level = i))) -> (O[<10+1] (Z FALSE)))))",
            "pctl": "(P>0.5[((G<=10 (! (monomer_level = i))) & (F<=(10+1) (monomer_level = i)))])",
            "ptExpanded": "((H ((O[0,10] (Z FALSE)) -> (! (monomer_level = i)))) & (H ((H (! (monomer_level = i))) -> (O[0,10] (Z FALSE)))))",
            "CoCoSpecCode": "(H((OT(10, 0, ZtoPre(false)) => not ((monomer_level = i)))) and H((H(not ((monomer_level = i))) => OT(10, 0, ZtoPre(false)))))",
            "ftExpanded": "(((G[0,10] (! (monomer_level = i))) | (LAST V (! (monomer_level = i)))) & ((F[0,11] (monomer_level = i)) | (F[0,10] LAST)))",
            "pctlExpanded": "(P>0.5[((G<=10 (! (monomer_level = i))) & (F<=(10+1) (monomer_level = i)))])",
            "ftInfAUExpanded": "(((G[0,10] (! (monomer_level = i))) | (G (! (monomer_level = i)))) & (F[0,11] (monomer_level = i)))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae0496-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R148",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "the probability that the service responds after 10s is 70% of calls.",
        "comments": "",
        "fulltext": "Upon call Service shall with probability > 0.70 within 10 seconds satisfy response",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "call",
                "response"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(call)",
            "regular_condition": "(call)",
            "conditionTextRange": [
                0,
                8
            ],
            "component_name": "Service",
            "componentTextRange": [
                10,
                16
            ],
            "probability_bound": [
                ">",
                "0.70"
            ],
            "probabilityTextRange": [
                24,
                46
            ],
            "duration": "10",
            "timingTextRange": [
                48,
                64
            ],
            "post_condition": "(response)",
            "responseTextRange": [
                66,
                81
            ],
            "diagramVariables": "TC = <b><i>(call)</i></b>,  n = <b><i>10</i></b>, Response = <b><i>(response)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(call)</i></b> is true and any point in the interval where <b><i>(call)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.70",
            "regular_condition_unexp_pt": "call",
            "regular_condition_unexp_ft": "call",
            "regular_condition_unexp_pctl": "call",
            "regular_condition_SMV_pt": "call",
            "regular_condition_SMV_ft": "call",
            "regular_condition_PRISM_pctl": "call",
            "post_condition_unexp_pt": "response",
            "post_condition_unexp_ft": "response",
            "post_condition_unexp_pctl": "response",
            "post_condition_SMV_pt": "response",
            "post_condition_SMV_ft": "response",
            "post_condition_PRISM_pctl": "response",
            "ft": "((LAST V (((! call) & ((! LAST) & (X call))) -> (X ((F[<=10] response) | (F[<10] LAST))))) & (call -> ((F[<=10] response) | (F[<10] LAST))))",
            "pt": "(H ((O[=10] ((call & (Z (! call))) & (! response))) -> (O[<10] ((Z FALSE) | response))))",
            "pctl": "P>=1[((G (((! call) & (X call)) => (X (P>0.70[(F<=10 response)])))) & (call => (P>0.70[(F[<=10] response)])))]",
            "ptExpanded": "(H ((O[10,10] ((call & (Z (! call))) & (! response))) -> (O[0,9] ((Z FALSE) | response))))",
            "CoCoSpecCode": "H((OT(10, 10, ((call and ZtoPre(not (call))) and not (response))) => OT(9, 0, (ZtoPre(false) or response))))",
            "ftExpanded": "((LAST V (((! call) & ((! LAST) & (X call))) -> (X ((F[0,10] response) | (F[0,9] LAST))))) & (call -> ((F[0,10] response) | (F[0,9] LAST))))",
            "pctlExpanded": "P>=1[((G (((! call) & (X call)) => (X (P>0.70[(F<=10 response)])))) & (call => (P>0.70[(F[<=10] response)])))]",
            "ftInfAUExpanded": "((G (((! call) & (X call)) -> (X (F[0,10] response)))) & (call -> (F[0,10] response)))",
            "component": "Service"
        },
        "status": "",
        "_id": "7fae0497-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R171",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "Until the concentration of the promoter x is greater than 0.5, the probability of expressing the gene x is less than 0.01",
        "comments": "",
        "fulltext": "System shall with probability > 0.01 until x>0.5 satisfy express_gene",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "x",
                "express_gene"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.01"
            ],
            "probabilityTextRange": [
                13,
                35
            ],
            "stop_condition": "(x > 0.5)",
            "timingTextRange": [
                37,
                47
            ],
            "post_condition": "(express_gene)",
            "responseTextRange": [
                49,
                68
            ],
            "diagramVariables": "SC = <b><i>(x > 0.5)</i></b>, Response = <b><i>(express_gene)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_until_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.01",
            "post_condition_unexp_pt": "express_gene",
            "post_condition_unexp_ft": "express_gene",
            "post_condition_unexp_pctl": "express_gene",
            "post_condition_SMV_pt": "express_gene",
            "post_condition_SMV_ft": "express_gene",
            "post_condition_PRISM_pctl": "express_gene",
            "stop_condition_unexp_pt": "(x > 0.5)",
            "stop_condition_unexp_ft": "(x > 0.5)",
            "stop_condition_PRISM_pctl": "(x > 0.5)",
            "stop_condition_SMV_pt": "(x > 0.5)",
            "stop_condition_SMV_ft": "(x > 0.5)",
            "ft": "(((x > 0.5) V (express_gene | (x > 0.5))) | (LAST V express_gene))",
            "pt": "(H ((H (! (x > 0.5))) -> express_gene))",
            "pctl": "(P>0.01[((undefined R (express_gene | undefined)) | (LAST R express_gene))])",
            "ptExpanded": "(H ((H (! (x > 0.5))) -> express_gene))",
            "CoCoSpecCode": "H((H(not ((x > 0.5))) => express_gene))",
            "ftExpanded": "(((x > 0.5) V (express_gene | (x > 0.5))) | (LAST V express_gene))",
            "pctlExpanded": "(P>0.01[(((x > 0.5) R (express_gene | (x > 0.5))) | (false R express_gene))])",
            "ftInfAUExpanded": "((x > 0.5) V (express_gene | (x > 0.5)))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae0498-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R165b",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "P[0.3,0.4]((true)U(XmsgFail)(true))",
        "comments": "",
        "fulltext": "System shall with probability <= 0.4 eventually satisfy XmsgFail",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "XmsgFail"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<=",
                "0.4"
            ],
            "probabilityTextRange": [
                13,
                35
            ],
            "timingTextRange": [
                37,
                46
            ],
            "post_condition": "(XmsgFail)",
            "responseTextRange": [
                48,
                63
            ],
            "diagramVariables": "Response = <b><i>(XmsgFail)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<=0.4",
            "post_condition_unexp_pt": "XmsgFail",
            "post_condition_unexp_ft": "XmsgFail",
            "post_condition_unexp_pctl": "XmsgFail",
            "post_condition_SMV_pt": "XmsgFail",
            "post_condition_SMV_ft": "XmsgFail",
            "post_condition_PRISM_pctl": "XmsgFail",
            "ft": "((! LAST) U XmsgFail)",
            "pt": "(O XmsgFail)",
            "pctl": "(P<=0.4[(F XmsgFail)])",
            "ptExpanded": "(O XmsgFail)",
            "CoCoSpecCode": "O(XmsgFail)",
            "ftExpanded": "((! LAST) U XmsgFail)",
            "pctlExpanded": "(P<=0.4[(F XmsgFail)])",
            "ftInfAUExpanded": "(F XmsgFail)",
            "component": "System"
        },
        "status": "",
        "_id": "7fae0499-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R70",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "\"What is the probability that the concentration of Raf-1/RKIP/ERK-PP complex will be less than M until\nthe Raf-1/RKIP complex reaches the concentration C\"",
        "comments": "",
        "fulltext": "System shall with probability > 0.5 until complex = C satisfy complex <M",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "complex",
                "C",
                "M"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "stop_condition": "(complex = C)",
            "timingTextRange": [
                36,
                52
            ],
            "post_condition": "(complex < M)",
            "responseTextRange": [
                54,
                71
            ],
            "diagramVariables": "SC = <b><i>(complex = C)</i></b>, Response = <b><i>(complex < M)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_until_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "(complex < M)",
            "post_condition_unexp_ft": "(complex < M)",
            "post_condition_unexp_pctl": "(complex < M)",
            "post_condition_SMV_pt": "(complex < M)",
            "post_condition_SMV_ft": "(complex < M)",
            "post_condition_PRISM_pctl": "(complex < M)",
            "stop_condition_unexp_pt": "(complex = C)",
            "stop_condition_unexp_ft": "(complex = C)",
            "stop_condition_PRISM_pctl": "(complex = C)",
            "stop_condition_SMV_pt": "(complex = C)",
            "stop_condition_SMV_ft": "(complex = C)",
            "ft": "(((complex = C) V ((complex < M) | (complex = C))) | (LAST V (complex < M)))",
            "pt": "(H ((H (! (complex = C))) -> (complex < M)))",
            "pctl": "(P>0.5[((undefined R ((complex < M) | undefined)) | (LAST R (complex < M)))])",
            "ptExpanded": "(H ((H (! (complex = C))) -> (complex < M)))",
            "CoCoSpecCode": "H((H(not ((complex = C))) => (complex < M)))",
            "ftExpanded": "(((complex = C) V ((complex < M) | (complex = C))) | (LAST V (complex < M)))",
            "pctlExpanded": "(P>0.5[(((complex = C) R ((complex < M) | (complex = C))) | (false R (complex < M)))])",
            "ftInfAUExpanded": "((complex = C) V ((complex < M) | (complex = C)))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae049a-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R113",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "the probability that the comprehensive QoS value is greater than 0.5 is 50 percent",
        "comments": "",
        "fulltext": "System shall with probability > 0.5 always satisfy comprehensive_QoS > 0.5",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "comprehensive_QoS"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "timingTextRange": [
                36,
                41
            ],
            "post_condition": "(comprehensive_QoS > 0.5)",
            "responseTextRange": [
                43,
                73
            ],
            "diagramVariables": "Response = <b><i>(comprehensive_QoS > 0.5)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "(comprehensive_QoS > 0.5)",
            "post_condition_unexp_ft": "(comprehensive_QoS > 0.5)",
            "post_condition_unexp_pctl": "(comprehensive_QoS > 0.5)",
            "post_condition_SMV_pt": "(comprehensive_QoS > 0.5)",
            "post_condition_SMV_ft": "(comprehensive_QoS > 0.5)",
            "post_condition_PRISM_pctl": "(comprehensive_QoS > 0.5)",
            "ft": "(LAST V (comprehensive_QoS > 0.5))",
            "pt": "(H (comprehensive_QoS > 0.5))",
            "pctl": "(P>0.5[(G (comprehensive_QoS > 0.5))])",
            "ptExpanded": "(H (comprehensive_QoS > 0.5))",
            "CoCoSpecCode": "H((comprehensive_QoS > 0.5))",
            "ftExpanded": "(LAST V (comprehensive_QoS > 0.5))",
            "pctlExpanded": "(P>0.5[(G (comprehensive_QoS > 0.5))])",
            "ftInfAUExpanded": "(G (comprehensive_QoS > 0.5))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae049b-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R82",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "FHA determines that the probability of occurrence of a catastrophic failure condition must not be greater than 10-9 per flight hour",
        "comments": "",
        "fulltext": "System shall with probability < 0.000000001 satisfy catastrophic_failure_condition",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "catastrophic_failure_condition"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<",
                "0.000000001"
            ],
            "probabilityTextRange": [
                13,
                42
            ],
            "post_condition": "(catastrophic_failure_condition)",
            "responseTextRange": [
                44,
                81
            ],
            "diagramVariables": "Response = <b><i>(catastrophic_failure_condition)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.000000001",
            "post_condition_unexp_pt": "catastrophic_failure_condition",
            "post_condition_unexp_ft": "catastrophic_failure_condition",
            "post_condition_unexp_pctl": "catastrophic_failure_condition",
            "post_condition_SMV_pt": "catastrophic_failure_condition",
            "post_condition_SMV_ft": "catastrophic_failure_condition",
            "post_condition_PRISM_pctl": "catastrophic_failure_condition",
            "ft": "((! LAST) U catastrophic_failure_condition)",
            "pt": "(O catastrophic_failure_condition)",
            "pctl": "(P<0.000000001[(F catastrophic_failure_condition)])",
            "ptExpanded": "(O catastrophic_failure_condition)",
            "CoCoSpecCode": "O(catastrophic_failure_condition)",
            "ftExpanded": "((! LAST) U catastrophic_failure_condition)",
            "pctlExpanded": "(P<0.000000001[(F catastrophic_failure_condition)])",
            "ftInfAUExpanded": "(F catastrophic_failure_condition)",
            "component": "System"
        },
        "status": "",
        "_id": "7fae049c-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R160",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "The probability that the system health status change to a false state (C) is less than 0.1%",
        "comments": "",
        "fulltext": "whenever healthy_state System shall with probability < 0.1 eventually satisfy false_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "healthy_state",
                "false_state"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(healthy_state)",
            "regular_condition": "(healthy_state)",
            "conditionTextRange": [
                0,
                21
            ],
            "component_name": "System",
            "componentTextRange": [
                23,
                28
            ],
            "probability_bound": [
                "<",
                "0.1"
            ],
            "probabilityTextRange": [
                36,
                57
            ],
            "timingTextRange": [
                59,
                68
            ],
            "post_condition": "(false_state)",
            "responseTextRange": [
                70,
                88
            ],
            "diagramVariables": "CC = <b><i>(healthy_state)</i></b>, Response = <b><i>(false_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(healthy_state)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.1",
            "regular_condition_unexp_pt": "healthy_state",
            "regular_condition_unexp_ft": "healthy_state",
            "regular_condition_unexp_pctl": "healthy_state",
            "regular_condition_SMV_pt": "healthy_state",
            "regular_condition_SMV_ft": "healthy_state",
            "regular_condition_PRISM_pctl": "healthy_state",
            "post_condition_unexp_pt": "false_state",
            "post_condition_unexp_ft": "false_state",
            "post_condition_unexp_pctl": "false_state",
            "post_condition_SMV_pt": "false_state",
            "post_condition_SMV_ft": "false_state",
            "post_condition_PRISM_pctl": "false_state",
            "ft": "(LAST V (healthy_state -> ((! LAST) U false_state)))",
            "pt": "((H (! healthy_state)) | (! ((! false_state) S ((! false_state) & healthy_state))))",
            "pctl": "P>=1[(G (healthy_state => (P<0.1[(F false_state)])))]",
            "ptExpanded": "((H (! healthy_state)) | (! ((! false_state) S ((! false_state) & healthy_state))))",
            "CoCoSpecCode": "(H(not (healthy_state)) or not (SI(healthy_state,not (false_state))))",
            "ftExpanded": "(LAST V (healthy_state -> ((! LAST) U false_state)))",
            "pctlExpanded": "P>=1[(G (healthy_state => (P<0.1[(F false_state)])))]",
            "ftInfAUExpanded": "(G (healthy_state -> (F false_state)))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae049d-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R77",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "If the concentration of the repressor protein is more than 0.5, then the probability that the regulation of the protein will be repressed is greater than 0.9.",
        "comments": "",
        "fulltext": "if conc_repressor > 0.5 System shall with probability > 0.9 eventually satisfy repressed_regulation",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "conc_repressor",
                "repressed_regulation"
            ],
            "qualifier_word": "if",
            "pre_condition": "(conc_repressor > 0.5)",
            "regular_condition": "(conc_repressor > 0.5)",
            "conditionTextRange": [
                0,
                22
            ],
            "component_name": "System",
            "componentTextRange": [
                24,
                29
            ],
            "probability_bound": [
                ">",
                "0.9"
            ],
            "probabilityTextRange": [
                37,
                58
            ],
            "timingTextRange": [
                60,
                69
            ],
            "post_condition": "(repressed_regulation)",
            "responseTextRange": [
                71,
                98
            ],
            "diagramVariables": "TC = <b><i>(conc_repressor > 0.5)</i></b>, Response = <b><i>(repressed_regulation)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(conc_repressor > 0.5)</i></b> is true and any point in the interval where <b><i>(conc_repressor > 0.5)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.9",
            "regular_condition_unexp_pt": "(conc_repressor > 0.5)",
            "regular_condition_unexp_ft": "(conc_repressor > 0.5)",
            "regular_condition_unexp_pctl": "(conc_repressor > 0.5)",
            "regular_condition_SMV_pt": "(conc_repressor > 0.5)",
            "regular_condition_SMV_ft": "(conc_repressor > 0.5)",
            "regular_condition_PRISM_pctl": "(conc_repressor > 0.5)",
            "post_condition_unexp_pt": "repressed_regulation",
            "post_condition_unexp_ft": "repressed_regulation",
            "post_condition_unexp_pctl": "repressed_regulation",
            "post_condition_SMV_pt": "repressed_regulation",
            "post_condition_SMV_ft": "repressed_regulation",
            "post_condition_PRISM_pctl": "repressed_regulation",
            "ft": "((LAST V (((! (conc_repressor > 0.5)) & ((! LAST) & (X (conc_repressor > 0.5)))) -> (X ((! LAST) U repressed_regulation)))) & ((conc_repressor > 0.5) -> ((! LAST) U repressed_regulation)))",
            "pt": "((H (! (conc_repressor > 0.5))) | (! ((! repressed_regulation) S ((! repressed_regulation) & ((conc_repressor > 0.5) & (Z (! (conc_repressor > 0.5))))))))",
            "pctl": "P>=1[((G (((! (conc_repressor > 0.5)) & (X (conc_repressor > 0.5))) => (X (P>0.9[(F repressed_regulation)])))) & ((conc_repressor > 0.5) => (P>0.9[(F repressed_regulation)])))]",
            "ptExpanded": "((H (! (conc_repressor > 0.5))) | (! ((! repressed_regulation) S ((! repressed_regulation) & ((conc_repressor > 0.5) & (Z (! (conc_repressor > 0.5))))))))",
            "CoCoSpecCode": "(H(not ((conc_repressor > 0.5))) or not (SI(((conc_repressor > 0.5) and ZtoPre(not ((conc_repressor > 0.5)))),not (repressed_regulation))))",
            "ftExpanded": "((LAST V (((! (conc_repressor > 0.5)) & ((! LAST) & (X (conc_repressor > 0.5)))) -> (X ((! LAST) U repressed_regulation)))) & ((conc_repressor > 0.5) -> ((! LAST) U repressed_regulation)))",
            "pctlExpanded": "P>=1[((G (((! (conc_repressor > 0.5)) & (X (conc_repressor > 0.5))) => (X (P>0.9[(F repressed_regulation)])))) & ((conc_repressor > 0.5) => (P>0.9[(F repressed_regulation)])))]",
            "ftInfAUExpanded": "((G (((! (conc_repressor > 0.5)) & (X (conc_repressor > 0.5))) -> (X (F repressed_regulation)))) & ((conc_repressor > 0.5) -> (F repressed_regulation)))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae049e-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R26",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "the probability of response time less than 2.5 is greater than 85 percent",
        "comments": "",
        "fulltext": "System shall with probability > 0.85 within 25 milliseconds satisfy response",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "response"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.85"
            ],
            "probabilityTextRange": [
                13,
                35
            ],
            "duration": "25",
            "timingTextRange": [
                37,
                58
            ],
            "post_condition": "(response)",
            "responseTextRange": [
                60,
                75
            ],
            "diagramVariables": " n = <b><i>25</i></b>, Response = <b><i>(response)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>25</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>25</i></b>). If the interval ends sooner than trigger+<b><i>25</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.85",
            "post_condition_unexp_pt": "response",
            "post_condition_unexp_ft": "response",
            "post_condition_unexp_pctl": "response",
            "post_condition_SMV_pt": "response",
            "post_condition_SMV_ft": "response",
            "post_condition_PRISM_pctl": "response",
            "ft": "((F[<=25] response) | (F[<25] LAST))",
            "pt": "(H ((H (! response)) -> (O[<25] (Z FALSE))))",
            "pctl": "(P>0.85[(F<=25 response)])",
            "ptExpanded": "(H ((H (! response)) -> (O[0,24] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (response)) => OT(24, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,25] response) | (F[0,24] LAST))",
            "pctlExpanded": "(P>0.85[(F<=25 response)])",
            "ftInfAUExpanded": "(F[0,25] response)",
            "component": "System"
        },
        "status": "",
        "_id": "7fae049f-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R56",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": " the probability of eliminating the rpsViolation anomaly (i.e., raising performance again above threshold MIN RPS ) within t time units \n\nP(F ≤t ¬rpsViolation )",
        "comments": "",
        "fulltext": "System shall with probability >0.9 within 10 ticks satisfy !rpsViolation",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "rpsViolation"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.9"
            ],
            "probabilityTextRange": [
                13,
                33
            ],
            "duration": "10",
            "timingTextRange": [
                35,
                49
            ],
            "post_condition": "(! rpsViolation)",
            "responseTextRange": [
                51,
                71
            ],
            "diagramVariables": " n = <b><i>10</i></b>, Response = <b><i>(! rpsViolation)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.9",
            "post_condition_unexp_pt": "(! rpsViolation)",
            "post_condition_unexp_ft": "(! rpsViolation)",
            "post_condition_unexp_pctl": "(! rpsViolation)",
            "post_condition_SMV_pt": "(! rpsViolation)",
            "post_condition_SMV_ft": "(! rpsViolation)",
            "post_condition_PRISM_pctl": "(! rpsViolation)",
            "ft": "((F[<=10] (! rpsViolation)) | (F[<10] LAST))",
            "pt": "(H ((H (! (! rpsViolation))) -> (O[<10] (Z FALSE))))",
            "pctl": "(P>0.9[(F<=10 (! rpsViolation))])",
            "ptExpanded": "(H ((H rpsViolation) -> (O[0,9] (Z FALSE))))",
            "CoCoSpecCode": "H((H(rpsViolation) => OT(9, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,10] (! rpsViolation)) | (F[0,9] LAST))",
            "pctlExpanded": "(P>0.9[(F<=10 (! rpsViolation))])",
            "ftInfAUExpanded": "(F[0,10] (! rpsViolation))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04a0-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R140b",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "computing the probability with which certain nodes (e.g., nodes 1 and 2) receive the broadcast message\n\nP=?[ true U (active1=0) ] and P=?[ true U (active2=0) ]",
        "comments": "",
        "fulltext": "System shall with probability > 0.5 eventually satisfy active2 = 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "active2"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "timingTextRange": [
                36,
                45
            ],
            "post_condition": "(active2 = 0)",
            "responseTextRange": [
                47,
                65
            ],
            "diagramVariables": "Response = <b><i>(active2 = 0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "(active2 = 0)",
            "post_condition_unexp_ft": "(active2 = 0)",
            "post_condition_unexp_pctl": "(active2 = 0)",
            "post_condition_SMV_pt": "(active2 = 0)",
            "post_condition_SMV_ft": "(active2 = 0)",
            "post_condition_PRISM_pctl": "(active2 = 0)",
            "ft": "((! LAST) U (active2 = 0))",
            "pt": "(O (active2 = 0))",
            "pctl": "(P>0.5[(F (active2 = 0))])",
            "ptExpanded": "(O (active2 = 0))",
            "CoCoSpecCode": "O((active2 = 0))",
            "ftExpanded": "((! LAST) U (active2 = 0))",
            "pctlExpanded": "(P>0.5[(F (active2 = 0))])",
            "ftInfAUExpanded": "(F (active2 = 0))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04a1-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R50",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": " Probability of successfully handling a request\n\nP=?[F HttpResponse] ",
        "comments": "",
        "fulltext": "System shall with probability > 0.9 eventually satisfy HttpResponse",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "HttpResponse"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.9"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "timingTextRange": [
                36,
                45
            ],
            "post_condition": "(HttpResponse)",
            "responseTextRange": [
                47,
                66
            ],
            "diagramVariables": "Response = <b><i>(HttpResponse)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.9",
            "post_condition_unexp_pt": "HttpResponse",
            "post_condition_unexp_ft": "HttpResponse",
            "post_condition_unexp_pctl": "HttpResponse",
            "post_condition_SMV_pt": "HttpResponse",
            "post_condition_SMV_ft": "HttpResponse",
            "post_condition_PRISM_pctl": "HttpResponse",
            "ft": "((! LAST) U HttpResponse)",
            "pt": "(O HttpResponse)",
            "pctl": "(P>0.9[(F HttpResponse)])",
            "ptExpanded": "(O HttpResponse)",
            "CoCoSpecCode": "O(HttpResponse)",
            "ftExpanded": "((! LAST) U HttpResponse)",
            "pctlExpanded": "(P>0.9[(F HttpResponse)])",
            "ftInfAUExpanded": "(F HttpResponse)",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04a2-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R131",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "the probability that users browse announcements of used cars\n\nP =?[F(UsedCarsPage | UsedCar)]",
        "comments": "",
        "fulltext": "System shall with probability >0.5 eventually satisfy UsedCarsPage | UsedCar",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "UsedCarsPage",
                "UsedCar"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                33
            ],
            "timingTextRange": [
                35,
                44
            ],
            "post_condition": "(UsedCarsPage | UsedCar)",
            "responseTextRange": [
                46,
                75
            ],
            "diagramVariables": "Response = <b><i>(UsedCarsPage | UsedCar)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "(UsedCarsPage | UsedCar)",
            "post_condition_unexp_ft": "(UsedCarsPage | UsedCar)",
            "post_condition_unexp_pctl": "(UsedCarsPage | UsedCar)",
            "post_condition_SMV_pt": "(UsedCarsPage | UsedCar)",
            "post_condition_SMV_ft": "(UsedCarsPage | UsedCar)",
            "post_condition_PRISM_pctl": "(UsedCarsPage | UsedCar)",
            "ft": "((! LAST) U (UsedCarsPage | UsedCar))",
            "pt": "(O (UsedCarsPage | UsedCar))",
            "pctl": "(P>0.5[(F (UsedCarsPage | UsedCar))])",
            "ptExpanded": "(O (UsedCarsPage | UsedCar))",
            "CoCoSpecCode": "O((UsedCarsPage or UsedCar))",
            "ftExpanded": "((! LAST) U (UsedCarsPage | UsedCar))",
            "pctlExpanded": "(P>0.5[(F (UsedCarsPage | UsedCar))])",
            "ftInfAUExpanded": "(F (UsedCarsPage | UsedCar))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04a3-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R93",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "invoking a Domestic Flight service, Result-set should be acquired within 3.8 sec with probability 88%",
        "comments": "",
        "fulltext": "during domesticFlight upon invokingService the system shall with probability > 0.88 within 3.8 seconds satisfy acquireResultSet",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "domesticFlight",
                "invokingService",
                "acquireResultSet"
            ],
            "scope_mode": "domesticFlight",
            "scopeTextRange": [
                0,
                20
            ],
            "qualifier_word": "upon",
            "pre_condition": "(invokingService)",
            "regular_condition": "(invokingService)",
            "conditionTextRange": [
                22,
                41
            ],
            "component_name": "system",
            "componentTextRange": [
                43,
                52
            ],
            "probability_bound": [
                ">",
                "0.88"
            ],
            "probabilityTextRange": [
                60,
                82
            ],
            "duration": "3.8",
            "timingTextRange": [
                84,
                101
            ],
            "post_condition": "(acquireResultSet)",
            "responseTextRange": [
                103,
                126
            ],
            "diagramVariables": "M = <b><i>domesticFlight</i></b>, TC = <b><i>(invokingService)</i></b>,  n = <b><i>3.8</i></b>, Response = <b><i>(acquireResultSet)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>domesticFlight</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(invokingService)</i></b> is true and any point in the interval where <b><i>(invokingService)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>3.8</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>3.8</i></b>). If the interval ends sooner than trigger+<b><i>3.8</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_within_satisfaction.svg",
            "scope_mode_pt": "domesticFlight",
            "scope_mode_ft": "domesticFlight",
            "scope_mode_pctl": "domesticFlight",
            "bound": ">0.88",
            "regular_condition_unexp_pt": "invokingService",
            "regular_condition_unexp_ft": "invokingService",
            "regular_condition_unexp_pctl": "invokingService",
            "regular_condition_SMV_pt": "invokingService",
            "regular_condition_SMV_ft": "invokingService",
            "regular_condition_PRISM_pctl": "invokingService",
            "post_condition_unexp_pt": "acquireResultSet",
            "post_condition_unexp_ft": "acquireResultSet",
            "post_condition_unexp_pctl": "acquireResultSet",
            "post_condition_SMV_pt": "acquireResultSet",
            "post_condition_SMV_ft": "acquireResultSet",
            "post_condition_PRISM_pctl": "acquireResultSet",
            "ft": "((LAST V ((! (Fin_domesticFlight & (! LAST))) | (X (((Lin_domesticFlight | LAST) V (((! invokingService) & ((! LAST) & ((X invokingService) & (! (Lin_domesticFlight | LAST))))) -> ((X ((F[<=3.8] acquireResultSet) | (F[<3.8] (Lin_domesticFlight | LAST)))) & (! (Lin_domesticFlight | LAST))))) & (invokingService -> ((F[<=3.8] acquireResultSet) | (F[<3.8] (Lin_domesticFlight | LAST)))))))) & (domesticFlight -> (((Lin_domesticFlight | LAST) V (((! invokingService) & ((! LAST) & ((X invokingService) & (! (Lin_domesticFlight | LAST))))) -> ((X ((F[<=3.8] acquireResultSet) | (F[<3.8] (Lin_domesticFlight | LAST)))) & (! (Lin_domesticFlight | LAST))))) & (invokingService -> ((F[<=3.8] acquireResultSet) | (F[<3.8] (Lin_domesticFlight | LAST)))))))",
            "pt": "((H (Lin_domesticFlight -> (Y (((O[=3.8] ((invokingService & ((Y (! invokingService)) | Fin_domesticFlight)) & (! acquireResultSet))) -> (O[<3.8] (Fin_domesticFlight | acquireResultSet))) S (((O[=3.8] ((invokingService & ((Y (! invokingService)) | Fin_domesticFlight)) & (! acquireResultSet))) -> (O[<3.8] (Fin_domesticFlight | acquireResultSet))) & Fin_domesticFlight))))) & (((! Lin_domesticFlight) S ((! Lin_domesticFlight) & Fin_domesticFlight)) -> (((O[=3.8] ((invokingService & ((Y (! invokingService)) | Fin_domesticFlight)) & (! acquireResultSet))) -> (O[<3.8] (Fin_domesticFlight | acquireResultSet))) S (((O[=3.8] ((invokingService & ((Y (! invokingService)) | Fin_domesticFlight)) & (! acquireResultSet))) -> (O[<3.8] (Fin_domesticFlight | acquireResultSet))) & Fin_domesticFlight))))",
            "pctl": "P>=1[((G ((! (Fin_domesticFlight & (! LAST))) | (X ((Lin_domesticFlight R (((! invokingService) & ((X invokingService) & (! Lin_domesticFlight))) => ((X (P>0.88[(F<=3.8 acquireResultSet)])) & (! Lin_domesticFlight)))) & (invokingService => (P>0.88[(F[<=3.8] acquireResultSet)])))))) & (domesticFlight => (Lin_domesticFlight | ((Lin_domesticFlight R (((! invokingService) & ((X invokingService) & (! Lin_domesticFlight))) => ((X (P>0.88[(F[<=3.8] acquireResultSet)])) & (! Lin_domesticFlight)))) & (invokingService => (P>0.88[(F[<=3.8] acquireResultSet)]))))))]",
            "ptExpanded": "((H (((! domesticFlight) & (Y domesticFlight)) -> (Y (((O[=3.8] ((invokingService & ((Y (! invokingService)) | (domesticFlight & (Z (! domesticFlight))))) & (! acquireResultSet))) -> (O[<3.8] ((domesticFlight & (Z (! domesticFlight))) | acquireResultSet))) S (((O[=3.8] ((invokingService & ((Y (! invokingService)) | (domesticFlight & (Z (! domesticFlight))))) & (! acquireResultSet))) -> (O[<3.8] ((domesticFlight & (Z (! domesticFlight))) | acquireResultSet))) & (domesticFlight & (Z (! domesticFlight)))))))) & (((! ((! domesticFlight) & (Y domesticFlight))) S ((! ((! domesticFlight) & (Y domesticFlight))) & (domesticFlight & (Z (! domesticFlight))))) -> (((O[=3.8] ((invokingService & ((Y (! invokingService)) | (domesticFlight & (Z (! domesticFlight))))) & (! acquireResultSet))) -> (O[<3.8] ((domesticFlight & (Z (! domesticFlight))) | acquireResultSet))) S (((O[=3.8] ((invokingService & ((Y (! invokingService)) | (domesticFlight & (Z (! domesticFlight))))) & (! acquireResultSet))) -> (O[<3.8] ((domesticFlight & (Z (! domesticFlight))) | acquireResultSet))) & (domesticFlight & (Z (! domesticFlight)))))))",
            "CoCoSpecCode": "(H(((not (domesticFlight) and YtoPre(domesticFlight)) => YtoPre(SI((domesticFlight and ZtoPre(not (domesticFlight))),(OT(3.8, Equal, ((invokingService and (YtoPre(not (invokingService)) or (domesticFlight and ZtoPre(not (domesticFlight))))) and not (acquireResultSet))) => OT(3.8, LessThan, ((domesticFlight and ZtoPre(not (domesticFlight))) or acquireResultSet))))))) and (SI((domesticFlight and ZtoPre(not (domesticFlight))),not ((not (domesticFlight) and YtoPre(domesticFlight)))) => SI((domesticFlight and ZtoPre(not (domesticFlight))),(OT(3.8, Equal, ((invokingService and (YtoPre(not (invokingService)) or (domesticFlight and ZtoPre(not (domesticFlight))))) and not (acquireResultSet))) => OT(3.8, LessThan, ((domesticFlight and ZtoPre(not (domesticFlight))) or acquireResultSet))))))",
            "ftExpanded": "((LAST V ((! ((((! domesticFlight) & (! LAST)) & (X domesticFlight)) & (! LAST))) | (X (((((domesticFlight & (! LAST)) & (X (! domesticFlight))) | LAST) V (((! invokingService) & ((! LAST) & ((X invokingService) & (! (((domesticFlight & (! LAST)) & (X (! domesticFlight))) | LAST))))) -> ((X ((F[<=3.8] acquireResultSet) | (F[<3.8] (((domesticFlight & (! LAST)) & (X (! domesticFlight))) | LAST)))) & (! (((domesticFlight & (! LAST)) & (X (! domesticFlight))) | LAST))))) & (invokingService -> ((F[<=3.8] acquireResultSet) | (F[<3.8] (((domesticFlight & (! LAST)) & (X (! domesticFlight))) | LAST)))))))) & (domesticFlight -> (((((domesticFlight & (! LAST)) & (X (! domesticFlight))) | LAST) V (((! invokingService) & ((! LAST) & ((X invokingService) & (! (((domesticFlight & (! LAST)) & (X (! domesticFlight))) | LAST))))) -> ((X ((F[<=3.8] acquireResultSet) | (F[<3.8] (((domesticFlight & (! LAST)) & (X (! domesticFlight))) | LAST)))) & (! (((domesticFlight & (! LAST)) & (X (! domesticFlight))) | LAST))))) & (invokingService -> ((F[<=3.8] acquireResultSet) | (F[<3.8] (((domesticFlight & (! LAST)) & (X (! domesticFlight))) | LAST)))))))",
            "pctlExpanded": "P>=1[((G ((! (((! domesticFlight) & (X domesticFlight)) & (! false))) | (X (((domesticFlight & (X (! domesticFlight))) R (((! invokingService) & ((X invokingService) & (! (domesticFlight & (X (! domesticFlight)))))) => ((X (P>0.88[(F<=3.8 acquireResultSet)])) & (! (domesticFlight & (X (! domesticFlight))))))) & (invokingService => (P>0.88[(F[<=3.8] acquireResultSet)])))))) & (domesticFlight => ((domesticFlight & (X (! domesticFlight))) | (((domesticFlight & (X (! domesticFlight))) R (((! invokingService) & ((X invokingService) & (! (domesticFlight & (X (! domesticFlight)))))) => ((X (P>0.88[(F[<=3.8] acquireResultSet)])) & (! (domesticFlight & (X (! domesticFlight))))))) & (invokingService => (P>0.88[(F[<=3.8] acquireResultSet)]))))))]",
            "ftInfAUExpanded": "((G ((! ((! domesticFlight) & (X domesticFlight))) | (X (((domesticFlight & (X (! domesticFlight))) V (((! invokingService) & ((X invokingService) & (! (domesticFlight & (X (! domesticFlight)))))) -> ((X ((F[<=3.8] acquireResultSet) | (F[<3.8] (domesticFlight & (X (! domesticFlight)))))) & (! (domesticFlight & (X (! domesticFlight))))))) & (invokingService -> ((F[<=3.8] acquireResultSet) | (F[<3.8] (domesticFlight & (X (! domesticFlight)))))))))) & (domesticFlight -> (((domesticFlight & (X (! domesticFlight))) V (((! invokingService) & ((X invokingService) & (! (domesticFlight & (X (! domesticFlight)))))) -> ((X ((F[<=3.8] acquireResultSet) | (F[<3.8] (domesticFlight & (X (! domesticFlight)))))) & (! (domesticFlight & (X (! domesticFlight))))))) & (invokingService -> ((F[<=3.8] acquireResultSet) | (F[<3.8] (domesticFlight & (X (! domesticFlight)))))))))",
            "component": "system"
        },
        "status": "",
        "_id": "7fae04a4-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R106",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "What is the probability that the robot grabs food within 50 s? (s=3 will eventually hold within time bound [0, 50], until then true holds with a probability?)",
        "comments": "",
        "fulltext": "robot shall with probability > 0.9 within 50 ticks satisfy s=3",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "s"
            ],
            "component_name": "robot",
            "componentTextRange": [
                0,
                4
            ],
            "probability_bound": [
                ">",
                "0.9"
            ],
            "probabilityTextRange": [
                12,
                33
            ],
            "duration": "50",
            "timingTextRange": [
                35,
                49
            ],
            "post_condition": "(s = 3)",
            "responseTextRange": [
                51,
                61
            ],
            "diagramVariables": " n = <b><i>50</i></b>, Response = <b><i>(s = 3)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>50</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>50</i></b>). If the interval ends sooner than trigger+<b><i>50</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.9",
            "post_condition_unexp_pt": "(s = 3)",
            "post_condition_unexp_ft": "(s = 3)",
            "post_condition_unexp_pctl": "(s = 3)",
            "post_condition_SMV_pt": "(s = 3)",
            "post_condition_SMV_ft": "(s = 3)",
            "post_condition_PRISM_pctl": "(s = 3)",
            "ft": "((F[<=50] (s = 3)) | (F[<50] LAST))",
            "pt": "(H ((H (! (s = 3))) -> (O[<50] (Z FALSE))))",
            "pctl": "(P>0.9[(F<=50 (s = 3))])",
            "ptExpanded": "(H ((H (! (s = 3))) -> (O[0,49] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not ((s = 3))) => OT(49, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,50] (s = 3)) | (F[0,49] LAST))",
            "pctlExpanded": "(P>0.9[(F<=50 (s = 3))])",
            "ftInfAUExpanded": "(F[0,50] (s = 3))",
            "component": "robot"
        },
        "status": "",
        "_id": "7fae04a5-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R99",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "\"what is the probability that the expression (i.e. transcription & translation) of a green fluorescent protein (GFP) results in n mature and active (i.e.\nfluorescing) proteins (GFP > n)?\"",
        "comments": "",
        "fulltext": "System shall with probability > 0.5 eventually satisfy GFP > n",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "GFP",
                "n"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "timingTextRange": [
                36,
                45
            ],
            "post_condition": "(GFP > n)",
            "responseTextRange": [
                47,
                61
            ],
            "diagramVariables": "Response = <b><i>(GFP > n)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "(GFP > n)",
            "post_condition_unexp_ft": "(GFP > n)",
            "post_condition_unexp_pctl": "(GFP > n)",
            "post_condition_SMV_pt": "(GFP > n)",
            "post_condition_SMV_ft": "(GFP > n)",
            "post_condition_PRISM_pctl": "(GFP > n)",
            "ft": "((! LAST) U (GFP > n))",
            "pt": "(O (GFP > n))",
            "pctl": "(P>0.5[(F (GFP > n))])",
            "ptExpanded": "(O (GFP > n))",
            "CoCoSpecCode": "O((GFP > n))",
            "ftExpanded": "((! LAST) U (GFP > n))",
            "pctlExpanded": "(P>0.5[(F (GFP > n))])",
            "ftInfAUExpanded": "(F (GFP > n))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04a6-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R36",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "\" The airbag is deployed unintentionally, which means that it is ignited even though no crash at all or only a non-critical crash has occurred.\"\n\nP≤thp3(T3)(true U ≤T3 (¬critical crash∧fasic fired)) [some specific values for the variables are given in the paper]",
        "comments": "",
        "fulltext": "System shall with probability >0.9 within 50 ticks satisfy !criticalCrash & fasicFired",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "criticalCrash",
                "fasicFired"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.9"
            ],
            "probabilityTextRange": [
                13,
                33
            ],
            "duration": "50",
            "timingTextRange": [
                35,
                49
            ],
            "post_condition": "(! criticalCrash & fasicFired)",
            "responseTextRange": [
                51,
                85
            ],
            "diagramVariables": " n = <b><i>50</i></b>, Response = <b><i>(! criticalCrash & fasicFired)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>50</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>50</i></b>). If the interval ends sooner than trigger+<b><i>50</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.9",
            "post_condition_unexp_pt": "((! criticalCrash) & fasicFired)",
            "post_condition_unexp_ft": "((! criticalCrash) & fasicFired)",
            "post_condition_unexp_pctl": "((! criticalCrash) & fasicFired)",
            "post_condition_SMV_pt": "((! criticalCrash) & fasicFired)",
            "post_condition_SMV_ft": "((! criticalCrash) & fasicFired)",
            "post_condition_PRISM_pctl": "((! criticalCrash) & fasicFired)",
            "ft": "((F[<=50] ((! criticalCrash) & fasicFired)) | (F[<50] LAST))",
            "pt": "(H ((H (! ((! criticalCrash) & fasicFired))) -> (O[<50] (Z FALSE))))",
            "pctl": "(P>0.9[(F<=50 ((! criticalCrash) & fasicFired))])",
            "ptExpanded": "(H ((H (! ((! criticalCrash) & fasicFired))) -> (O[0,49] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not ((not (criticalCrash) and fasicFired))) => OT(49, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,50] ((! criticalCrash) & fasicFired)) | (F[0,49] LAST))",
            "pctlExpanded": "(P>0.9[(F<=50 ((! criticalCrash) & fasicFired))])",
            "ftInfAUExpanded": "(F[0,50] ((! criticalCrash) & fasicFired))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04a7-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R119",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "the probability of moving from an initial state to the absorbing state s8 has to be more than 0.95",
        "comments": "",
        "fulltext": "System shall with probability > 0.95 eventually satisfy s=8",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "s"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.95"
            ],
            "probabilityTextRange": [
                13,
                35
            ],
            "timingTextRange": [
                37,
                46
            ],
            "post_condition": "(s = 8)",
            "responseTextRange": [
                48,
                58
            ],
            "diagramVariables": "Response = <b><i>(s = 8)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.95",
            "post_condition_unexp_pt": "(s = 8)",
            "post_condition_unexp_ft": "(s = 8)",
            "post_condition_unexp_pctl": "(s = 8)",
            "post_condition_SMV_pt": "(s = 8)",
            "post_condition_SMV_ft": "(s = 8)",
            "post_condition_PRISM_pctl": "(s = 8)",
            "ft": "((! LAST) U (s = 8))",
            "pt": "(O (s = 8))",
            "pctl": "(P>0.95[(F (s = 8))])",
            "ptExpanded": "(O (s = 8))",
            "CoCoSpecCode": "O((s = 8))",
            "ftExpanded": "((! LAST) U (s = 8))",
            "pctlExpanded": "(P>0.95[(F (s = 8))])",
            "ftInfAUExpanded": "(F (s = 8))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04a8-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R47",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "The system shall output power continuously during the first 7 hours with over 45% probability",
        "comments": "",
        "fulltext": "System shall with probability >0.45 for 7 ticks satisfy output_power",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "for",
            "response": "satisfaction",
            "variables": [
                "output_power"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.45"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "duration": "7",
            "timingTextRange": [
                36,
                46
            ],
            "post_condition": "(output_power)",
            "responseTextRange": [
                48,
                67
            ],
            "diagramVariables": " n = <b><i>7</i></b>, Response = <b><i>(output_power)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the trigger and remain true for <b><i>7</i></b> time points past the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>7</i></b>), or to the end of the interval if the interval ends sooner than trigger+<b><i>7</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_for_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.45",
            "post_condition_unexp_pt": "output_power",
            "post_condition_unexp_ft": "output_power",
            "post_condition_unexp_pctl": "output_power",
            "post_condition_SMV_pt": "output_power",
            "post_condition_SMV_ft": "output_power",
            "post_condition_PRISM_pctl": "output_power",
            "ft": "((G[<=7] output_power) | (LAST V output_power))",
            "pt": "(H ((O[<=7] (Z FALSE)) -> output_power))",
            "pctl": "(P>0.45[(G<=7 output_power)])",
            "ptExpanded": "(H ((O[0,7] (Z FALSE)) -> output_power))",
            "CoCoSpecCode": "H((OT(7, 0, ZtoPre(false)) => output_power))",
            "ftExpanded": "((G[0,7] output_power) | (LAST V output_power))",
            "pctlExpanded": "(P>0.45[(G<=7 output_power)])",
            "ftInfAUExpanded": "((G[0,7] output_power) | (G output_power))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04a9-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R153a",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "whether G has a strategy such that: 1) with probability greater than 0.2 that G will have no less than 20 credits, and 2) in the next n rounds, with probability equal to or less than 0.3 that at each game the probability of losing all credits eventually is greater than 0.5",
        "comments": "",
        "fulltext": "System shall with probability >0.2 eventually satisfy bigG >= 20",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "bigG"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.2"
            ],
            "probabilityTextRange": [
                13,
                33
            ],
            "timingTextRange": [
                35,
                44
            ],
            "post_condition": "(bigG >= 20)",
            "responseTextRange": [
                46,
                63
            ],
            "diagramVariables": "Response = <b><i>(bigG >= 20)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.2",
            "post_condition_unexp_pt": "(bigG >= 20)",
            "post_condition_unexp_ft": "(bigG >= 20)",
            "post_condition_unexp_pctl": "(bigG >= 20)",
            "post_condition_SMV_pt": "(bigG >= 20)",
            "post_condition_SMV_ft": "(bigG >= 20)",
            "post_condition_PRISM_pctl": "(bigG >= 20)",
            "ft": "((! LAST) U (bigG >= 20))",
            "pt": "(O (bigG >= 20))",
            "pctl": "(P>0.2[(F (bigG >= 20))])",
            "ptExpanded": "(O (bigG >= 20))",
            "CoCoSpecCode": "O((bigG >= 20))",
            "ftExpanded": "((! LAST) U (bigG >= 20))",
            "pctlExpanded": "(P>0.2[(F (bigG >= 20))])",
            "ftInfAUExpanded": "(F (bigG >= 20))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04aa-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R3",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "The probability P2 that a changeDrug or a changeDoses request generates an alarm which fails (i.e., the FAS is not notified) is less than 0.007.",
        "comments": "",
        "fulltext": "if changeDrug|changeDoses System shall with probability <= 0.007 until failedAlarm satisfy !stopMsg & !pButtonMsg & !FAS",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "changeDrug",
                "changeDoses",
                "failedAlarm",
                "stopMsg",
                "pButtonMsg",
                "FAS"
            ],
            "qualifier_word": "if",
            "pre_condition": "(changeDrug | changeDoses)",
            "regular_condition": "(changeDrug | changeDoses)",
            "conditionTextRange": [
                0,
                24
            ],
            "component_name": "System",
            "componentTextRange": [
                26,
                31
            ],
            "probability_bound": [
                "<=",
                "0.007"
            ],
            "probabilityTextRange": [
                39,
                63
            ],
            "stop_condition": "(failedAlarm)",
            "timingTextRange": [
                65,
                81
            ],
            "post_condition": "(! stopMsg & ! pButtonMsg & ! FAS)",
            "responseTextRange": [
                83,
                119
            ],
            "diagramVariables": "TC = <b><i>(changeDrug | changeDoses)</i></b>, SC = <b><i>(failedAlarm)</i></b>, Response = <b><i>(! stopMsg & ! pButtonMsg & ! FAS)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(changeDrug | changeDoses)</i></b> is true and any point in the interval where <b><i>(changeDrug | changeDoses)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<=0.007",
            "regular_condition_unexp_pt": "(changeDrug | changeDoses)",
            "regular_condition_unexp_ft": "(changeDrug | changeDoses)",
            "regular_condition_unexp_pctl": "(changeDrug | changeDoses)",
            "regular_condition_SMV_pt": "(changeDrug | changeDoses)",
            "regular_condition_SMV_ft": "(changeDrug | changeDoses)",
            "regular_condition_PRISM_pctl": "(changeDrug | changeDoses)",
            "post_condition_unexp_pt": "(((! stopMsg) & (! pButtonMsg)) & (! FAS))",
            "post_condition_unexp_ft": "(((! stopMsg) & (! pButtonMsg)) & (! FAS))",
            "post_condition_unexp_pctl": "(((! stopMsg) & (! pButtonMsg)) & (! FAS))",
            "post_condition_SMV_pt": "(((! stopMsg) & (! pButtonMsg)) & (! FAS))",
            "post_condition_SMV_ft": "(((! stopMsg) & (! pButtonMsg)) & (! FAS))",
            "post_condition_PRISM_pctl": "(((! stopMsg) & (! pButtonMsg)) & (! FAS))",
            "stop_condition_unexp_pt": "failedAlarm",
            "stop_condition_unexp_ft": "failedAlarm",
            "stop_condition_PRISM_pctl": "failedAlarm",
            "stop_condition_SMV_pt": "failedAlarm",
            "stop_condition_SMV_ft": "failedAlarm",
            "ft": "((LAST V (((! (changeDrug | changeDoses)) & ((! LAST) & (X (changeDrug | changeDoses)))) -> (X ((failedAlarm V ((((! stopMsg) & (! pButtonMsg)) & (! FAS)) | failedAlarm)) | (LAST V (((! stopMsg) & (! pButtonMsg)) & (! FAS))))))) & ((changeDrug | changeDoses) -> ((failedAlarm V ((((! stopMsg) & (! pButtonMsg)) & (! FAS)) | failedAlarm)) | (LAST V (((! stopMsg) & (! pButtonMsg)) & (! FAS))))))",
            "pt": "(H ((H (! (changeDrug | changeDoses))) | (((! failedAlarm) S ((! failedAlarm) & ((changeDrug | changeDoses) & (Z (! (changeDrug | changeDoses)))))) -> (((! stopMsg) & (! pButtonMsg)) & (! FAS)))))",
            "pctl": "P>=1[((G (((! (changeDrug | changeDoses)) & (X (changeDrug | changeDoses))) => (X (P<=0.007[((undefined R ((((! stopMsg) & (! pButtonMsg)) & (! FAS)) | undefined)) | (LAST R (((! stopMsg) & (! pButtonMsg)) & (! FAS))))])))) & ((changeDrug | changeDoses) => (P<=0.007[((undefined R ((((! stopMsg) & (! pButtonMsg)) & (! FAS)) | undefined)) | (LAST R (((! stopMsg) & (! pButtonMsg)) & (! FAS))))])))]",
            "ptExpanded": "(H ((H (! (changeDrug | changeDoses))) | (((! failedAlarm) S ((! failedAlarm) & ((changeDrug | changeDoses) & (Z (! (changeDrug | changeDoses)))))) -> (((! stopMsg) & (! pButtonMsg)) & (! FAS)))))",
            "CoCoSpecCode": "H((H(not ((changeDrug or changeDoses))) or (SI(((changeDrug or changeDoses) and ZtoPre(not ((changeDrug or changeDoses)))),not (failedAlarm)) => ((not (stopMsg) and not (pButtonMsg)) and not (FAS)))))",
            "ftExpanded": "((LAST V (((! (changeDrug | changeDoses)) & ((! LAST) & (X (changeDrug | changeDoses)))) -> (X ((failedAlarm V ((((! stopMsg) & (! pButtonMsg)) & (! FAS)) | failedAlarm)) | (LAST V (((! stopMsg) & (! pButtonMsg)) & (! FAS))))))) & ((changeDrug | changeDoses) -> ((failedAlarm V ((((! stopMsg) & (! pButtonMsg)) & (! FAS)) | failedAlarm)) | (LAST V (((! stopMsg) & (! pButtonMsg)) & (! FAS))))))",
            "pctlExpanded": "P>=1[((G (((! (changeDrug | changeDoses)) & (X (changeDrug | changeDoses))) => (X (P<=0.007[((failedAlarm R ((((! stopMsg) & (! pButtonMsg)) & (! FAS)) | failedAlarm)) | (false R (((! stopMsg) & (! pButtonMsg)) & (! FAS))))])))) & ((changeDrug | changeDoses) => (P<=0.007[((failedAlarm R ((((! stopMsg) & (! pButtonMsg)) & (! FAS)) | failedAlarm)) | (false R (((! stopMsg) & (! pButtonMsg)) & (! FAS))))])))]",
            "ftInfAUExpanded": "((G (((! (changeDrug | changeDoses)) & (X (changeDrug | changeDoses))) -> (X (failedAlarm V ((((! stopMsg) & (! pButtonMsg)) & (! FAS)) | failedAlarm))))) & ((changeDrug | changeDoses) -> (failedAlarm V ((((! stopMsg) & (! pButtonMsg)) & (! FAS)) | failedAlarm))))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04ab-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R19",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "No more than 5% of the sessions of a returning customers shall take more than 0.55 seconds of computation time. (the probability for a ´ f1returning user (state 2 identifies a user as RC) to wait less than 0.55 s is greater than 0.95)",
        "comments": "",
        "fulltext": "whenever s=2 System shall with probability > 0.95 within 55 milliseconds satisfy s=11",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "s"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(s = 2)",
            "regular_condition": "(s = 2)",
            "conditionTextRange": [
                0,
                11
            ],
            "component_name": "System",
            "componentTextRange": [
                13,
                18
            ],
            "probability_bound": [
                ">",
                "0.95"
            ],
            "probabilityTextRange": [
                26,
                48
            ],
            "duration": "55",
            "timingTextRange": [
                50,
                71
            ],
            "post_condition": "(s = 11)",
            "responseTextRange": [
                73,
                84
            ],
            "diagramVariables": "CC = <b><i>(s = 2)</i></b>,  n = <b><i>55</i></b>, Response = <b><i>(s = 11)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(s = 2)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>55</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>55</i></b>). If the interval ends sooner than trigger+<b><i>55</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.95",
            "regular_condition_unexp_pt": "(s = 2)",
            "regular_condition_unexp_ft": "(s = 2)",
            "regular_condition_unexp_pctl": "(s = 2)",
            "regular_condition_SMV_pt": "(s = 2)",
            "regular_condition_SMV_ft": "(s = 2)",
            "regular_condition_PRISM_pctl": "(s = 2)",
            "post_condition_unexp_pt": "(s = 11)",
            "post_condition_unexp_ft": "(s = 11)",
            "post_condition_unexp_pctl": "(s = 11)",
            "post_condition_SMV_pt": "(s = 11)",
            "post_condition_SMV_ft": "(s = 11)",
            "post_condition_PRISM_pctl": "(s = 11)",
            "ft": "(LAST V ((s = 2) -> ((F[<=55] (s = 11)) | (F[<55] LAST))))",
            "pt": "(H ((O[=55] ((s = 2) & (! (s = 11)))) -> (O[<55] ((Z FALSE) | (s = 11)))))",
            "pctl": "P>=1[(G ((s = 2) => (P>0.95[(F<=55 (s = 11))])))]",
            "ptExpanded": "(H ((O[55,55] ((s = 2) & (! (s = 11)))) -> (O[0,54] ((Z FALSE) | (s = 11)))))",
            "CoCoSpecCode": "H((OT(55, 55, ((s = 2) and not ((s = 11)))) => OT(54, 0, (ZtoPre(false) or (s = 11)))))",
            "ftExpanded": "(LAST V ((s = 2) -> ((F[0,55] (s = 11)) | (F[0,54] LAST))))",
            "pctlExpanded": "P>=1[(G ((s = 2) => (P>0.95[(F<=55 (s = 11))])))]",
            "ftInfAUExpanded": "(G ((s = 2) -> (F[0,55] (s = 11))))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04ac-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R65",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": " P =? [true U fail = 2]",
        "comments": "",
        "fulltext": "System shall with probability >0.5 eventually satisfy fail = 2",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "fail"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                33
            ],
            "timingTextRange": [
                35,
                44
            ],
            "post_condition": "(fail = 2)",
            "responseTextRange": [
                46,
                61
            ],
            "diagramVariables": "Response = <b><i>(fail = 2)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "(fail = 2)",
            "post_condition_unexp_ft": "(fail = 2)",
            "post_condition_unexp_pctl": "(fail = 2)",
            "post_condition_SMV_pt": "(fail = 2)",
            "post_condition_SMV_ft": "(fail = 2)",
            "post_condition_PRISM_pctl": "(fail = 2)",
            "ft": "((! LAST) U (fail = 2))",
            "pt": "(O (fail = 2))",
            "pctl": "(P>0.5[(F (fail = 2))])",
            "ptExpanded": "(O (fail = 2))",
            "CoCoSpecCode": "O((fail = 2))",
            "ftExpanded": "((! LAST) U (fail = 2))",
            "pctlExpanded": "(P>0.5[(F (fail = 2))])",
            "ftInfAUExpanded": "(F (fail = 2))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04ad-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R75",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": " The concentration of the signalling molecules is always below the threshold with a probability greater than 0.9",
        "comments": "",
        "fulltext": "System shall with probability >0.9 always satisfy concentration < threshold",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "concentration",
                "threshold"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.9"
            ],
            "probabilityTextRange": [
                13,
                33
            ],
            "timingTextRange": [
                35,
                40
            ],
            "post_condition": "(concentration < threshold)",
            "responseTextRange": [
                42,
                74
            ],
            "diagramVariables": "Response = <b><i>(concentration < threshold)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.9",
            "post_condition_unexp_pt": "(concentration < threshold)",
            "post_condition_unexp_ft": "(concentration < threshold)",
            "post_condition_unexp_pctl": "(concentration < threshold)",
            "post_condition_SMV_pt": "(concentration < threshold)",
            "post_condition_SMV_ft": "(concentration < threshold)",
            "post_condition_PRISM_pctl": "(concentration < threshold)",
            "ft": "(LAST V (concentration < threshold))",
            "pt": "(H (concentration < threshold))",
            "pctl": "(P>0.9[(G (concentration < threshold))])",
            "ptExpanded": "(H (concentration < threshold))",
            "CoCoSpecCode": "H((concentration < threshold))",
            "ftExpanded": "(LAST V (concentration < threshold))",
            "pctlExpanded": "(P>0.9[(G (concentration < threshold))])",
            "ftInfAUExpanded": "(G (concentration < threshold))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04ae-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R161",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "if the state s is maximum (42) at the end of 24 h, with a probability grater than 10%",
        "comments": "",
        "fulltext": "System shall with probability < 0.1 immediately satisfy (t=24 & s =42)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "t",
                "s"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<",
                "0.1"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "timingTextRange": [
                36,
                46
            ],
            "post_condition": "(( t = 24 & s = 42 ))",
            "responseTextRange": [
                48,
                69
            ],
            "diagramVariables": "Response = <b><i>(( t = 24 & s = 42 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.1",
            "post_condition_unexp_pt": "((t = 24) & (s = 42))",
            "post_condition_unexp_ft": "((t = 24) & (s = 42))",
            "post_condition_unexp_pctl": "((t = 24) & (s = 42))",
            "post_condition_SMV_pt": "((t = 24) & (s = 42))",
            "post_condition_SMV_ft": "((t = 24) & (s = 42))",
            "post_condition_PRISM_pctl": "((t = 24) & (s = 42))",
            "ft": "((t = 24) & (s = 42))",
            "pt": "(H ((Z FALSE) -> ((t = 24) & (s = 42))))",
            "pctl": "(P<0.1[((t = 24) & (s = 42))])",
            "ptExpanded": "(H ((Z FALSE) -> ((t = 24) & (s = 42))))",
            "CoCoSpecCode": "H((ZtoPre(false) => ((t = 24) and (s = 42))))",
            "ftExpanded": "((t = 24) & (s = 42))",
            "pctlExpanded": "(P<0.1[((t = 24) & (s = 42))])",
            "ftInfAUExpanded": "((t = 24) & (s = 42))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04af-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R11",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "A system backup is performed repeatedly every night with probability greater or equal than 99.99%",
        "comments": "",
        "fulltext": "whenever night System shall with probability >= 0.999 before day satisfy backup ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "bound",
            "timing": "before",
            "response": "satisfaction",
            "variables": [
                "night",
                "day",
                "backup"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(night)",
            "regular_condition": "(night)",
            "conditionTextRange": [
                0,
                13
            ],
            "component_name": "System",
            "componentTextRange": [
                15,
                20
            ],
            "probability_bound": [
                ">=",
                "0.999"
            ],
            "probabilityTextRange": [
                28,
                52
            ],
            "stop_condition": "(day)",
            "timingTextRange": [
                54,
                63
            ],
            "post_condition": "(backup)",
            "responseTextRange": [
                65,
                78
            ],
            "diagramVariables": "CC = <b><i>(night)</i></b>, SC = <b><i>(day)</i></b>, Response = <b><i>(backup)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(night)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at least once strictly before the state where the stop condition holds. If the stop condition never occurs in the interval, RES does not need to hold. If the stop condition holds at the trigger, the requirement is not satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_before_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.999",
            "regular_condition_unexp_pt": "night",
            "regular_condition_unexp_ft": "night",
            "regular_condition_unexp_pctl": "night",
            "regular_condition_SMV_pt": "night",
            "regular_condition_SMV_ft": "night",
            "regular_condition_PRISM_pctl": "night",
            "post_condition_unexp_pt": "backup",
            "post_condition_unexp_ft": "backup",
            "post_condition_unexp_pctl": "backup",
            "post_condition_SMV_pt": "backup",
            "post_condition_SMV_ft": "backup",
            "post_condition_PRISM_pctl": "backup",
            "stop_condition_unexp_pt": "day",
            "stop_condition_unexp_ft": "day",
            "stop_condition_PRISM_pctl": "day",
            "stop_condition_SMV_pt": "day",
            "stop_condition_SMV_ft": "day",
            "ft": "(LAST V (night -> ((backup | LAST) V (! day))))",
            "pt": "(H (day -> ((H (! night)) | (((Y TRUE) & (! night)) & (Y (! ((! backup) S ((! backup) & night))))))))",
            "pctl": "P>=1[(G (night => (P>=0.999[((backup | LAST) R (! undefined))])))]",
            "ptExpanded": "(H (day -> ((H (! night)) | (((Y TRUE) & (! night)) & (Y (! ((! backup) S ((! backup) & night))))))))",
            "CoCoSpecCode": "H((day => (H(not (night)) or ((YtoPre(true) and not (night)) and YtoPre(not (SI(night,not (backup))))))))",
            "ftExpanded": "(LAST V (night -> ((backup | LAST) V (! day))))",
            "pctlExpanded": "P>=1[(G (night => (P>=0.999[((backup | false) R (! day))])))]",
            "ftInfAUExpanded": "(G (night -> (backup V (! day))))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04b0-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R32",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "The catalog shall be reached in no more than 10 s after the login, at least 85% of the times.",
        "comments": "",
        "fulltext": "whenever login System shall with probability >0.85 within 10 seconds satisfy getCatalogue",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "login",
                "getCatalogue"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(login)",
            "regular_condition": "(login)",
            "conditionTextRange": [
                0,
                13
            ],
            "component_name": "System",
            "componentTextRange": [
                15,
                20
            ],
            "probability_bound": [
                ">",
                "0.85"
            ],
            "probabilityTextRange": [
                28,
                49
            ],
            "duration": "10",
            "timingTextRange": [
                51,
                67
            ],
            "post_condition": "(getCatalogue)",
            "responseTextRange": [
                69,
                88
            ],
            "diagramVariables": "CC = <b><i>(login)</i></b>,  n = <b><i>10</i></b>, Response = <b><i>(getCatalogue)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(login)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.85",
            "regular_condition_unexp_pt": "login",
            "regular_condition_unexp_ft": "login",
            "regular_condition_unexp_pctl": "login",
            "regular_condition_SMV_pt": "login",
            "regular_condition_SMV_ft": "login",
            "regular_condition_PRISM_pctl": "login",
            "post_condition_unexp_pt": "getCatalogue",
            "post_condition_unexp_ft": "getCatalogue",
            "post_condition_unexp_pctl": "getCatalogue",
            "post_condition_SMV_pt": "getCatalogue",
            "post_condition_SMV_ft": "getCatalogue",
            "post_condition_PRISM_pctl": "getCatalogue",
            "ft": "(LAST V (login -> ((F[<=10] getCatalogue) | (F[<10] LAST))))",
            "pt": "(H ((O[=10] (login & (! getCatalogue))) -> (O[<10] ((Z FALSE) | getCatalogue))))",
            "pctl": "P>=1[(G (login => (P>0.85[(F<=10 getCatalogue)])))]",
            "ptExpanded": "(H ((O[10,10] (login & (! getCatalogue))) -> (O[0,9] ((Z FALSE) | getCatalogue))))",
            "CoCoSpecCode": "H((OT(10, 10, (login and not (getCatalogue))) => OT(9, 0, (ZtoPre(false) or getCatalogue))))",
            "ftExpanded": "(LAST V (login -> ((F[0,10] getCatalogue) | (F[0,9] LAST))))",
            "pctlExpanded": "P>=1[(G (login => (P>0.85[(F<=10 getCatalogue)])))]",
            "ftInfAUExpanded": "(G (login -> (F[0,10] getCatalogue)))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04b1-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R149",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "In a mobile communications network, is the time taken to send an SMS message between two handsets less than 5 seconds with more than 95% probability?",
        "comments": "",
        "fulltext": "in handset mode upon startMessaging MobileCommsNetwork shall with probability > 0.95 within 5 seconds satisfy sendMessage ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "handset",
                "startMessaging",
                "sendMessage"
            ],
            "scope_mode": "handset",
            "scopeTextRange": [
                0,
                14
            ],
            "qualifier_word": "upon",
            "pre_condition": "(startMessaging)",
            "regular_condition": "(startMessaging)",
            "conditionTextRange": [
                16,
                34
            ],
            "component_name": "MobileCommsNetwork",
            "componentTextRange": [
                36,
                53
            ],
            "probability_bound": [
                ">",
                "0.95"
            ],
            "probabilityTextRange": [
                61,
                83
            ],
            "duration": "5",
            "timingTextRange": [
                85,
                100
            ],
            "post_condition": "(sendMessage)",
            "responseTextRange": [
                102,
                120
            ],
            "diagramVariables": "M = <b><i>handset</i></b>, TC = <b><i>(startMessaging)</i></b>,  n = <b><i>5</i></b>, Response = <b><i>(sendMessage)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>handset</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(startMessaging)</i></b> is true and any point in the interval where <b><i>(startMessaging)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>5</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>5</i></b>). If the interval ends sooner than trigger+<b><i>5</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_within_satisfaction.svg",
            "scope_mode_pt": "handset",
            "scope_mode_ft": "handset",
            "scope_mode_pctl": "handset",
            "bound": ">0.95",
            "regular_condition_unexp_pt": "startMessaging",
            "regular_condition_unexp_ft": "startMessaging",
            "regular_condition_unexp_pctl": "startMessaging",
            "regular_condition_SMV_pt": "startMessaging",
            "regular_condition_SMV_ft": "startMessaging",
            "regular_condition_PRISM_pctl": "startMessaging",
            "post_condition_unexp_pt": "sendMessage",
            "post_condition_unexp_ft": "sendMessage",
            "post_condition_unexp_pctl": "sendMessage",
            "post_condition_SMV_pt": "sendMessage",
            "post_condition_SMV_ft": "sendMessage",
            "post_condition_PRISM_pctl": "sendMessage",
            "ft": "((LAST V ((! (Fin_handset & (! LAST))) | (X (((Lin_handset | LAST) V (((! startMessaging) & ((! LAST) & ((X startMessaging) & (! (Lin_handset | LAST))))) -> ((X ((F[<=5] sendMessage) | (F[<5] (Lin_handset | LAST)))) & (! (Lin_handset | LAST))))) & (startMessaging -> ((F[<=5] sendMessage) | (F[<5] (Lin_handset | LAST)))))))) & (handset -> (((Lin_handset | LAST) V (((! startMessaging) & ((! LAST) & ((X startMessaging) & (! (Lin_handset | LAST))))) -> ((X ((F[<=5] sendMessage) | (F[<5] (Lin_handset | LAST)))) & (! (Lin_handset | LAST))))) & (startMessaging -> ((F[<=5] sendMessage) | (F[<5] (Lin_handset | LAST)))))))",
            "pt": "((H (Lin_handset -> (Y (((O[=5] ((startMessaging & ((Y (! startMessaging)) | Fin_handset)) & (! sendMessage))) -> (O[<5] (Fin_handset | sendMessage))) S (((O[=5] ((startMessaging & ((Y (! startMessaging)) | Fin_handset)) & (! sendMessage))) -> (O[<5] (Fin_handset | sendMessage))) & Fin_handset))))) & (((! Lin_handset) S ((! Lin_handset) & Fin_handset)) -> (((O[=5] ((startMessaging & ((Y (! startMessaging)) | Fin_handset)) & (! sendMessage))) -> (O[<5] (Fin_handset | sendMessage))) S (((O[=5] ((startMessaging & ((Y (! startMessaging)) | Fin_handset)) & (! sendMessage))) -> (O[<5] (Fin_handset | sendMessage))) & Fin_handset))))",
            "pctl": "P>=1[((G ((! (Fin_handset & (! LAST))) | (X ((Lin_handset R (((! startMessaging) & ((X startMessaging) & (! Lin_handset))) => ((X (P>0.95[(F<=5 sendMessage)])) & (! Lin_handset)))) & (startMessaging => (P>0.95[(F[<=5] sendMessage)])))))) & (handset => (Lin_handset | ((Lin_handset R (((! startMessaging) & ((X startMessaging) & (! Lin_handset))) => ((X (P>0.95[(F[<=5] sendMessage)])) & (! Lin_handset)))) & (startMessaging => (P>0.95[(F[<=5] sendMessage)]))))))]",
            "ptExpanded": "((H (((! handset) & (Y handset)) -> (Y (((O[5,5] ((startMessaging & ((Y (! startMessaging)) | (handset & (Z (! handset))))) & (! sendMessage))) -> (O[0,4] ((handset & (Z (! handset))) | sendMessage))) S (((O[5,5] ((startMessaging & ((Y (! startMessaging)) | (handset & (Z (! handset))))) & (! sendMessage))) -> (O[0,4] ((handset & (Z (! handset))) | sendMessage))) & (handset & (Z (! handset)))))))) & (((! ((! handset) & (Y handset))) S ((! ((! handset) & (Y handset))) & (handset & (Z (! handset))))) -> (((O[5,5] ((startMessaging & ((Y (! startMessaging)) | (handset & (Z (! handset))))) & (! sendMessage))) -> (O[0,4] ((handset & (Z (! handset))) | sendMessage))) S (((O[5,5] ((startMessaging & ((Y (! startMessaging)) | (handset & (Z (! handset))))) & (! sendMessage))) -> (O[0,4] ((handset & (Z (! handset))) | sendMessage))) & (handset & (Z (! handset)))))))",
            "CoCoSpecCode": "(H(((not (handset) and YtoPre(handset)) => YtoPre(SI((handset and ZtoPre(not (handset))),(OT(5, 5, ((startMessaging and (YtoPre(not (startMessaging)) or (handset and ZtoPre(not (handset))))) and not (sendMessage))) => OT(4, 0, ((handset and ZtoPre(not (handset))) or sendMessage))))))) and (SI((handset and ZtoPre(not (handset))),not ((not (handset) and YtoPre(handset)))) => SI((handset and ZtoPre(not (handset))),(OT(5, 5, ((startMessaging and (YtoPre(not (startMessaging)) or (handset and ZtoPre(not (handset))))) and not (sendMessage))) => OT(4, 0, ((handset and ZtoPre(not (handset))) or sendMessage))))))",
            "ftExpanded": "((LAST V ((! ((((! handset) & (! LAST)) & (X handset)) & (! LAST))) | (X (((((handset & (! LAST)) & (X (! handset))) | LAST) V (((! startMessaging) & ((! LAST) & ((X startMessaging) & (! (((handset & (! LAST)) & (X (! handset))) | LAST))))) -> ((X ((F[0,5] sendMessage) | (F[0,4] (((handset & (! LAST)) & (X (! handset))) | LAST)))) & (! (((handset & (! LAST)) & (X (! handset))) | LAST))))) & (startMessaging -> ((F[0,5] sendMessage) | (F[0,4] (((handset & (! LAST)) & (X (! handset))) | LAST)))))))) & (handset -> (((((handset & (! LAST)) & (X (! handset))) | LAST) V (((! startMessaging) & ((! LAST) & ((X startMessaging) & (! (((handset & (! LAST)) & (X (! handset))) | LAST))))) -> ((X ((F[0,5] sendMessage) | (F[0,4] (((handset & (! LAST)) & (X (! handset))) | LAST)))) & (! (((handset & (! LAST)) & (X (! handset))) | LAST))))) & (startMessaging -> ((F[0,5] sendMessage) | (F[0,4] (((handset & (! LAST)) & (X (! handset))) | LAST)))))))",
            "pctlExpanded": "P>=1[((G ((! (((! handset) & (X handset)) & (! false))) | (X (((handset & (X (! handset))) R (((! startMessaging) & ((X startMessaging) & (! (handset & (X (! handset)))))) => ((X (P>0.95[(F<=5 sendMessage)])) & (! (handset & (X (! handset))))))) & (startMessaging => (P>0.95[(F[<=5] sendMessage)])))))) & (handset => ((handset & (X (! handset))) | (((handset & (X (! handset))) R (((! startMessaging) & ((X startMessaging) & (! (handset & (X (! handset)))))) => ((X (P>0.95[(F[<=5] sendMessage)])) & (! (handset & (X (! handset))))))) & (startMessaging => (P>0.95[(F[<=5] sendMessage)]))))))]",
            "ftInfAUExpanded": "((G ((! ((! handset) & (X handset))) | (X (((handset & (X (! handset))) V (((! startMessaging) & ((X startMessaging) & (! (handset & (X (! handset)))))) -> ((X ((F[0,5] sendMessage) | (F[0,4] (handset & (X (! handset)))))) & (! (handset & (X (! handset))))))) & (startMessaging -> ((F[0,5] sendMessage) | (F[0,4] (handset & (X (! handset)))))))))) & (handset -> (((handset & (X (! handset))) V (((! startMessaging) & ((X startMessaging) & (! (handset & (X (! handset)))))) -> ((X ((F[0,5] sendMessage) | (F[0,4] (handset & (X (! handset)))))) & (! (handset & (X (! handset))))))) & (startMessaging -> ((F[0,5] sendMessage) | (F[0,4] (handset & (X (! handset)))))))))",
            "component": "MobileCommsNetwork"
        },
        "status": "",
        "_id": "7fae04b2-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R8",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "Data in non-volatile memory must persist with a probability of 99.999% for a duration of 3 years ",
        "comments": "",
        "fulltext": "System shall with probability >= 0.99999 for 3 ticks satisfy dataPersists",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "for",
            "response": "satisfaction",
            "variables": [
                "dataPersists"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">=",
                "0.99999"
            ],
            "probabilityTextRange": [
                13,
                39
            ],
            "duration": "3",
            "timingTextRange": [
                41,
                51
            ],
            "post_condition": "(dataPersists)",
            "responseTextRange": [
                53,
                72
            ],
            "diagramVariables": " n = <b><i>3</i></b>, Response = <b><i>(dataPersists)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the trigger and remain true for <b><i>3</i></b> time points past the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>3</i></b>), or to the end of the interval if the interval ends sooner than trigger+<b><i>3</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_for_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.99999",
            "post_condition_unexp_pt": "dataPersists",
            "post_condition_unexp_ft": "dataPersists",
            "post_condition_unexp_pctl": "dataPersists",
            "post_condition_SMV_pt": "dataPersists",
            "post_condition_SMV_ft": "dataPersists",
            "post_condition_PRISM_pctl": "dataPersists",
            "ft": "((G[<=3] dataPersists) | (LAST V dataPersists))",
            "pt": "(H ((O[<=3] (Z FALSE)) -> dataPersists))",
            "pctl": "(P>=0.99999[(G<=3 dataPersists)])",
            "ptExpanded": "(H ((O[0,3] (Z FALSE)) -> dataPersists))",
            "CoCoSpecCode": "H((OT(3, 0, ZtoPre(false)) => dataPersists))",
            "ftExpanded": "((G[0,3] dataPersists) | (LAST V dataPersists))",
            "pctlExpanded": "(P>=0.99999[(G<=3 dataPersists)])",
            "ftInfAUExpanded": "((G[0,3] dataPersists) | (G dataPersists))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04b3-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R127",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "if the credit of a user is verified to be valid, the probability that the user can eventually obtain a video within 2 minutes is 90%",
        "comments": "",
        "fulltext": "if credit_valid System shall with probability >0.9 eventually satisfy obtain_video",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "credit_valid",
                "obtain_video"
            ],
            "qualifier_word": "if",
            "pre_condition": "(credit_valid)",
            "regular_condition": "(credit_valid)",
            "conditionTextRange": [
                0,
                14
            ],
            "component_name": "System",
            "componentTextRange": [
                16,
                21
            ],
            "probability_bound": [
                ">",
                "0.9"
            ],
            "probabilityTextRange": [
                29,
                49
            ],
            "timingTextRange": [
                51,
                60
            ],
            "post_condition": "(obtain_video)",
            "responseTextRange": [
                62,
                81
            ],
            "diagramVariables": "TC = <b><i>(credit_valid)</i></b>, Response = <b><i>(obtain_video)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(credit_valid)</i></b> is true and any point in the interval where <b><i>(credit_valid)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.9",
            "regular_condition_unexp_pt": "credit_valid",
            "regular_condition_unexp_ft": "credit_valid",
            "regular_condition_unexp_pctl": "credit_valid",
            "regular_condition_SMV_pt": "credit_valid",
            "regular_condition_SMV_ft": "credit_valid",
            "regular_condition_PRISM_pctl": "credit_valid",
            "post_condition_unexp_pt": "obtain_video",
            "post_condition_unexp_ft": "obtain_video",
            "post_condition_unexp_pctl": "obtain_video",
            "post_condition_SMV_pt": "obtain_video",
            "post_condition_SMV_ft": "obtain_video",
            "post_condition_PRISM_pctl": "obtain_video",
            "ft": "((LAST V (((! credit_valid) & ((! LAST) & (X credit_valid))) -> (X ((! LAST) U obtain_video)))) & (credit_valid -> ((! LAST) U obtain_video)))",
            "pt": "((H (! credit_valid)) | (! ((! obtain_video) S ((! obtain_video) & (credit_valid & (Z (! credit_valid)))))))",
            "pctl": "P>=1[((G (((! credit_valid) & (X credit_valid)) => (X (P>0.9[(F obtain_video)])))) & (credit_valid => (P>0.9[(F obtain_video)])))]",
            "ptExpanded": "((H (! credit_valid)) | (! ((! obtain_video) S ((! obtain_video) & (credit_valid & (Z (! credit_valid)))))))",
            "CoCoSpecCode": "(H(not (credit_valid)) or not (SI((credit_valid and ZtoPre(not (credit_valid))),not (obtain_video))))",
            "ftExpanded": "((LAST V (((! credit_valid) & ((! LAST) & (X credit_valid))) -> (X ((! LAST) U obtain_video)))) & (credit_valid -> ((! LAST) U obtain_video)))",
            "pctlExpanded": "P>=1[((G (((! credit_valid) & (X credit_valid)) => (X (P>0.9[(F obtain_video)])))) & (credit_valid => (P>0.9[(F obtain_video)])))]",
            "ftInfAUExpanded": "((G (((! credit_valid) & (X credit_valid)) -> (X (F obtain_video)))) & (credit_valid -> (F obtain_video)))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04b4-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R88",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "A QUMComponent is failed whenever it has entered a failure pattern state machine. Hence, whenever the value of the variable %module id% state is greater than %#normstate%, the component is failed",
        "comments": "",
        "fulltext": "QUMComponent shall with probability > 0.5 within 10 ticks satisfy (module_id_state > normstate)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "module_id_state",
                "normstate"
            ],
            "component_name": "QUMComponent",
            "componentTextRange": [
                0,
                11
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                19,
                40
            ],
            "duration": "10",
            "timingTextRange": [
                42,
                56
            ],
            "post_condition": "(( module_id_state > normstate ))",
            "responseTextRange": [
                58,
                94
            ],
            "diagramVariables": " n = <b><i>10</i></b>, Response = <b><i>(( module_id_state > normstate ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "(module_id_state > normstate)",
            "post_condition_unexp_ft": "(module_id_state > normstate)",
            "post_condition_unexp_pctl": "(module_id_state > normstate)",
            "post_condition_SMV_pt": "(module_id_state > normstate)",
            "post_condition_SMV_ft": "(module_id_state > normstate)",
            "post_condition_PRISM_pctl": "(module_id_state > normstate)",
            "ft": "((F[<=10] (module_id_state > normstate)) | (F[<10] LAST))",
            "pt": "(H ((H (! (module_id_state > normstate))) -> (O[<10] (Z FALSE))))",
            "pctl": "(P>0.5[(F<=10 (module_id_state > normstate))])",
            "ptExpanded": "(H ((H (! (module_id_state > normstate))) -> (O[0,9] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not ((module_id_state > normstate))) => OT(9, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,10] (module_id_state > normstate)) | (F[0,9] LAST))",
            "pctlExpanded": "(P>0.5[(F<=10 (module_id_state > normstate))])",
            "ftInfAUExpanded": "(F[0,10] (module_id_state > normstate))",
            "component": "QUMComponent"
        },
        "status": "",
        "_id": "7fae04b5-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R172",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "Only, after the concentration of the repressor protein is more than 0.5, the probability that the regulation of the protein will be repressed is greater than 0.9.",
        "comments": "",
        "fulltext": "System shall with probability > 0.9 before concentration>0.5 satisfy !repress_protein ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "before",
            "response": "satisfaction",
            "variables": [
                "concentration",
                "repress_protein"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.9"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "stop_condition": "(concentration > 0.5)",
            "timingTextRange": [
                36,
                59
            ],
            "post_condition": "(! repress_protein)",
            "responseTextRange": [
                61,
                84
            ],
            "diagramVariables": "SC = <b><i>(concentration > 0.5)</i></b>, Response = <b><i>(! repress_protein)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at least once strictly before the state where the stop condition holds. If the stop condition never occurs in the interval, RES does not need to hold. If the stop condition holds at the trigger, the requirement is not satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_before_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.9",
            "post_condition_unexp_pt": "(! repress_protein)",
            "post_condition_unexp_ft": "(! repress_protein)",
            "post_condition_unexp_pctl": "(! repress_protein)",
            "post_condition_SMV_pt": "(! repress_protein)",
            "post_condition_SMV_ft": "(! repress_protein)",
            "post_condition_PRISM_pctl": "(! repress_protein)",
            "stop_condition_unexp_pt": "(concentration > 0.5)",
            "stop_condition_unexp_ft": "(concentration > 0.5)",
            "stop_condition_PRISM_pctl": "(concentration > 0.5)",
            "stop_condition_SMV_pt": "(concentration > 0.5)",
            "stop_condition_SMV_ft": "(concentration > 0.5)",
            "ft": "(((! repress_protein) | LAST) V (! (concentration > 0.5)))",
            "pt": "(H ((concentration > 0.5) -> (Y (O (! repress_protein)))))",
            "pctl": "(P>0.9[(((! repress_protein) | LAST) R (! undefined))])",
            "ptExpanded": "(H ((concentration > 0.5) -> (Y (O (! repress_protein)))))",
            "CoCoSpecCode": "H(((concentration > 0.5) => YtoPre(O(not (repress_protein)))))",
            "ftExpanded": "(((! repress_protein) | LAST) V (! (concentration > 0.5)))",
            "pctlExpanded": "(P>0.9[(((! repress_protein) | false) R (! (concentration > 0.5)))])",
            "ftInfAUExpanded": "((! repress_protein) V (! (concentration > 0.5)))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04b6-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R24b",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "browseCatalog (class A, denoted with a star symbol in Fig. 9) invoked with a probability of 99 %, and makePurchase (class B, denoted with a bullet point in Fig. 9) is invoked with a probability of 1 %.",
        "comments": "",
        "fulltext": "System shall with probability >=0.01 eventually satisfy invokeMakePurchase",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "invokeMakePurchase"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">=",
                "0.01"
            ],
            "probabilityTextRange": [
                13,
                35
            ],
            "timingTextRange": [
                37,
                46
            ],
            "post_condition": "(invokeMakePurchase)",
            "responseTextRange": [
                48,
                73
            ],
            "diagramVariables": "Response = <b><i>(invokeMakePurchase)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.01",
            "post_condition_unexp_pt": "invokeMakePurchase",
            "post_condition_unexp_ft": "invokeMakePurchase",
            "post_condition_unexp_pctl": "invokeMakePurchase",
            "post_condition_SMV_pt": "invokeMakePurchase",
            "post_condition_SMV_ft": "invokeMakePurchase",
            "post_condition_PRISM_pctl": "invokeMakePurchase",
            "ft": "((! LAST) U invokeMakePurchase)",
            "pt": "(O invokeMakePurchase)",
            "pctl": "(P>=0.01[(F invokeMakePurchase)])",
            "ptExpanded": "(O invokeMakePurchase)",
            "CoCoSpecCode": "O(invokeMakePurchase)",
            "ftExpanded": "((! LAST) U invokeMakePurchase)",
            "pctlExpanded": "(P>=0.01[(F invokeMakePurchase)])",
            "ftInfAUExpanded": "(F invokeMakePurchase)",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04b7-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R141",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "one participant gets access to other party’s secret without communicating its own secrets",
        "comments": "",
        "fulltext": "Participants shall with probability > 0.5 eventually satisfy  (! kA & kB)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "kA",
                "kB"
            ],
            "component_name": "Participants",
            "componentTextRange": [
                0,
                11
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                19,
                40
            ],
            "timingTextRange": [
                42,
                51
            ],
            "post_condition": "(( ! kA & kB ))",
            "responseTextRange": [
                53,
                72
            ],
            "diagramVariables": "Response = <b><i>(( ! kA & kB ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "((! kA) & kB)",
            "post_condition_unexp_ft": "((! kA) & kB)",
            "post_condition_unexp_pctl": "((! kA) & kB)",
            "post_condition_SMV_pt": "((! kA) & kB)",
            "post_condition_SMV_ft": "((! kA) & kB)",
            "post_condition_PRISM_pctl": "((! kA) & kB)",
            "ft": "((! LAST) U ((! kA) & kB))",
            "pt": "(O ((! kA) & kB))",
            "pctl": "(P>0.5[(F ((! kA) & kB))])",
            "ptExpanded": "(O ((! kA) & kB))",
            "CoCoSpecCode": "O((not (kA) and kB))",
            "ftExpanded": "((! LAST) U ((! kA) & kB))",
            "pctlExpanded": "(P>0.5[(F ((! kA) & kB))])",
            "ftInfAUExpanded": "(F ((! kA) & kB))",
            "component": "Participants"
        },
        "status": "",
        "_id": "7fae04b8-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R136",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "the probability that the first philosopher is able to eat before any other philosophers\n\nP=?[ \"allhungry\" U (\"othershungry\" & \"eat\") ]",
        "comments": "",
        "fulltext": "System shall with probability >0.5 until othershungry & eat satisfy allhungry",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "othershungry",
                "eat",
                "allhungry"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                33
            ],
            "stop_condition": "(othershungry & eat)",
            "timingTextRange": [
                35,
                58
            ],
            "post_condition": "(allhungry)",
            "responseTextRange": [
                60,
                76
            ],
            "diagramVariables": "SC = <b><i>(othershungry & eat)</i></b>, Response = <b><i>(allhungry)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_until_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "allhungry",
            "post_condition_unexp_ft": "allhungry",
            "post_condition_unexp_pctl": "allhungry",
            "post_condition_SMV_pt": "allhungry",
            "post_condition_SMV_ft": "allhungry",
            "post_condition_PRISM_pctl": "allhungry",
            "stop_condition_unexp_pt": "(othershungry & eat)",
            "stop_condition_unexp_ft": "(othershungry & eat)",
            "stop_condition_PRISM_pctl": "(othershungry & eat)",
            "stop_condition_SMV_pt": "(othershungry & eat)",
            "stop_condition_SMV_ft": "(othershungry & eat)",
            "ft": "(((othershungry & eat) V (allhungry | (othershungry & eat))) | (LAST V allhungry))",
            "pt": "(H ((H (! (othershungry & eat))) -> allhungry))",
            "pctl": "(P>0.5[((undefined R (allhungry | undefined)) | (LAST R allhungry))])",
            "ptExpanded": "(H ((H (! (othershungry & eat))) -> allhungry))",
            "CoCoSpecCode": "H((H(not ((othershungry and eat))) => allhungry))",
            "ftExpanded": "(((othershungry & eat) V (allhungry | (othershungry & eat))) | (LAST V allhungry))",
            "pctlExpanded": "(P>0.5[(((othershungry & eat) R (allhungry | (othershungry & eat))) | (false R allhungry))])",
            "ftInfAUExpanded": "((othershungry & eat) V (allhungry | (othershungry & eat)))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04b9-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R57",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "quantify the ability of the system to free the resources used for adaptation once they are not required anymore (i.e., deactivation of DRPPs below a threshold α that can be instanced with different values) by a given deadline t \n\nP(F ≤t drpps ≤ α )",
        "comments": "",
        "fulltext": "System shall with probability >0.5 within 10 ticks satisfy drpps <= a",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "drpps",
                "a"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                33
            ],
            "duration": "10",
            "timingTextRange": [
                35,
                49
            ],
            "post_condition": "(drpps <= a)",
            "responseTextRange": [
                51,
                68
            ],
            "diagramVariables": " n = <b><i>10</i></b>, Response = <b><i>(drpps <= a)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "(drpps <= a)",
            "post_condition_unexp_ft": "(drpps <= a)",
            "post_condition_unexp_pctl": "(drpps <= a)",
            "post_condition_SMV_pt": "(drpps <= a)",
            "post_condition_SMV_ft": "(drpps <= a)",
            "post_condition_PRISM_pctl": "(drpps <= a)",
            "ft": "((F[<=10] (drpps <= a)) | (F[<10] LAST))",
            "pt": "(H ((H (! (drpps <= a))) -> (O[<10] (Z FALSE))))",
            "pctl": "(P>0.5[(F<=10 (drpps <= a))])",
            "ptExpanded": "(H ((H (! (drpps <= a))) -> (O[0,9] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not ((drpps <= a))) => OT(9, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,10] (drpps <= a)) | (F[0,9] LAST))",
            "pctlExpanded": "(P>0.5[(F<=10 (drpps <= a))])",
            "ftInfAUExpanded": "(F[0,10] (drpps <= a))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04ba-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R61",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "\"The probability that an assistant arrives\nwithin 1 hour, when the patient pushes\nthe panic button is greater than 0.9.\"\n\nP>0.9[needAssistance U[0,60]beginAssistance]",
        "comments": "",
        "fulltext": "upon needAssistance System shall with probability >0.9 within 60 minutes satisfy beginAssistance",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "needAssistance",
                "beginAssistance"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(needAssistance)",
            "regular_condition": "(needAssistance)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "System",
            "componentTextRange": [
                20,
                25
            ],
            "probability_bound": [
                ">",
                "0.9"
            ],
            "probabilityTextRange": [
                33,
                53
            ],
            "duration": "60",
            "timingTextRange": [
                55,
                71
            ],
            "post_condition": "(beginAssistance)",
            "responseTextRange": [
                73,
                95
            ],
            "diagramVariables": "TC = <b><i>(needAssistance)</i></b>,  n = <b><i>60</i></b>, Response = <b><i>(beginAssistance)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(needAssistance)</i></b> is true and any point in the interval where <b><i>(needAssistance)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>60</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>60</i></b>). If the interval ends sooner than trigger+<b><i>60</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.9",
            "regular_condition_unexp_pt": "needAssistance",
            "regular_condition_unexp_ft": "needAssistance",
            "regular_condition_unexp_pctl": "needAssistance",
            "regular_condition_SMV_pt": "needAssistance",
            "regular_condition_SMV_ft": "needAssistance",
            "regular_condition_PRISM_pctl": "needAssistance",
            "post_condition_unexp_pt": "beginAssistance",
            "post_condition_unexp_ft": "beginAssistance",
            "post_condition_unexp_pctl": "beginAssistance",
            "post_condition_SMV_pt": "beginAssistance",
            "post_condition_SMV_ft": "beginAssistance",
            "post_condition_PRISM_pctl": "beginAssistance",
            "ft": "((LAST V (((! needAssistance) & ((! LAST) & (X needAssistance))) -> (X ((F[<=60] beginAssistance) | (F[<60] LAST))))) & (needAssistance -> ((F[<=60] beginAssistance) | (F[<60] LAST))))",
            "pt": "(H ((O[=60] ((needAssistance & (Z (! needAssistance))) & (! beginAssistance))) -> (O[<60] ((Z FALSE) | beginAssistance))))",
            "pctl": "P>=1[((G (((! needAssistance) & (X needAssistance)) => (X (P>0.9[(F<=60 beginAssistance)])))) & (needAssistance => (P>0.9[(F[<=60] beginAssistance)])))]",
            "ptExpanded": "(H ((O[60,60] ((needAssistance & (Z (! needAssistance))) & (! beginAssistance))) -> (O[0,59] ((Z FALSE) | beginAssistance))))",
            "CoCoSpecCode": "H((OT(60, 60, ((needAssistance and ZtoPre(not (needAssistance))) and not (beginAssistance))) => OT(59, 0, (ZtoPre(false) or beginAssistance))))",
            "ftExpanded": "((LAST V (((! needAssistance) & ((! LAST) & (X needAssistance))) -> (X ((F[0,60] beginAssistance) | (F[0,59] LAST))))) & (needAssistance -> ((F[0,60] beginAssistance) | (F[0,59] LAST))))",
            "pctlExpanded": "P>=1[((G (((! needAssistance) & (X needAssistance)) => (X (P>0.9[(F<=60 beginAssistance)])))) & (needAssistance => (P>0.9[(F[<=60] beginAssistance)])))]",
            "ftInfAUExpanded": "((G (((! needAssistance) & (X needAssistance)) -> (X (F[0,60] beginAssistance)))) & (needAssistance -> (F[0,60] beginAssistance)))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04bb-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R42",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "The probability for a request of static content of experiencing a cache miss is less than 0.15",
        "comments": "",
        "fulltext": "System shall with probability >=0.15 at the next timepoint satisfy s=4",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "next",
            "response": "satisfaction",
            "variables": [
                "s"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">=",
                "0.15"
            ],
            "probabilityTextRange": [
                13,
                35
            ],
            "timingTextRange": [
                37,
                57
            ],
            "post_condition": "(s = 4)",
            "responseTextRange": [
                59,
                69
            ],
            "diagramVariables": "Response = <b><i>(s = 4)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_next_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.15",
            "post_condition_unexp_pt": "(s = 4)",
            "post_condition_unexp_ft": "(s = 4)",
            "post_condition_unexp_pctl": "(s = 4)",
            "post_condition_SMV_pt": "(s = 4)",
            "post_condition_SMV_ft": "(s = 4)",
            "post_condition_PRISM_pctl": "(s = 4)",
            "ft": "(LAST | (X (s = 4)))",
            "pt": "(H ((Y (Z FALSE)) -> (s = 4)))",
            "pctl": "(P>=0.15[(LAST | (X (s = 4)))])",
            "ptExpanded": "(H ((Y (Z FALSE)) -> (s = 4)))",
            "CoCoSpecCode": "H((YtoPre(ZtoPre(false)) => (s = 4)))",
            "ftExpanded": "(LAST | (X (s = 4)))",
            "pctlExpanded": "(P>=0.15[(false | (X (s = 4)))])",
            "ftInfAUExpanded": "(X (s = 4))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04bc-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R157",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "With probability greater than 0.99, during the lifetime (m) of a robot, whenever it is  out of battery (A), it will be fully recharged (B) in the next n steps\n\n[G<=m(A ⇒ [F<=n B]>=1)]>=0.99",
        "comments": "",
        "fulltext": "Whenever bigA System shall with probability >= 0.99 within 10 ticks satisfy bigB",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "bigA",
                "bigB"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(bigA)",
            "regular_condition": "(bigA)",
            "conditionTextRange": [
                0,
                12
            ],
            "component_name": "System",
            "componentTextRange": [
                14,
                19
            ],
            "probability_bound": [
                ">=",
                "0.99"
            ],
            "probabilityTextRange": [
                27,
                50
            ],
            "duration": "10",
            "timingTextRange": [
                52,
                66
            ],
            "post_condition": "(bigB)",
            "responseTextRange": [
                68,
                79
            ],
            "diagramVariables": "CC = <b><i>(bigA)</i></b>,  n = <b><i>10</i></b>, Response = <b><i>(bigB)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(bigA)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.99",
            "regular_condition_unexp_pt": "bigA",
            "regular_condition_unexp_ft": "bigA",
            "regular_condition_unexp_pctl": "bigA",
            "regular_condition_SMV_pt": "bigA",
            "regular_condition_SMV_ft": "bigA",
            "regular_condition_PRISM_pctl": "bigA",
            "post_condition_unexp_pt": "bigB",
            "post_condition_unexp_ft": "bigB",
            "post_condition_unexp_pctl": "bigB",
            "post_condition_SMV_pt": "bigB",
            "post_condition_SMV_ft": "bigB",
            "post_condition_PRISM_pctl": "bigB",
            "ft": "(LAST V (bigA -> ((F[<=10] bigB) | (F[<10] LAST))))",
            "pt": "(H ((O[=10] (bigA & (! bigB))) -> (O[<10] ((Z FALSE) | bigB))))",
            "pctl": "P>=1[(G (bigA => (P>=0.99[(F<=10 bigB)])))]",
            "ptExpanded": "(H ((O[10,10] (bigA & (! bigB))) -> (O[0,9] ((Z FALSE) | bigB))))",
            "CoCoSpecCode": "H((OT(10, 10, (bigA and not (bigB))) => OT(9, 0, (ZtoPre(false) or bigB))))",
            "ftExpanded": "(LAST V (bigA -> ((F[0,10] bigB) | (F[0,9] LAST))))",
            "pctlExpanded": "P>=1[(G (bigA => (P>=0.99[(F<=10 bigB)])))]",
            "ftInfAUExpanded": "(G (bigA -> (F[0,10] bigB)))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04bd-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R124",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "After the patient submits a request to the MSA, within 30 s and with 90% probability, MSA will send the hospital list returned by MMI to the patient.",
        "comments": "",
        "fulltext": "if request_submitted MSA shall with probability >0.9 within 30 seconds satisfy send_hospital_list",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "request_submitted",
                "send_hospital_list"
            ],
            "qualifier_word": "if",
            "pre_condition": "(request_submitted)",
            "regular_condition": "(request_submitted)",
            "conditionTextRange": [
                0,
                19
            ],
            "component_name": "MSA",
            "componentTextRange": [
                21,
                23
            ],
            "probability_bound": [
                ">",
                "0.9"
            ],
            "probabilityTextRange": [
                31,
                51
            ],
            "duration": "30",
            "timingTextRange": [
                53,
                69
            ],
            "post_condition": "(send_hospital_list)",
            "responseTextRange": [
                71,
                96
            ],
            "diagramVariables": "TC = <b><i>(request_submitted)</i></b>,  n = <b><i>30</i></b>, Response = <b><i>(send_hospital_list)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(request_submitted)</i></b> is true and any point in the interval where <b><i>(request_submitted)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>30</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>30</i></b>). If the interval ends sooner than trigger+<b><i>30</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.9",
            "regular_condition_unexp_pt": "request_submitted",
            "regular_condition_unexp_ft": "request_submitted",
            "regular_condition_unexp_pctl": "request_submitted",
            "regular_condition_SMV_pt": "request_submitted",
            "regular_condition_SMV_ft": "request_submitted",
            "regular_condition_PRISM_pctl": "request_submitted",
            "post_condition_unexp_pt": "send_hospital_list",
            "post_condition_unexp_ft": "send_hospital_list",
            "post_condition_unexp_pctl": "send_hospital_list",
            "post_condition_SMV_pt": "send_hospital_list",
            "post_condition_SMV_ft": "send_hospital_list",
            "post_condition_PRISM_pctl": "send_hospital_list",
            "ft": "((LAST V (((! request_submitted) & ((! LAST) & (X request_submitted))) -> (X ((F[<=30] send_hospital_list) | (F[<30] LAST))))) & (request_submitted -> ((F[<=30] send_hospital_list) | (F[<30] LAST))))",
            "pt": "(H ((O[=30] ((request_submitted & (Z (! request_submitted))) & (! send_hospital_list))) -> (O[<30] ((Z FALSE) | send_hospital_list))))",
            "pctl": "P>=1[((G (((! request_submitted) & (X request_submitted)) => (X (P>0.9[(F<=30 send_hospital_list)])))) & (request_submitted => (P>0.9[(F[<=30] send_hospital_list)])))]",
            "ptExpanded": "(H ((O[30,30] ((request_submitted & (Z (! request_submitted))) & (! send_hospital_list))) -> (O[0,29] ((Z FALSE) | send_hospital_list))))",
            "CoCoSpecCode": "H((OT(30, 30, ((request_submitted and ZtoPre(not (request_submitted))) and not (send_hospital_list))) => OT(29, 0, (ZtoPre(false) or send_hospital_list))))",
            "ftExpanded": "((LAST V (((! request_submitted) & ((! LAST) & (X request_submitted))) -> (X ((F[0,30] send_hospital_list) | (F[0,29] LAST))))) & (request_submitted -> ((F[0,30] send_hospital_list) | (F[0,29] LAST))))",
            "pctlExpanded": "P>=1[((G (((! request_submitted) & (X request_submitted)) => (X (P>0.9[(F<=30 send_hospital_list)])))) & (request_submitted => (P>0.9[(F[<=30] send_hospital_list)])))]",
            "ftInfAUExpanded": "((G (((! request_submitted) & (X request_submitted)) -> (X (F[0,30] send_hospital_list)))) & (request_submitted -> (F[0,30] send_hospital_list)))",
            "component": "MSA"
        },
        "status": "",
        "_id": "7fae04be-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R132",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "The probability P1 that no failures ever occurs is greater than 0.7",
        "comments": "",
        "fulltext": "System shall with probability >0.7 never satisfy fail",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "never",
            "response": "satisfaction",
            "variables": [
                "fail"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.7"
            ],
            "probabilityTextRange": [
                13,
                33
            ],
            "timingTextRange": [
                35,
                39
            ],
            "post_condition": "(fail)",
            "responseTextRange": [
                41,
                52
            ],
            "diagramVariables": "Response = <b><i>(fail)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must be false at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_never_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.7",
            "post_condition_unexp_pt": "fail",
            "post_condition_unexp_ft": "fail",
            "post_condition_unexp_pctl": "fail",
            "post_condition_SMV_pt": "fail",
            "post_condition_SMV_ft": "fail",
            "post_condition_PRISM_pctl": "fail",
            "ft": "(LAST V (! fail))",
            "pt": "(H (! fail))",
            "pctl": "(P>0.7[(G (! fail))])",
            "ptExpanded": "(H (! fail))",
            "CoCoSpecCode": "H(not (fail))",
            "ftExpanded": "(LAST V (! fail))",
            "pctlExpanded": "(P>0.7[(G (! fail))])",
            "ftInfAUExpanded": "(G (! fail))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04bf-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R51",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "Probability of processing a request in four operations\n\nP=?[F[<=4] HttpResponse]",
        "comments": "",
        "fulltext": "System shall with probability >0.8 within 4 ticks satisfy HttpResponse",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "HttpResponse"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.8"
            ],
            "probabilityTextRange": [
                13,
                33
            ],
            "duration": "4",
            "timingTextRange": [
                35,
                48
            ],
            "post_condition": "(HttpResponse)",
            "responseTextRange": [
                50,
                69
            ],
            "diagramVariables": " n = <b><i>4</i></b>, Response = <b><i>(HttpResponse)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>4</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>4</i></b>). If the interval ends sooner than trigger+<b><i>4</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.8",
            "post_condition_unexp_pt": "HttpResponse",
            "post_condition_unexp_ft": "HttpResponse",
            "post_condition_unexp_pctl": "HttpResponse",
            "post_condition_SMV_pt": "HttpResponse",
            "post_condition_SMV_ft": "HttpResponse",
            "post_condition_PRISM_pctl": "HttpResponse",
            "ft": "((F[<=4] HttpResponse) | (F[<4] LAST))",
            "pt": "(H ((H (! HttpResponse)) -> (O[<4] (Z FALSE))))",
            "pctl": "(P>0.8[(F<=4 HttpResponse)])",
            "ptExpanded": "(H ((H (! HttpResponse)) -> (O[0,3] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (HttpResponse)) => OT(3, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,4] HttpResponse) | (F[0,3] LAST))",
            "pctlExpanded": "(P>0.8[(F<=4 HttpResponse)])",
            "ftInfAUExpanded": "(F[0,4] HttpResponse)",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04c0-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R66",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": " P = ? [true U msgs_in_service = proc_limit & msgs_in_queue = B]",
        "comments": "",
        "fulltext": "System shall with probability > 0.5 eventually satisfy msgs_in_service = proc_limit & msgs_in_queue = B",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "msgs_in_service",
                "proc_limit",
                "msgs_in_queue",
                "B"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "timingTextRange": [
                36,
                45
            ],
            "post_condition": "(msgs_in_service = proc_limit & msgs_in_queue = B)",
            "responseTextRange": [
                47,
                102
            ],
            "diagramVariables": "Response = <b><i>(msgs_in_service = proc_limit & msgs_in_queue = B)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "((msgs_in_service = proc_limit) & (msgs_in_queue = B))",
            "post_condition_unexp_ft": "((msgs_in_service = proc_limit) & (msgs_in_queue = B))",
            "post_condition_unexp_pctl": "((msgs_in_service = proc_limit) & (msgs_in_queue = B))",
            "post_condition_SMV_pt": "((msgs_in_service = proc_limit) & (msgs_in_queue = B))",
            "post_condition_SMV_ft": "((msgs_in_service = proc_limit) & (msgs_in_queue = B))",
            "post_condition_PRISM_pctl": "((msgs_in_service = proc_limit) & (msgs_in_queue = B))",
            "ft": "((! LAST) U ((msgs_in_service = proc_limit) & (msgs_in_queue = B)))",
            "pt": "(O ((msgs_in_service = proc_limit) & (msgs_in_queue = B)))",
            "pctl": "(P>0.5[(F ((msgs_in_service = proc_limit) & (msgs_in_queue = B)))])",
            "ptExpanded": "(O ((msgs_in_service = proc_limit) & (msgs_in_queue = B)))",
            "CoCoSpecCode": "O(((msgs_in_service = proc_limit) and (msgs_in_queue = B)))",
            "ftExpanded": "((! LAST) U ((msgs_in_service = proc_limit) & (msgs_in_queue = B)))",
            "pctlExpanded": "(P>0.5[(F ((msgs_in_service = proc_limit) & (msgs_in_queue = B)))])",
            "ftInfAUExpanded": "(F ((msgs_in_service = proc_limit) & (msgs_in_queue = B)))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04c1-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R100",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "P>=p[true U [0,t] a]",
        "comments": "",
        "fulltext": "System shall with probability > 0.5 within 5 ticks satisfy a",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "a"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "duration": "5",
            "timingTextRange": [
                36,
                49
            ],
            "post_condition": "(a)",
            "responseTextRange": [
                51,
                59
            ],
            "diagramVariables": " n = <b><i>5</i></b>, Response = <b><i>(a)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>5</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>5</i></b>). If the interval ends sooner than trigger+<b><i>5</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "a",
            "post_condition_unexp_ft": "a",
            "post_condition_unexp_pctl": "a",
            "post_condition_SMV_pt": "a",
            "post_condition_SMV_ft": "a",
            "post_condition_PRISM_pctl": "a",
            "ft": "((F[<=5] a) | (F[<5] LAST))",
            "pt": "(H ((H (! a)) -> (O[<5] (Z FALSE))))",
            "pctl": "(P>0.5[(F<=5 a)])",
            "ptExpanded": "(H ((H (! a)) -> (O[0,4] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (a)) => OT(4, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,5] a) | (F[0,4] LAST))",
            "pctlExpanded": "(P>0.5[(F<=5 a)])",
            "ftInfAUExpanded": "(F[0,5] a)",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04c2-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R137",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "a queue in which requests are either received or serviced with a particular probability distribution. If too many requests are received before they can be serviced, then there is an overflow of requests. The property considered computes the probability with which the queue eventually reaches such a state",
        "comments": "",
        "fulltext": "Queue shall with probability > 0.5 eventually satisfy overflow",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "overflow"
            ],
            "component_name": "Queue",
            "componentTextRange": [
                0,
                4
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                12,
                33
            ],
            "timingTextRange": [
                35,
                44
            ],
            "post_condition": "(overflow)",
            "responseTextRange": [
                46,
                61
            ],
            "diagramVariables": "Response = <b><i>(overflow)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "overflow",
            "post_condition_unexp_ft": "overflow",
            "post_condition_unexp_pctl": "overflow",
            "post_condition_SMV_pt": "overflow",
            "post_condition_SMV_ft": "overflow",
            "post_condition_PRISM_pctl": "overflow",
            "ft": "((! LAST) U overflow)",
            "pt": "(O overflow)",
            "pctl": "(P>0.5[(F overflow)])",
            "ptExpanded": "(O overflow)",
            "CoCoSpecCode": "O(overflow)",
            "ftExpanded": "((! LAST) U overflow)",
            "pctlExpanded": "(P>0.5[(F overflow)])",
            "ftInfAUExpanded": "(F overflow)",
            "component": "Queue"
        },
        "status": "",
        "_id": "7fae04c3-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R153b",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "whether G has a strategy such that: 1) with probability greater than 0.2 that G will have no less than 20 credits, and 2) in the next n rounds, with probability equal to or less than 0.3 that at each game the probability of losing all credits eventually is greater than 0.5",
        "comments": "",
        "fulltext": "System shall with probability > 0.5 within 20 ticks satisfy bigG = 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "bigG"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "duration": "20",
            "timingTextRange": [
                36,
                50
            ],
            "post_condition": "(bigG = 0)",
            "responseTextRange": [
                52,
                67
            ],
            "diagramVariables": " n = <b><i>20</i></b>, Response = <b><i>(bigG = 0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>20</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>20</i></b>). If the interval ends sooner than trigger+<b><i>20</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "(bigG = 0)",
            "post_condition_unexp_ft": "(bigG = 0)",
            "post_condition_unexp_pctl": "(bigG = 0)",
            "post_condition_SMV_pt": "(bigG = 0)",
            "post_condition_SMV_ft": "(bigG = 0)",
            "post_condition_PRISM_pctl": "(bigG = 0)",
            "ft": "((F[<=20] (bigG = 0)) | (F[<20] LAST))",
            "pt": "(H ((H (! (bigG = 0))) -> (O[<20] (Z FALSE))))",
            "pctl": "(P>0.5[(F<=20 (bigG = 0))])",
            "ptExpanded": "(H ((H (! (bigG = 0))) -> (O[0,19] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not ((bigG = 0))) => OT(19, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,20] (bigG = 0)) | (F[0,19] LAST))",
            "pctlExpanded": "(P>0.5[(F<=20 (bigG = 0))])",
            "ftInfAUExpanded": "(F[0,20] (bigG = 0))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04c4-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R94",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "“service needs to be responded within 1 sec with probability 99.999%",
        "comments": "",
        "fulltext": "upon service System shall with probability > 0.99999 within 1 second satisfy response",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "service",
                "response"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(service)",
            "regular_condition": "(service)",
            "conditionTextRange": [
                0,
                11
            ],
            "component_name": "System",
            "componentTextRange": [
                13,
                18
            ],
            "probability_bound": [
                ">",
                "0.99999"
            ],
            "probabilityTextRange": [
                26,
                51
            ],
            "duration": "1",
            "timingTextRange": [
                53,
                67
            ],
            "post_condition": "(response)",
            "responseTextRange": [
                69,
                84
            ],
            "diagramVariables": "TC = <b><i>(service)</i></b>,  n = <b><i>1</i></b>, Response = <b><i>(response)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(service)</i></b> is true and any point in the interval where <b><i>(service)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>1</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>1</i></b>). If the interval ends sooner than trigger+<b><i>1</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.99999",
            "regular_condition_unexp_pt": "service",
            "regular_condition_unexp_ft": "service",
            "regular_condition_unexp_pctl": "service",
            "regular_condition_SMV_pt": "service",
            "regular_condition_SMV_ft": "service",
            "regular_condition_PRISM_pctl": "service",
            "post_condition_unexp_pt": "response",
            "post_condition_unexp_ft": "response",
            "post_condition_unexp_pctl": "response",
            "post_condition_SMV_pt": "response",
            "post_condition_SMV_ft": "response",
            "post_condition_PRISM_pctl": "response",
            "ft": "((LAST V (((! service) & ((! LAST) & (X service))) -> (X ((F[<=1] response) | (F[<1] LAST))))) & (service -> ((F[<=1] response) | (F[<1] LAST))))",
            "pt": "(H ((O[=1] ((service & (Z (! service))) & (! response))) -> (O[<1] ((Z FALSE) | response))))",
            "pctl": "P>=1[((G (((! service) & (X service)) => (X (P>0.99999[(F<=1 response)])))) & (service => (P>0.99999[(F[<=1] response)])))]",
            "ptExpanded": "(H ((O[1,1] ((service & (Z (! service))) & (! response))) -> (O[0,0] ((Z FALSE) | response))))",
            "CoCoSpecCode": "H((OT(1, 1, ((service and ZtoPre(not (service))) and not (response))) => OT(0, 0, (ZtoPre(false) or response))))",
            "ftExpanded": "((LAST V (((! service) & ((! LAST) & (X service))) -> (X ((F[0,1] response) | (F[0,0] LAST))))) & (service -> ((F[0,1] response) | (F[0,0] LAST))))",
            "pctlExpanded": "P>=1[((G (((! service) & (X service)) => (X (P>0.99999[(F<=1 response)])))) & (service => (P>0.99999[(F[<=1] response)])))]",
            "ftInfAUExpanded": "((G (((! service) & (X service)) -> (X (F[0,1] response)))) & (service -> (F[0,1] response)))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04c5-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R162",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "if the state s is minimum (21) at the end of 24 h, with a probability less than 10%.",
        "comments": "",
        "fulltext": "System shall with probability < 0.1 immediately satisfy (t=24 & s =21)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "t",
                "s"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<",
                "0.1"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "timingTextRange": [
                36,
                46
            ],
            "post_condition": "(( t = 24 & s = 21 ))",
            "responseTextRange": [
                48,
                69
            ],
            "diagramVariables": "Response = <b><i>(( t = 24 & s = 21 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.1",
            "post_condition_unexp_pt": "((t = 24) & (s = 21))",
            "post_condition_unexp_ft": "((t = 24) & (s = 21))",
            "post_condition_unexp_pctl": "((t = 24) & (s = 21))",
            "post_condition_SMV_pt": "((t = 24) & (s = 21))",
            "post_condition_SMV_ft": "((t = 24) & (s = 21))",
            "post_condition_PRISM_pctl": "((t = 24) & (s = 21))",
            "ft": "((t = 24) & (s = 21))",
            "pt": "(H ((Z FALSE) -> ((t = 24) & (s = 21))))",
            "pctl": "(P<0.1[((t = 24) & (s = 21))])",
            "ptExpanded": "(H ((Z FALSE) -> ((t = 24) & (s = 21))))",
            "CoCoSpecCode": "H((ZtoPre(false) => ((t = 24) and (s = 21))))",
            "ftExpanded": "((t = 24) & (s = 21))",
            "pctlExpanded": "(P<0.1[((t = 24) & (s = 21))])",
            "ftInfAUExpanded": "((t = 24) & (s = 21))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04c6-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R13b",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "if a road toll gantry fails to detect a RFID signal from a passing vehicle then a camera takes a picture of the vehicle number plate 99.5% of the time and a record of an unpaid vehicle is created 99.99% of the time unless the roadside system is down.",
        "comments": "",
        "fulltext": "whenever detectionFailed & !down Camera shall with probability >= 0.9999 at the next timepoint satisfy createRecord  ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "bound",
            "timing": "next",
            "response": "satisfaction",
            "variables": [
                "detectionFailed",
                "down",
                "createRecord"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(detectionFailed & ! down)",
            "regular_condition": "(detectionFailed & ! down)",
            "conditionTextRange": [
                0,
                31
            ],
            "component_name": "Camera",
            "componentTextRange": [
                33,
                38
            ],
            "probability_bound": [
                ">=",
                "0.9999"
            ],
            "probabilityTextRange": [
                46,
                71
            ],
            "timingTextRange": [
                73,
                93
            ],
            "post_condition": "(createRecord)",
            "responseTextRange": [
                95,
                114
            ],
            "diagramVariables": "CC = <b><i>(detectionFailed & ! down)</i></b>, Response = <b><i>(createRecord)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(detectionFailed & ! down)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_next_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.9999",
            "regular_condition_unexp_pt": "(detectionFailed & (! down))",
            "regular_condition_unexp_ft": "(detectionFailed & (! down))",
            "regular_condition_unexp_pctl": "(detectionFailed & (! down))",
            "regular_condition_SMV_pt": "(detectionFailed & (! down))",
            "regular_condition_SMV_ft": "(detectionFailed & (! down))",
            "regular_condition_PRISM_pctl": "(detectionFailed & (! down))",
            "post_condition_unexp_pt": "createRecord",
            "post_condition_unexp_ft": "createRecord",
            "post_condition_unexp_pctl": "createRecord",
            "post_condition_SMV_pt": "createRecord",
            "post_condition_SMV_ft": "createRecord",
            "post_condition_PRISM_pctl": "createRecord",
            "ft": "(LAST V ((detectionFailed & (! down)) -> (LAST | (X createRecord))))",
            "pt": "(H ((Y (detectionFailed & (! down))) -> (createRecord | (Z FALSE))))",
            "pctl": "P>=1[(G ((detectionFailed & (! down)) => (P>=0.9999[(LAST | (X createRecord))])))]",
            "ptExpanded": "(H ((Y (detectionFailed & (! down))) -> (createRecord | (Z FALSE))))",
            "CoCoSpecCode": "H((YtoPre((detectionFailed and not (down))) => (createRecord or ZtoPre(false))))",
            "ftExpanded": "(LAST V ((detectionFailed & (! down)) -> (LAST | (X createRecord))))",
            "pctlExpanded": "P>=1[(G ((detectionFailed & (! down)) => (P>=0.9999[(false | (X createRecord))])))]",
            "ftInfAUExpanded": "(G ((detectionFailed & (! down)) -> (X createRecord)))",
            "component": "Camera"
        },
        "status": "",
        "_id": "7fae04c7-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R142",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "the probability of obtaining a specific roll of the die",
        "comments": "",
        "fulltext": "Die shall with probability > 0.5 eventually satisfy (s=7 & d=6)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "s",
                "d"
            ],
            "component_name": "Die",
            "componentTextRange": [
                0,
                2
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                10,
                31
            ],
            "timingTextRange": [
                33,
                42
            ],
            "post_condition": "(( s = 7 & d = 6 ))",
            "responseTextRange": [
                44,
                62
            ],
            "diagramVariables": "Response = <b><i>(( s = 7 & d = 6 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "((s = 7) & (d = 6))",
            "post_condition_unexp_ft": "((s = 7) & (d = 6))",
            "post_condition_unexp_pctl": "((s = 7) & (d = 6))",
            "post_condition_SMV_pt": "((s = 7) & (d = 6))",
            "post_condition_SMV_ft": "((s = 7) & (d = 6))",
            "post_condition_PRISM_pctl": "((s = 7) & (d = 6))",
            "ft": "((! LAST) U ((s = 7) & (d = 6)))",
            "pt": "(O ((s = 7) & (d = 6)))",
            "pctl": "(P>0.5[(F ((s = 7) & (d = 6)))])",
            "ptExpanded": "(O ((s = 7) & (d = 6)))",
            "CoCoSpecCode": "O(((s = 7) and (d = 6)))",
            "ftExpanded": "((! LAST) U ((s = 7) & (d = 6)))",
            "pctlExpanded": "(P>0.5[(F ((s = 7) & (d = 6)))])",
            "ftInfAUExpanded": "(F ((s = 7) & (d = 6)))",
            "component": "Die"
        },
        "status": "",
        "_id": "7fae04c8-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R37",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "P(0,1](trueUsuccess) [I think this was a different variant of PCTL, it is the probability over a time interval so it is written weirdly]",
        "comments": "",
        "fulltext": "System shall with probability >= 0.999 eventually satisfy success",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "success"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">=",
                "0.999"
            ],
            "probabilityTextRange": [
                13,
                37
            ],
            "timingTextRange": [
                39,
                48
            ],
            "post_condition": "(success)",
            "responseTextRange": [
                50,
                64
            ],
            "diagramVariables": "Response = <b><i>(success)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.999",
            "post_condition_unexp_pt": "success",
            "post_condition_unexp_ft": "success",
            "post_condition_unexp_pctl": "success",
            "post_condition_SMV_pt": "success",
            "post_condition_SMV_ft": "success",
            "post_condition_PRISM_pctl": "success",
            "ft": "((! LAST) U success)",
            "pt": "(O success)",
            "pctl": "(P>=0.999[(F success)])",
            "ptExpanded": "(O success)",
            "CoCoSpecCode": "O(success)",
            "ftExpanded": "((! LAST) U success)",
            "pctlExpanded": "(P>=0.999[(F success)])",
            "ftInfAUExpanded": "(F success)",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04c9-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R120",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "the probability of DSRC message reception is 82% at 0m distance, and drops off to 30% at 300m distance, assuming there are no objects such as other vehicles obstructing the line of sight",
        "comments": "",
        "fulltext": "Upon DSRCmessageReception = 0.82 & distance = 0 System shall with probability > 0.5 eventually satisfy DSRCmessageReception = 0.30 & distance = 300",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "DSRCmessageReception",
                "distance"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(DSRCmessageReception = 0.82 & distance = 0)",
            "regular_condition": "(DSRCmessageReception = 0.82 & distance = 0)",
            "conditionTextRange": [
                0,
                46
            ],
            "component_name": "System",
            "componentTextRange": [
                48,
                53
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                61,
                82
            ],
            "timingTextRange": [
                84,
                93
            ],
            "post_condition": "(DSRCmessageReception = 0.30 & distance = 300)",
            "responseTextRange": [
                95,
                146
            ],
            "diagramVariables": "TC = <b><i>(DSRCmessageReception = 0.82 & distance = 0)</i></b>, Response = <b><i>(DSRCmessageReception = 0.30 & distance = 300)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(DSRCmessageReception = 0.82 & distance = 0)</i></b> is true and any point in the interval where <b><i>(DSRCmessageReception = 0.82 & distance = 0)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "regular_condition_unexp_pt": "((DSRCmessageReception = 0.82) & (distance = 0))",
            "regular_condition_unexp_ft": "((DSRCmessageReception = 0.82) & (distance = 0))",
            "regular_condition_unexp_pctl": "((DSRCmessageReception = 0.82) & (distance = 0))",
            "regular_condition_SMV_pt": "((DSRCmessageReception = 0.82) & (distance = 0))",
            "regular_condition_SMV_ft": "((DSRCmessageReception = 0.82) & (distance = 0))",
            "regular_condition_PRISM_pctl": "((DSRCmessageReception = 0.82) & (distance = 0))",
            "post_condition_unexp_pt": "((DSRCmessageReception = 0.30) & (distance = 300))",
            "post_condition_unexp_ft": "((DSRCmessageReception = 0.30) & (distance = 300))",
            "post_condition_unexp_pctl": "((DSRCmessageReception = 0.30) & (distance = 300))",
            "post_condition_SMV_pt": "((DSRCmessageReception = 0.30) & (distance = 300))",
            "post_condition_SMV_ft": "((DSRCmessageReception = 0.30) & (distance = 300))",
            "post_condition_PRISM_pctl": "((DSRCmessageReception = 0.30) & (distance = 300))",
            "ft": "((LAST V (((! ((DSRCmessageReception = 0.82) & (distance = 0))) & ((! LAST) & (X ((DSRCmessageReception = 0.82) & (distance = 0))))) -> (X ((! LAST) U ((DSRCmessageReception = 0.30) & (distance = 300)))))) & (((DSRCmessageReception = 0.82) & (distance = 0)) -> ((! LAST) U ((DSRCmessageReception = 0.30) & (distance = 300)))))",
            "pt": "((H (! ((DSRCmessageReception = 0.82) & (distance = 0)))) | (! ((! ((DSRCmessageReception = 0.30) & (distance = 300))) S ((! ((DSRCmessageReception = 0.30) & (distance = 300))) & (((DSRCmessageReception = 0.82) & (distance = 0)) & (Z (! ((DSRCmessageReception = 0.82) & (distance = 0)))))))))",
            "pctl": "P>=1[((G (((! ((DSRCmessageReception = 0.82) & (distance = 0))) & (X ((DSRCmessageReception = 0.82) & (distance = 0)))) => (X (P>0.5[(F ((DSRCmessageReception = 0.30) & (distance = 300)))])))) & (((DSRCmessageReception = 0.82) & (distance = 0)) => (P>0.5[(F ((DSRCmessageReception = 0.30) & (distance = 300)))])))]",
            "ptExpanded": "((H (! ((DSRCmessageReception = 0.82) & (distance = 0)))) | (! ((! ((DSRCmessageReception = 0.30) & (distance = 300))) S ((! ((DSRCmessageReception = 0.30) & (distance = 300))) & (((DSRCmessageReception = 0.82) & (distance = 0)) & (Z (! ((DSRCmessageReception = 0.82) & (distance = 0)))))))))",
            "CoCoSpecCode": "(H(not (((DSRCmessageReception = 0.82) and (distance = 0)))) or not (SI((((DSRCmessageReception = 0.82) and (distance = 0)) and ZtoPre(not (((DSRCmessageReception = 0.82) and (distance = 0))))),not (((DSRCmessageReception = 0.30) and (distance = 300))))))",
            "ftExpanded": "((LAST V (((! ((DSRCmessageReception = 0.82) & (distance = 0))) & ((! LAST) & (X ((DSRCmessageReception = 0.82) & (distance = 0))))) -> (X ((! LAST) U ((DSRCmessageReception = 0.30) & (distance = 300)))))) & (((DSRCmessageReception = 0.82) & (distance = 0)) -> ((! LAST) U ((DSRCmessageReception = 0.30) & (distance = 300)))))",
            "pctlExpanded": "P>=1[((G (((! ((DSRCmessageReception = 0.82) & (distance = 0))) & (X ((DSRCmessageReception = 0.82) & (distance = 0)))) => (X (P>0.5[(F ((DSRCmessageReception = 0.30) & (distance = 300)))])))) & (((DSRCmessageReception = 0.82) & (distance = 0)) => (P>0.5[(F ((DSRCmessageReception = 0.30) & (distance = 300)))])))]",
            "ftInfAUExpanded": "((G (((! ((DSRCmessageReception = 0.82) & (distance = 0))) & (X ((DSRCmessageReception = 0.82) & (distance = 0)))) -> (X (F ((DSRCmessageReception = 0.30) & (distance = 300)))))) & (((DSRCmessageReception = 0.82) & (distance = 0)) -> (F ((DSRCmessageReception = 0.30) & (distance = 300)))))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04ca-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R83",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": " the instantaneous probability of occurrence of a certain “Failure Condition” within 3600 time units",
        "comments": "",
        "fulltext": "System shall with probability > 0.5 within 3600 ticks satisfy failure_condition",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "failure_condition"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "duration": "3600",
            "timingTextRange": [
                36,
                52
            ],
            "post_condition": "(failure_condition)",
            "responseTextRange": [
                54,
                78
            ],
            "diagramVariables": " n = <b><i>3600</i></b>, Response = <b><i>(failure_condition)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>3600</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>3600</i></b>). If the interval ends sooner than trigger+<b><i>3600</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "failure_condition",
            "post_condition_unexp_ft": "failure_condition",
            "post_condition_unexp_pctl": "failure_condition",
            "post_condition_SMV_pt": "failure_condition",
            "post_condition_SMV_ft": "failure_condition",
            "post_condition_PRISM_pctl": "failure_condition",
            "ft": "((F[<=3600] failure_condition) | (F[<3600] LAST))",
            "pt": "(H ((H (! failure_condition)) -> (O[<3600] (Z FALSE))))",
            "pctl": "(P>0.5[(F<=3600 failure_condition)])",
            "ptExpanded": "(H ((H (! failure_condition)) -> (O[0,3599] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (failure_condition)) => OT(3599, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,3600] failure_condition) | (F[0,3599] LAST))",
            "pctlExpanded": "(P>0.5[(F<=3600 failure_condition)])",
            "ftInfAUExpanded": "(F[0,3600] failure_condition)",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04cb-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R175c",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "after sending a patient’s medical parameters to the Lab, TA receives a ‘high’ result within one hour. TA will immediately notify the assistants nearest to the patient and must receive a response from them within one hour with 95% probability",
        "comments": "",
        "fulltext": "upon notify_assistant Patient shall with probability >0.95  within 1 hour satisfy receive_response",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "notify_assistant",
                "receive_response"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(notify_assistant)",
            "regular_condition": "(notify_assistant)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "Patient",
            "componentTextRange": [
                22,
                28
            ],
            "probability_bound": [
                ">",
                "0.95"
            ],
            "probabilityTextRange": [
                36,
                57
            ],
            "duration": "1",
            "timingTextRange": [
                60,
                72
            ],
            "post_condition": "(receive_response)",
            "responseTextRange": [
                74,
                97
            ],
            "diagramVariables": "TC = <b><i>(notify_assistant)</i></b>,  n = <b><i>1</i></b>, Response = <b><i>(receive_response)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(notify_assistant)</i></b> is true and any point in the interval where <b><i>(notify_assistant)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>1</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>1</i></b>). If the interval ends sooner than trigger+<b><i>1</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.95",
            "regular_condition_unexp_pt": "notify_assistant",
            "regular_condition_unexp_ft": "notify_assistant",
            "regular_condition_unexp_pctl": "notify_assistant",
            "regular_condition_SMV_pt": "notify_assistant",
            "regular_condition_SMV_ft": "notify_assistant",
            "regular_condition_PRISM_pctl": "notify_assistant",
            "post_condition_unexp_pt": "receive_response",
            "post_condition_unexp_ft": "receive_response",
            "post_condition_unexp_pctl": "receive_response",
            "post_condition_SMV_pt": "receive_response",
            "post_condition_SMV_ft": "receive_response",
            "post_condition_PRISM_pctl": "receive_response",
            "ft": "((LAST V (((! notify_assistant) & ((! LAST) & (X notify_assistant))) -> (X ((F[<=1] receive_response) | (F[<1] LAST))))) & (notify_assistant -> ((F[<=1] receive_response) | (F[<1] LAST))))",
            "pt": "(H ((O[=1] ((notify_assistant & (Z (! notify_assistant))) & (! receive_response))) -> (O[<1] ((Z FALSE) | receive_response))))",
            "pctl": "P>=1[((G (((! notify_assistant) & (X notify_assistant)) => (X (P>0.95[(F<=1 receive_response)])))) & (notify_assistant => (P>0.95[(F[<=1] receive_response)])))]",
            "ptExpanded": "(H ((O[1,1] ((notify_assistant & (Z (! notify_assistant))) & (! receive_response))) -> (O[0,0] ((Z FALSE) | receive_response))))",
            "CoCoSpecCode": "H((OT(1, 1, ((notify_assistant and ZtoPre(not (notify_assistant))) and not (receive_response))) => OT(0, 0, (ZtoPre(false) or receive_response))))",
            "ftExpanded": "((LAST V (((! notify_assistant) & ((! LAST) & (X notify_assistant))) -> (X ((F[0,1] receive_response) | (F[0,0] LAST))))) & (notify_assistant -> ((F[0,1] receive_response) | (F[0,0] LAST))))",
            "pctlExpanded": "P>=1[((G (((! notify_assistant) & (X notify_assistant)) => (X (P>0.95[(F<=1 receive_response)])))) & (notify_assistant => (P>0.95[(F[<=1] receive_response)])))]",
            "ftInfAUExpanded": "((G (((! notify_assistant) & (X notify_assistant)) -> (X (F[0,1] receive_response)))) & (notify_assistant -> (F[0,1] receive_response)))",
            "component": "Patient"
        },
        "status": "",
        "_id": "7fae04cc-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R167",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": " the wrong message is sent with an exponentially distributed probability with the rate 10−3 per second. ",
        "comments": "",
        "fulltext": "whenever true component shall with probability <= 0.001 eventually satisfy wrong_message_sent",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "wrong_message_sent"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(true)",
            "regular_condition": "(true)",
            "conditionTextRange": [
                0,
                12
            ],
            "component_name": "component",
            "componentTextRange": [
                14,
                22
            ],
            "probability_bound": [
                "<=",
                "0.001"
            ],
            "probabilityTextRange": [
                30,
                54
            ],
            "timingTextRange": [
                56,
                65
            ],
            "post_condition": "(wrong_message_sent)",
            "responseTextRange": [
                67,
                92
            ],
            "diagramVariables": "CC = <b><i>(true)</i></b>, Response = <b><i>(wrong_message_sent)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(true)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<=0.001",
            "regular_condition_unexp_pt": "TRUE",
            "regular_condition_unexp_ft": "TRUE",
            "regular_condition_unexp_pctl": "TRUE",
            "regular_condition_SMV_pt": "TRUE",
            "regular_condition_SMV_ft": "TRUE",
            "regular_condition_PRISM_pctl": "TRUE",
            "post_condition_unexp_pt": "wrong_message_sent",
            "post_condition_unexp_ft": "wrong_message_sent",
            "post_condition_unexp_pctl": "wrong_message_sent",
            "post_condition_SMV_pt": "wrong_message_sent",
            "post_condition_SMV_ft": "wrong_message_sent",
            "post_condition_PRISM_pctl": "wrong_message_sent",
            "ft": "(LAST V (TRUE -> ((! LAST) U wrong_message_sent)))",
            "pt": "((H (! TRUE)) | (! ((! wrong_message_sent) S ((! wrong_message_sent) & TRUE))))",
            "pctl": "P>=1[(G (TRUE => (P<=0.001[(F wrong_message_sent)])))]",
            "ptExpanded": "wrong_message_sent",
            "CoCoSpecCode": "wrong_message_sent",
            "ftExpanded": "(LAST V ((! LAST) U wrong_message_sent))",
            "pctlExpanded": "P>=1[(G (TRUE => (P<=0.001[(F wrong_message_sent)])))]",
            "ftInfAUExpanded": "(G (F wrong_message_sent))",
            "component": "component"
        },
        "status": "",
        "_id": "7fae04cd-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R92",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "The probability of response time is within 8s after sending invoking operation to this service is 90%",
        "comments": "",
        "fulltext": "upon sending_invoking_operation service shall with probability > 0.9 within 8 seconds satisfy response",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "sending_invoking_operation",
                "response"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(sending_invoking_operation)",
            "regular_condition": "(sending_invoking_operation)",
            "conditionTextRange": [
                0,
                30
            ],
            "component_name": "service",
            "componentTextRange": [
                32,
                38
            ],
            "probability_bound": [
                ">",
                "0.9"
            ],
            "probabilityTextRange": [
                46,
                67
            ],
            "duration": "8",
            "timingTextRange": [
                69,
                84
            ],
            "post_condition": "(response)",
            "responseTextRange": [
                86,
                101
            ],
            "diagramVariables": "TC = <b><i>(sending_invoking_operation)</i></b>,  n = <b><i>8</i></b>, Response = <b><i>(response)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(sending_invoking_operation)</i></b> is true and any point in the interval where <b><i>(sending_invoking_operation)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>8</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>8</i></b>). If the interval ends sooner than trigger+<b><i>8</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.9",
            "regular_condition_unexp_pt": "sending_invoking_operation",
            "regular_condition_unexp_ft": "sending_invoking_operation",
            "regular_condition_unexp_pctl": "sending_invoking_operation",
            "regular_condition_SMV_pt": "sending_invoking_operation",
            "regular_condition_SMV_ft": "sending_invoking_operation",
            "regular_condition_PRISM_pctl": "sending_invoking_operation",
            "post_condition_unexp_pt": "response",
            "post_condition_unexp_ft": "response",
            "post_condition_unexp_pctl": "response",
            "post_condition_SMV_pt": "response",
            "post_condition_SMV_ft": "response",
            "post_condition_PRISM_pctl": "response",
            "ft": "((LAST V (((! sending_invoking_operation) & ((! LAST) & (X sending_invoking_operation))) -> (X ((F[<=8] response) | (F[<8] LAST))))) & (sending_invoking_operation -> ((F[<=8] response) | (F[<8] LAST))))",
            "pt": "(H ((O[=8] ((sending_invoking_operation & (Z (! sending_invoking_operation))) & (! response))) -> (O[<8] ((Z FALSE) | response))))",
            "pctl": "P>=1[((G (((! sending_invoking_operation) & (X sending_invoking_operation)) => (X (P>0.9[(F<=8 response)])))) & (sending_invoking_operation => (P>0.9[(F[<=8] response)])))]",
            "ptExpanded": "(H ((O[8,8] ((sending_invoking_operation & (Z (! sending_invoking_operation))) & (! response))) -> (O[0,7] ((Z FALSE) | response))))",
            "CoCoSpecCode": "H((OT(8, 8, ((sending_invoking_operation and ZtoPre(not (sending_invoking_operation))) and not (response))) => OT(7, 0, (ZtoPre(false) or response))))",
            "ftExpanded": "((LAST V (((! sending_invoking_operation) & ((! LAST) & (X sending_invoking_operation))) -> (X ((F[0,8] response) | (F[0,7] LAST))))) & (sending_invoking_operation -> ((F[0,8] response) | (F[0,7] LAST))))",
            "pctlExpanded": "P>=1[((G (((! sending_invoking_operation) & (X sending_invoking_operation)) => (X (P>0.9[(F<=8 response)])))) & (sending_invoking_operation => (P>0.9[(F[<=8] response)])))]",
            "ftInfAUExpanded": "((G (((! sending_invoking_operation) & (X sending_invoking_operation)) -> (X (F[0,8] response)))) & (sending_invoking_operation -> (F[0,8] response)))",
            "component": "service"
        },
        "status": "",
        "_id": "7fae04ce-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R150",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "What is the probability that all patients complete treatment and are discharged from the hospital within 4 time units?",
        "comments": "",
        "fulltext": "upon admission Hospital shall with probability > 0.5 within 4 ticks satisfy discharge ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "admission",
                "discharge"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(admission)",
            "regular_condition": "(admission)",
            "conditionTextRange": [
                0,
                13
            ],
            "component_name": "Hospital",
            "componentTextRange": [
                15,
                22
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                30,
                51
            ],
            "duration": "4",
            "timingTextRange": [
                53,
                66
            ],
            "post_condition": "(discharge)",
            "responseTextRange": [
                68,
                84
            ],
            "diagramVariables": "TC = <b><i>(admission)</i></b>,  n = <b><i>4</i></b>, Response = <b><i>(discharge)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(admission)</i></b> is true and any point in the interval where <b><i>(admission)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>4</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>4</i></b>). If the interval ends sooner than trigger+<b><i>4</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "regular_condition_unexp_pt": "admission",
            "regular_condition_unexp_ft": "admission",
            "regular_condition_unexp_pctl": "admission",
            "regular_condition_SMV_pt": "admission",
            "regular_condition_SMV_ft": "admission",
            "regular_condition_PRISM_pctl": "admission",
            "post_condition_unexp_pt": "discharge",
            "post_condition_unexp_ft": "discharge",
            "post_condition_unexp_pctl": "discharge",
            "post_condition_SMV_pt": "discharge",
            "post_condition_SMV_ft": "discharge",
            "post_condition_PRISM_pctl": "discharge",
            "ft": "((LAST V (((! admission) & ((! LAST) & (X admission))) -> (X ((F[<=4] discharge) | (F[<4] LAST))))) & (admission -> ((F[<=4] discharge) | (F[<4] LAST))))",
            "pt": "(H ((O[=4] ((admission & (Z (! admission))) & (! discharge))) -> (O[<4] ((Z FALSE) | discharge))))",
            "pctl": "P>=1[((G (((! admission) & (X admission)) => (X (P>0.5[(F<=4 discharge)])))) & (admission => (P>0.5[(F[<=4] discharge)])))]",
            "ptExpanded": "(H ((O[4,4] ((admission & (Z (! admission))) & (! discharge))) -> (O[0,3] ((Z FALSE) | discharge))))",
            "CoCoSpecCode": "H((OT(4, 4, ((admission and ZtoPre(not (admission))) and not (discharge))) => OT(3, 0, (ZtoPre(false) or discharge))))",
            "ftExpanded": "((LAST V (((! admission) & ((! LAST) & (X admission))) -> (X ((F[0,4] discharge) | (F[0,3] LAST))))) & (admission -> ((F[0,4] discharge) | (F[0,3] LAST))))",
            "pctlExpanded": "P>=1[((G (((! admission) & (X admission)) => (X (P>0.5[(F<=4 discharge)])))) & (admission => (P>0.5[(F[<=4] discharge)])))]",
            "ftInfAUExpanded": "((G (((! admission) & (X admission)) -> (X (F[0,4] discharge)))) & (admission -> (F[0,4] discharge)))",
            "component": "Hospital"
        },
        "status": "",
        "_id": "7fae04cf-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R48",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "Main power failure shall occur before 6 hours with at most 30% probability",
        "comments": "",
        "fulltext": "System shall with probability <= 0.3 within 6 ticks satisfy main_power_failure",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "main_power_failure"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<=",
                "0.3"
            ],
            "probabilityTextRange": [
                13,
                35
            ],
            "duration": "6",
            "timingTextRange": [
                37,
                50
            ],
            "post_condition": "(main_power_failure)",
            "responseTextRange": [
                52,
                77
            ],
            "diagramVariables": " n = <b><i>6</i></b>, Response = <b><i>(main_power_failure)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>6</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>6</i></b>). If the interval ends sooner than trigger+<b><i>6</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<=0.3",
            "post_condition_unexp_pt": "main_power_failure",
            "post_condition_unexp_ft": "main_power_failure",
            "post_condition_unexp_pctl": "main_power_failure",
            "post_condition_SMV_pt": "main_power_failure",
            "post_condition_SMV_ft": "main_power_failure",
            "post_condition_PRISM_pctl": "main_power_failure",
            "ft": "((F[<=6] main_power_failure) | (F[<6] LAST))",
            "pt": "(H ((H (! main_power_failure)) -> (O[<6] (Z FALSE))))",
            "pctl": "(P<=0.3[(F<=6 main_power_failure)])",
            "ptExpanded": "(H ((H (! main_power_failure)) -> (O[0,5] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (main_power_failure)) => OT(5, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,6] main_power_failure) | (F[0,5] LAST))",
            "pctlExpanded": "(P<=0.3[(F<=6 main_power_failure)])",
            "ftInfAUExpanded": "(F[0,6] main_power_failure)",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04d0-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R138",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "the IPv4 Zeroconf Protocol. Similar to the overflow state in the queue model, it has an error state; it is not desirable for the system executing the protocol to be in such a state.",
        "comments": "",
        "fulltext": "System shall with  probability > 0.5 eventually satisfy error",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "error"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                35
            ],
            "timingTextRange": [
                37,
                46
            ],
            "post_condition": "(error)",
            "responseTextRange": [
                48,
                60
            ],
            "diagramVariables": "Response = <b><i>(error)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "error",
            "post_condition_unexp_ft": "error",
            "post_condition_unexp_pctl": "error",
            "post_condition_SMV_pt": "error",
            "post_condition_SMV_ft": "error",
            "post_condition_PRISM_pctl": "error",
            "ft": "((! LAST) U error)",
            "pt": "(O error)",
            "pctl": "(P>0.5[(F error)])",
            "ptExpanded": "(O error)",
            "CoCoSpecCode": "O(error)",
            "ftExpanded": "((! LAST) U error)",
            "pctlExpanded": "(P>0.5[(F error)])",
            "ftInfAUExpanded": "(F error)",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04d1-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R62",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "the probability of jumping into a specific set of states, at a specific time",
        "comments": "",
        "fulltext": "System shall with probability > 0.5 after 5 ticks satisfy jump",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "after",
            "response": "satisfaction",
            "variables": [
                "jump"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "duration": "5",
            "timingTextRange": [
                36,
                48
            ],
            "post_condition": "(jump)",
            "responseTextRange": [
                50,
                61
            ],
            "diagramVariables": " n = <b><i>5</i></b>, Response = <b><i>(jump)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must be false at all time points with distance <=<b><i>5</i></b> from the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>5</i></b>). Moreover, RES must hold at the point that is at distance <b><i>5</i></b>+1 from the trigger, that is, trigger+<b><i>5</i></b>+1, except if the end of the interval occurs earlier.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_after_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "jump",
            "post_condition_unexp_ft": "jump",
            "post_condition_unexp_pctl": "jump",
            "post_condition_SMV_pt": "jump",
            "post_condition_SMV_ft": "jump",
            "post_condition_PRISM_pctl": "jump",
            "ft": "(((G[<=5] (! jump)) | (LAST V (! jump))) & ((F[<=5+1] jump) | (F[<5+1] LAST)))",
            "pt": "((H ((O[<=5] (Z FALSE)) -> (! jump))) & (H ((H (! jump)) -> (O[<5+1] (Z FALSE)))))",
            "pctl": "(P>0.5[((G<=5 (! jump)) & (F<=(5+1) jump))])",
            "ptExpanded": "((H ((O[0,5] (Z FALSE)) -> (! jump))) & (H ((H (! jump)) -> (O[0,5] (Z FALSE)))))",
            "CoCoSpecCode": "(H((OT(5, 0, ZtoPre(false)) => not (jump))) and H((H(not (jump)) => OT(5, 0, ZtoPre(false)))))",
            "ftExpanded": "(((G[0,5] (! jump)) | (LAST V (! jump))) & ((F[0,6] jump) | (F[0,5] LAST)))",
            "pctlExpanded": "(P>0.5[((G<=5 (! jump)) & (F<=(5+1) jump))])",
            "ftInfAUExpanded": "(((G[0,5] (! jump)) | (G (! jump))) & (F[0,6] jump))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04d2-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R101",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "the probability that deadlock never occurs is greater than 0.9",
        "comments": "",
        "fulltext": "System shall with probability > 0.9 never satisfy deadlock",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "never",
            "response": "satisfaction",
            "variables": [
                "deadlock"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.9"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "timingTextRange": [
                36,
                40
            ],
            "post_condition": "(deadlock)",
            "responseTextRange": [
                42,
                57
            ],
            "diagramVariables": "Response = <b><i>(deadlock)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must be false at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_never_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.9",
            "post_condition_unexp_pt": "deadlock",
            "post_condition_unexp_ft": "deadlock",
            "post_condition_unexp_pctl": "deadlock",
            "post_condition_SMV_pt": "deadlock",
            "post_condition_SMV_ft": "deadlock",
            "post_condition_PRISM_pctl": "deadlock",
            "ft": "(LAST V (! deadlock))",
            "pt": "(H (! deadlock))",
            "pctl": "(P>0.9[(G (! deadlock))])",
            "ptExpanded": "(H (! deadlock))",
            "CoCoSpecCode": "H(not (deadlock))",
            "ftExpanded": "(LAST V (! deadlock))",
            "pctlExpanded": "(P>0.9[(G (! deadlock))])",
            "ftInfAUExpanded": "(G (! deadlock))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04d3-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R173",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "Omission of speed at Actuator output port shall be less than 3.10-3 per flight;",
        "comments": "",
        "fulltext": "in flight mode Actuator shall with probability < 0.001 always satisfy omission_of_speed < 3",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "flight",
                "omission_of_speed"
            ],
            "scope_mode": "flight",
            "scopeTextRange": [
                0,
                13
            ],
            "component_name": "Actuator",
            "componentTextRange": [
                15,
                22
            ],
            "probability_bound": [
                "<",
                "0.001"
            ],
            "probabilityTextRange": [
                30,
                53
            ],
            "timingTextRange": [
                55,
                60
            ],
            "post_condition": "(omission_of_speed < 3)",
            "responseTextRange": [
                62,
                90
            ],
            "diagramVariables": "M = <b><i>flight</i></b>, Response = <b><i>(omission_of_speed < 3)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>flight</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg",
            "scope_mode_pt": "flight",
            "scope_mode_ft": "flight",
            "scope_mode_pctl": "flight",
            "bound": "<0.001",
            "post_condition_unexp_pt": "(omission_of_speed < 3)",
            "post_condition_unexp_ft": "(omission_of_speed < 3)",
            "post_condition_unexp_pctl": "(omission_of_speed < 3)",
            "post_condition_SMV_pt": "(omission_of_speed < 3)",
            "post_condition_SMV_ft": "(omission_of_speed < 3)",
            "post_condition_PRISM_pctl": "(omission_of_speed < 3)",
            "ft": "(LAST V (flight -> (omission_of_speed < 3)))",
            "pt": "(H (flight -> (omission_of_speed < 3)))",
            "pctl": "P>=1[((G ((! (Fin_flight & (! LAST))) | (X (P<0.001[(Lin_flight R (omission_of_speed < 3))])))) & (flight => (Lin_flight | (P<0.001[(Lin_flight R (omission_of_speed < 3))]))))]",
            "ptExpanded": "(H (flight -> (omission_of_speed < 3)))",
            "CoCoSpecCode": "H((flight => (omission_of_speed < 3)))",
            "ftExpanded": "(LAST V (flight -> (omission_of_speed < 3)))",
            "pctlExpanded": "P>=1[((G ((! (((! flight) & (X flight)) & (! false))) | (X (P<0.001[((flight & (X (! flight))) R (omission_of_speed < 3))])))) & (flight => ((flight & (X (! flight))) | (P<0.001[((flight & (X (! flight))) R (omission_of_speed < 3))]))))]",
            "ftInfAUExpanded": "(G (flight -> (omission_of_speed < 3)))",
            "component": "Actuator"
        },
        "status": "",
        "_id": "7fae04d4-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R67",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "the reliability of the system will be greater than the estimate for 80 % of the cases",
        "comments": "",
        "fulltext": "System shall with probability > 0.8 always satisfy reliability > estimate",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "reliability",
                "estimate"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.8"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "timingTextRange": [
                36,
                41
            ],
            "post_condition": "(reliability > estimate)",
            "responseTextRange": [
                43,
                72
            ],
            "diagramVariables": "Response = <b><i>(reliability > estimate)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.8",
            "post_condition_unexp_pt": "(reliability > estimate)",
            "post_condition_unexp_ft": "(reliability > estimate)",
            "post_condition_unexp_pctl": "(reliability > estimate)",
            "post_condition_SMV_pt": "(reliability > estimate)",
            "post_condition_SMV_ft": "(reliability > estimate)",
            "post_condition_PRISM_pctl": "(reliability > estimate)",
            "ft": "(LAST V (reliability > estimate))",
            "pt": "(H (reliability > estimate))",
            "pctl": "(P>0.8[(G (reliability > estimate))])",
            "ptExpanded": "(H (reliability > estimate))",
            "CoCoSpecCode": "H((reliability > estimate))",
            "ftExpanded": "(LAST V (reliability > estimate))",
            "pctlExpanded": "(P>0.8[(G (reliability > estimate))])",
            "ftInfAUExpanded": "(G (reliability > estimate))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04d5-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R1",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "The probability P0 that at an alarm failure ever occurs during the lifetime of the system is less than 0.13.",
        "comments": "",
        "fulltext": "System shall with probability <=0.13 eventually satisfy failedAlarm",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "failedAlarm"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<=",
                "0.13"
            ],
            "probabilityTextRange": [
                13,
                35
            ],
            "timingTextRange": [
                37,
                46
            ],
            "post_condition": "(failedAlarm)",
            "responseTextRange": [
                48,
                66
            ],
            "diagramVariables": "Response = <b><i>(failedAlarm)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<=0.13",
            "post_condition_unexp_pt": "failedAlarm",
            "post_condition_unexp_ft": "failedAlarm",
            "post_condition_unexp_pctl": "failedAlarm",
            "post_condition_SMV_pt": "failedAlarm",
            "post_condition_SMV_ft": "failedAlarm",
            "post_condition_PRISM_pctl": "failedAlarm",
            "ft": "((! LAST) U failedAlarm)",
            "pt": "(O failedAlarm)",
            "pctl": "(P<=0.13[(F failedAlarm)])",
            "ptExpanded": "(O failedAlarm)",
            "CoCoSpecCode": "O(failedAlarm)",
            "ftExpanded": "((! LAST) U failedAlarm)",
            "pctlExpanded": "(P<=0.13[(F failedAlarm)])",
            "ftInfAUExpanded": "(F failedAlarm)",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04d6-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R44",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "Smoke_detected:c by [Safety Mechanism] with [Probability]",
        "comments": "",
        "fulltext": "if smoke SafetyMechanism shall with probability >0.8 eventually satisfy detect",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "smoke",
                "detect"
            ],
            "qualifier_word": "if",
            "pre_condition": "(smoke)",
            "regular_condition": "(smoke)",
            "conditionTextRange": [
                0,
                7
            ],
            "component_name": "SafetyMechanism",
            "componentTextRange": [
                9,
                23
            ],
            "probability_bound": [
                ">",
                "0.8"
            ],
            "probabilityTextRange": [
                31,
                51
            ],
            "timingTextRange": [
                53,
                62
            ],
            "post_condition": "(detect)",
            "responseTextRange": [
                64,
                77
            ],
            "diagramVariables": "TC = <b><i>(smoke)</i></b>, Response = <b><i>(detect)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(smoke)</i></b> is true and any point in the interval where <b><i>(smoke)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.8",
            "regular_condition_unexp_pt": "smoke",
            "regular_condition_unexp_ft": "smoke",
            "regular_condition_unexp_pctl": "smoke",
            "regular_condition_SMV_pt": "smoke",
            "regular_condition_SMV_ft": "smoke",
            "regular_condition_PRISM_pctl": "smoke",
            "post_condition_unexp_pt": "detect",
            "post_condition_unexp_ft": "detect",
            "post_condition_unexp_pctl": "detect",
            "post_condition_SMV_pt": "detect",
            "post_condition_SMV_ft": "detect",
            "post_condition_PRISM_pctl": "detect",
            "ft": "((LAST V (((! smoke) & ((! LAST) & (X smoke))) -> (X ((! LAST) U detect)))) & (smoke -> ((! LAST) U detect)))",
            "pt": "((H (! smoke)) | (! ((! detect) S ((! detect) & (smoke & (Z (! smoke)))))))",
            "pctl": "P>=1[((G (((! smoke) & (X smoke)) => (X (P>0.8[(F detect)])))) & (smoke => (P>0.8[(F detect)])))]",
            "ptExpanded": "((H (! smoke)) | (! ((! detect) S ((! detect) & (smoke & (Z (! smoke)))))))",
            "CoCoSpecCode": "(H(not (smoke)) or not (SI((smoke and ZtoPre(not (smoke))),not (detect))))",
            "ftExpanded": "((LAST V (((! smoke) & ((! LAST) & (X smoke))) -> (X ((! LAST) U detect)))) & (smoke -> ((! LAST) U detect)))",
            "pctlExpanded": "P>=1[((G (((! smoke) & (X smoke)) => (X (P>0.8[(F detect)])))) & (smoke => (P>0.8[(F detect)])))]",
            "ftInfAUExpanded": "((G (((! smoke) & (X smoke)) -> (X (F detect)))) & (smoke -> (F detect)))",
            "component": "SafetyMechanism"
        },
        "status": "",
        "_id": "7fae04d7-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R154",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "The probability of no error occurring in the next n steps is at least 0.99",
        "comments": "",
        "fulltext": "System shall with probability > 0.99 within 10 ticks satisfy no_error",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "no_error"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.99"
            ],
            "probabilityTextRange": [
                13,
                35
            ],
            "duration": "10",
            "timingTextRange": [
                37,
                51
            ],
            "post_condition": "(no_error)",
            "responseTextRange": [
                53,
                68
            ],
            "diagramVariables": " n = <b><i>10</i></b>, Response = <b><i>(no_error)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.99",
            "post_condition_unexp_pt": "no_error",
            "post_condition_unexp_ft": "no_error",
            "post_condition_unexp_pctl": "no_error",
            "post_condition_SMV_pt": "no_error",
            "post_condition_SMV_ft": "no_error",
            "post_condition_PRISM_pctl": "no_error",
            "ft": "((F[<=10] no_error) | (F[<10] LAST))",
            "pt": "(H ((H (! no_error)) -> (O[<10] (Z FALSE))))",
            "pctl": "(P>0.99[(F<=10 no_error)])",
            "ptExpanded": "(H ((H (! no_error)) -> (O[0,9] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (no_error)) => OT(9, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,10] no_error) | (F[0,9] LAST))",
            "pctlExpanded": "(P>0.99[(F<=10 no_error)])",
            "ftInfAUExpanded": "(F[0,10] no_error)",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04d8-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R128",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "when watching a video, the probability that a user will cancel the video within half a min because she does not satisfy with the poor quality of the current video is 45%",
        "comments": "",
        "fulltext": "in watching_mode User shall with probability <0.45 within 0.5 minutes satisfy cancel_video & poor_quality",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "watching_mode",
                "cancel_video",
                "poor_quality"
            ],
            "scope_mode": "watching_mode",
            "scopeTextRange": [
                0,
                15
            ],
            "component_name": "User",
            "componentTextRange": [
                17,
                20
            ],
            "probability_bound": [
                "<",
                "0.45"
            ],
            "probabilityTextRange": [
                28,
                49
            ],
            "duration": "0.5",
            "timingTextRange": [
                51,
                68
            ],
            "post_condition": "(cancel_video & poor_quality)",
            "responseTextRange": [
                70,
                104
            ],
            "diagramVariables": "M = <b><i>watching_mode</i></b>,  n = <b><i>0.5</i></b>, Response = <b><i>(cancel_video & poor_quality)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>watching_mode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>0.5</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>0.5</i></b>). If the interval ends sooner than trigger+<b><i>0.5</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_within_satisfaction.svg",
            "scope_mode_pt": "watching_mode",
            "scope_mode_ft": "watching_mode",
            "scope_mode_pctl": "watching_mode",
            "bound": "<0.45",
            "post_condition_unexp_pt": "(cancel_video & poor_quality)",
            "post_condition_unexp_ft": "(cancel_video & poor_quality)",
            "post_condition_unexp_pctl": "(cancel_video & poor_quality)",
            "post_condition_SMV_pt": "(cancel_video & poor_quality)",
            "post_condition_SMV_ft": "(cancel_video & poor_quality)",
            "post_condition_PRISM_pctl": "(cancel_video & poor_quality)",
            "ft": "((LAST V ((! (Fin_watching_mode & (! LAST))) | (X ((F[<=0.5] (cancel_video & poor_quality)) | (F[<0.5] (Lin_watching_mode | LAST)))))) & (watching_mode -> ((F[<=0.5] (cancel_video & poor_quality)) | (F[<0.5] (Lin_watching_mode | LAST)))))",
            "pt": "((H (Lin_watching_mode -> (Y ((((! (cancel_video & poor_quality)) S ((! (cancel_video & poor_quality)) & Fin_watching_mode)) -> (O[<0.5] Fin_watching_mode)) S ((((! (cancel_video & poor_quality)) S ((! (cancel_video & poor_quality)) & Fin_watching_mode)) -> (O[<0.5] Fin_watching_mode)) & Fin_watching_mode))))) & (((! Lin_watching_mode) S ((! Lin_watching_mode) & Fin_watching_mode)) -> ((((! (cancel_video & poor_quality)) S ((! (cancel_video & poor_quality)) & Fin_watching_mode)) -> (O[<0.5] Fin_watching_mode)) S ((((! (cancel_video & poor_quality)) S ((! (cancel_video & poor_quality)) & Fin_watching_mode)) -> (O[<0.5] Fin_watching_mode)) & Fin_watching_mode))))",
            "pctl": "P>=1[((G ((! (Fin_watching_mode & (! LAST))) | (X (P<0.45[(F<=0.5 (cancel_video & poor_quality))])))) & (watching_mode => (Lin_watching_mode | (P<0.45[(F[<=0.5] (cancel_video & poor_quality))]))))]",
            "ptExpanded": "((H (((! watching_mode) & (Y watching_mode)) -> (Y ((((! (cancel_video & poor_quality)) S ((! (cancel_video & poor_quality)) & (watching_mode & (Z (! watching_mode))))) -> (O[<0.5] (watching_mode & (Z (! watching_mode))))) S ((((! (cancel_video & poor_quality)) S ((! (cancel_video & poor_quality)) & (watching_mode & (Z (! watching_mode))))) -> (O[<0.5] (watching_mode & (Z (! watching_mode))))) & (watching_mode & (Z (! watching_mode)))))))) & (((! ((! watching_mode) & (Y watching_mode))) S ((! ((! watching_mode) & (Y watching_mode))) & (watching_mode & (Z (! watching_mode))))) -> ((((! (cancel_video & poor_quality)) S ((! (cancel_video & poor_quality)) & (watching_mode & (Z (! watching_mode))))) -> (O[<0.5] (watching_mode & (Z (! watching_mode))))) S ((((! (cancel_video & poor_quality)) S ((! (cancel_video & poor_quality)) & (watching_mode & (Z (! watching_mode))))) -> (O[<0.5] (watching_mode & (Z (! watching_mode))))) & (watching_mode & (Z (! watching_mode)))))))",
            "CoCoSpecCode": "(H(((not (watching_mode) and YtoPre(watching_mode)) => YtoPre(SI((watching_mode and ZtoPre(not (watching_mode))),(SI((watching_mode and ZtoPre(not (watching_mode))),not ((cancel_video and poor_quality))) => OT(0.5, LessThan, (watching_mode and ZtoPre(not (watching_mode))))))))) and (SI((watching_mode and ZtoPre(not (watching_mode))),not ((not (watching_mode) and YtoPre(watching_mode)))) => SI((watching_mode and ZtoPre(not (watching_mode))),(SI((watching_mode and ZtoPre(not (watching_mode))),not ((cancel_video and poor_quality))) => OT(0.5, LessThan, (watching_mode and ZtoPre(not (watching_mode))))))))",
            "ftExpanded": "((LAST V ((! ((((! watching_mode) & (! LAST)) & (X watching_mode)) & (! LAST))) | (X ((F[<=0.5] (cancel_video & poor_quality)) | (F[<0.5] (((watching_mode & (! LAST)) & (X (! watching_mode))) | LAST)))))) & (watching_mode -> ((F[<=0.5] (cancel_video & poor_quality)) | (F[<0.5] (((watching_mode & (! LAST)) & (X (! watching_mode))) | LAST)))))",
            "pctlExpanded": "P>=1[((G ((! (((! watching_mode) & (X watching_mode)) & (! false))) | (X (P<0.45[(F<=0.5 (cancel_video & poor_quality))])))) & (watching_mode => ((watching_mode & (X (! watching_mode))) | (P<0.45[(F[<=0.5] (cancel_video & poor_quality))]))))]",
            "ftInfAUExpanded": "((G ((! ((! watching_mode) & (X watching_mode))) | (X ((F[<=0.5] (cancel_video & poor_quality)) | (F[<0.5] (watching_mode & (X (! watching_mode)))))))) & (watching_mode -> ((F[<=0.5] (cancel_video & poor_quality)) | (F[<0.5] (watching_mode & (X (! watching_mode)))))))",
            "component": "User"
        },
        "status": "",
        "_id": "7fae04d9-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R12",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "if a car is detected at a gantry and the speed measurement indicates that the speed of the car is greater than 130 km/h then an image made by the camera is sent to the operator within 1 second in 99.999% of the cases",
        "comments": "",
        "fulltext": "if carDetected & speed>130 System shall with probability >= 0.99999 within 1 second satisfy captureImage & sendToOperator",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "carDetected",
                "speed",
                "captureImage",
                "sendToOperator"
            ],
            "qualifier_word": "if",
            "pre_condition": "(carDetected & speed > 130)",
            "regular_condition": "(carDetected & speed > 130)",
            "conditionTextRange": [
                0,
                25
            ],
            "component_name": "System",
            "componentTextRange": [
                27,
                32
            ],
            "probability_bound": [
                ">=",
                "0.99999"
            ],
            "probabilityTextRange": [
                40,
                66
            ],
            "duration": "1",
            "timingTextRange": [
                68,
                82
            ],
            "post_condition": "(captureImage & sendToOperator)",
            "responseTextRange": [
                84,
                120
            ],
            "diagramVariables": "TC = <b><i>(carDetected & speed > 130)</i></b>,  n = <b><i>1</i></b>, Response = <b><i>(captureImage & sendToOperator)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(carDetected & speed > 130)</i></b> is true and any point in the interval where <b><i>(carDetected & speed > 130)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>1</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>1</i></b>). If the interval ends sooner than trigger+<b><i>1</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.99999",
            "regular_condition_unexp_pt": "(carDetected & (speed > 130))",
            "regular_condition_unexp_ft": "(carDetected & (speed > 130))",
            "regular_condition_unexp_pctl": "(carDetected & (speed > 130))",
            "regular_condition_SMV_pt": "(carDetected & (speed > 130))",
            "regular_condition_SMV_ft": "(carDetected & (speed > 130))",
            "regular_condition_PRISM_pctl": "(carDetected & (speed > 130))",
            "post_condition_unexp_pt": "(captureImage & sendToOperator)",
            "post_condition_unexp_ft": "(captureImage & sendToOperator)",
            "post_condition_unexp_pctl": "(captureImage & sendToOperator)",
            "post_condition_SMV_pt": "(captureImage & sendToOperator)",
            "post_condition_SMV_ft": "(captureImage & sendToOperator)",
            "post_condition_PRISM_pctl": "(captureImage & sendToOperator)",
            "ft": "((LAST V (((! (carDetected & (speed > 130))) & ((! LAST) & (X (carDetected & (speed > 130))))) -> (X ((F[<=1] (captureImage & sendToOperator)) | (F[<1] LAST))))) & ((carDetected & (speed > 130)) -> ((F[<=1] (captureImage & sendToOperator)) | (F[<1] LAST))))",
            "pt": "(H ((O[=1] (((carDetected & (speed > 130)) & (Z (! (carDetected & (speed > 130))))) & (! (captureImage & sendToOperator)))) -> (O[<1] ((Z FALSE) | (captureImage & sendToOperator)))))",
            "pctl": "P>=1[((G (((! (carDetected & (speed > 130))) & (X (carDetected & (speed > 130)))) => (X (P>=0.99999[(F<=1 (captureImage & sendToOperator))])))) & ((carDetected & (speed > 130)) => (P>=0.99999[(F[<=1] (captureImage & sendToOperator))])))]",
            "ptExpanded": "(H ((O[1,1] (((carDetected & (speed > 130)) & (Z (! (carDetected & (speed > 130))))) & (! (captureImage & sendToOperator)))) -> (O[0,0] ((Z FALSE) | (captureImage & sendToOperator)))))",
            "CoCoSpecCode": "H((OT(1, 1, (((carDetected and (speed > 130)) and ZtoPre(not ((carDetected and (speed > 130))))) and not ((captureImage and sendToOperator)))) => OT(0, 0, (ZtoPre(false) or (captureImage and sendToOperator)))))",
            "ftExpanded": "((LAST V (((! (carDetected & (speed > 130))) & ((! LAST) & (X (carDetected & (speed > 130))))) -> (X ((F[0,1] (captureImage & sendToOperator)) | (F[0,0] LAST))))) & ((carDetected & (speed > 130)) -> ((F[0,1] (captureImage & sendToOperator)) | (F[0,0] LAST))))",
            "pctlExpanded": "P>=1[((G (((! (carDetected & (speed > 130))) & (X (carDetected & (speed > 130)))) => (X (P>=0.99999[(F<=1 (captureImage & sendToOperator))])))) & ((carDetected & (speed > 130)) => (P>=0.99999[(F[<=1] (captureImage & sendToOperator))])))]",
            "ftInfAUExpanded": "((G (((! (carDetected & (speed > 130))) & (X (carDetected & (speed > 130)))) -> (X (F[0,1] (captureImage & sendToOperator))))) & ((carDetected & (speed > 130)) -> (F[0,1] (captureImage & sendToOperator))))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04da-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R9",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "Once the water pump is turned off, it remain so for at least 30 seconds with the probability greater or equal to 99%.",
        "comments": "",
        "fulltext": "if pumpOff System shall with probability >= 0.99 for 30 seconds satisfy off",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "for",
            "response": "satisfaction",
            "variables": [
                "pumpOff",
                "off"
            ],
            "qualifier_word": "if",
            "pre_condition": "(pumpOff)",
            "regular_condition": "(pumpOff)",
            "conditionTextRange": [
                0,
                9
            ],
            "component_name": "System",
            "componentTextRange": [
                11,
                16
            ],
            "probability_bound": [
                ">=",
                "0.99"
            ],
            "probabilityTextRange": [
                24,
                47
            ],
            "duration": "30",
            "timingTextRange": [
                49,
                62
            ],
            "post_condition": "(off)",
            "responseTextRange": [
                64,
                74
            ],
            "diagramVariables": "TC = <b><i>(pumpOff)</i></b>,  n = <b><i>30</i></b>, Response = <b><i>(off)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(pumpOff)</i></b> is true and any point in the interval where <b><i>(pumpOff)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the trigger and remain true for <b><i>30</i></b> time points past the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>30</i></b>), or to the end of the interval if the interval ends sooner than trigger+<b><i>30</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_for_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.99",
            "regular_condition_unexp_pt": "pumpOff",
            "regular_condition_unexp_ft": "pumpOff",
            "regular_condition_unexp_pctl": "pumpOff",
            "regular_condition_SMV_pt": "pumpOff",
            "regular_condition_SMV_ft": "pumpOff",
            "regular_condition_PRISM_pctl": "pumpOff",
            "post_condition_unexp_pt": "off",
            "post_condition_unexp_ft": "off",
            "post_condition_unexp_pctl": "off",
            "post_condition_SMV_pt": "off",
            "post_condition_SMV_ft": "off",
            "post_condition_PRISM_pctl": "off",
            "ft": "((LAST V (((! pumpOff) & ((! LAST) & (X pumpOff))) -> (X ((G[<=30] off) | (LAST V off))))) & (pumpOff -> ((G[<=30] off) | (LAST V off))))",
            "pt": "(H ((O[<=30] (pumpOff & (Z (! pumpOff)))) -> ((H (! pumpOff)) | off)))",
            "pctl": "P>=1[((G (((! pumpOff) & (X pumpOff)) => (X (P>=0.99[(G<=30 off)])))) & (pumpOff => (P>=0.99[(G[<=30] off)])))]",
            "ptExpanded": "(H ((O[0,30] (pumpOff & (Z (! pumpOff)))) -> ((H (! pumpOff)) | off)))",
            "CoCoSpecCode": "H((OT(30, 0, (pumpOff and ZtoPre(not (pumpOff)))) => (H(not (pumpOff)) or off)))",
            "ftExpanded": "((LAST V (((! pumpOff) & ((! LAST) & (X pumpOff))) -> (X ((G[0,30] off) | (LAST V off))))) & (pumpOff -> ((G[0,30] off) | (LAST V off))))",
            "pctlExpanded": "P>=1[((G (((! pumpOff) & (X pumpOff)) => (X (P>=0.99[(G<=30 off)])))) & (pumpOff => (P>=0.99[(G[<=30] off)])))]",
            "ftInfAUExpanded": "((G (((! pumpOff) & (X pumpOff)) -> (X ((G[0,30] off) | (G off))))) & (pumpOff -> ((G[0,30] off) | (G off))))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04db-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R107",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "The robot never goes to home within 50 s (s! = 1 always holds within time bound [0, 50] with a probability >=1)",
        "comments": "",
        "fulltext": "robot shall with probability >= 1 for 50 ticks satisfy s !=1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "for",
            "response": "satisfaction",
            "variables": [
                "s"
            ],
            "component_name": "robot",
            "componentTextRange": [
                0,
                4
            ],
            "probability_bound": [
                ">=",
                "1"
            ],
            "probabilityTextRange": [
                12,
                32
            ],
            "duration": "50",
            "timingTextRange": [
                34,
                45
            ],
            "post_condition": "(s != 1)",
            "responseTextRange": [
                47,
                59
            ],
            "diagramVariables": " n = <b><i>50</i></b>, Response = <b><i>(s != 1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the trigger and remain true for <b><i>50</i></b> time points past the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>50</i></b>), or to the end of the interval if the interval ends sooner than trigger+<b><i>50</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_for_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=1",
            "post_condition_unexp_pt": "(s != 1)",
            "post_condition_unexp_ft": "(s != 1)",
            "post_condition_unexp_pctl": "(s != 1)",
            "post_condition_SMV_pt": "(s != 1)",
            "post_condition_SMV_ft": "(s != 1)",
            "post_condition_PRISM_pctl": "(s != 1)",
            "ft": "((G[<=50] (s != 1)) | (LAST V (s != 1)))",
            "pt": "(H ((O[<=50] (Z FALSE)) -> (s != 1)))",
            "pctl": "(P>=1[(G<=50 (s != 1))])",
            "ptExpanded": "(H ((O[0,50] (Z FALSE)) -> (s != 1)))",
            "CoCoSpecCode": "H((OT(50, 0, ZtoPre(false)) => (s <> 1)))",
            "ftExpanded": "((G[0,50] (s != 1)) | (LAST V (s != 1)))",
            "pctlExpanded": "(P>=1[(G<=50 (s != 1))])",
            "ftInfAUExpanded": "((G[0,50] (s != 1)) | (G (s != 1)))",
            "component": "robot"
        },
        "status": "",
        "_id": "7fae04dc-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R133",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "If a changeDrug or a changeDoses has occurred the probability P2 that the next message received by the TA generates an alarm which fails (i.e., the FAS is not notified) is less than 0.015",
        "comments": "",
        "fulltext": "if changeDrug | changeDoses TA shall with probability < 0.015 at the next timepoint satisfy generate_failed_alarm",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "next",
            "response": "satisfaction",
            "variables": [
                "changeDrug",
                "changeDoses",
                "generate_failed_alarm"
            ],
            "qualifier_word": "if",
            "pre_condition": "(changeDrug | changeDoses)",
            "regular_condition": "(changeDrug | changeDoses)",
            "conditionTextRange": [
                0,
                26
            ],
            "component_name": "TA",
            "componentTextRange": [
                28,
                29
            ],
            "probability_bound": [
                "<",
                "0.015"
            ],
            "probabilityTextRange": [
                37,
                60
            ],
            "timingTextRange": [
                62,
                82
            ],
            "post_condition": "(generate_failed_alarm)",
            "responseTextRange": [
                84,
                112
            ],
            "diagramVariables": "TC = <b><i>(changeDrug | changeDoses)</i></b>, Response = <b><i>(generate_failed_alarm)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(changeDrug | changeDoses)</i></b> is true and any point in the interval where <b><i>(changeDrug | changeDoses)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.015",
            "regular_condition_unexp_pt": "(changeDrug | changeDoses)",
            "regular_condition_unexp_ft": "(changeDrug | changeDoses)",
            "regular_condition_unexp_pctl": "(changeDrug | changeDoses)",
            "regular_condition_SMV_pt": "(changeDrug | changeDoses)",
            "regular_condition_SMV_ft": "(changeDrug | changeDoses)",
            "regular_condition_PRISM_pctl": "(changeDrug | changeDoses)",
            "post_condition_unexp_pt": "generate_failed_alarm",
            "post_condition_unexp_ft": "generate_failed_alarm",
            "post_condition_unexp_pctl": "generate_failed_alarm",
            "post_condition_SMV_pt": "generate_failed_alarm",
            "post_condition_SMV_ft": "generate_failed_alarm",
            "post_condition_PRISM_pctl": "generate_failed_alarm",
            "ft": "((LAST V (((! (changeDrug | changeDoses)) & ((! LAST) & (X (changeDrug | changeDoses)))) -> (X (LAST | (X generate_failed_alarm))))) & ((changeDrug | changeDoses) -> (LAST | (X generate_failed_alarm))))",
            "pt": "(H ((Y ((changeDrug | changeDoses) & (Z (! (changeDrug | changeDoses))))) -> (generate_failed_alarm | (Z FALSE))))",
            "pctl": "P>=1[((G (((! (changeDrug | changeDoses)) & (X (changeDrug | changeDoses))) => (X (P<0.015[(LAST | (X generate_failed_alarm))])))) & ((changeDrug | changeDoses) => (P<0.015[(LAST | (X generate_failed_alarm))])))]",
            "ptExpanded": "(H ((Y ((changeDrug | changeDoses) & (Z (! (changeDrug | changeDoses))))) -> (generate_failed_alarm | (Z FALSE))))",
            "CoCoSpecCode": "H((YtoPre(((changeDrug or changeDoses) and ZtoPre(not ((changeDrug or changeDoses))))) => (generate_failed_alarm or ZtoPre(false))))",
            "ftExpanded": "((LAST V (((! (changeDrug | changeDoses)) & ((! LAST) & (X (changeDrug | changeDoses)))) -> (X (LAST | (X generate_failed_alarm))))) & ((changeDrug | changeDoses) -> (LAST | (X generate_failed_alarm))))",
            "pctlExpanded": "P>=1[((G (((! (changeDrug | changeDoses)) & (X (changeDrug | changeDoses))) => (X (P<0.015[(false | (X generate_failed_alarm))])))) & ((changeDrug | changeDoses) => (P<0.015[(false | (X generate_failed_alarm))])))]",
            "ftInfAUExpanded": "((G (((! (changeDrug | changeDoses)) & (X (changeDrug | changeDoses))) -> (X (X generate_failed_alarm)))) & ((changeDrug | changeDoses) -> (X generate_failed_alarm)))",
            "component": "TA"
        },
        "status": "",
        "_id": "7fae04dd-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R95",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "whenever a patient requests a service the system will in 99.999 percent of the cases respond to the request within 30 seconds",
        "comments": "",
        "fulltext": "whenever serviceRequested system shall with probability > 0.9999 within 30 seconds satisfy respondToRequest",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "serviceRequested",
                "respondToRequest"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(serviceRequested)",
            "regular_condition": "(serviceRequested)",
            "conditionTextRange": [
                0,
                24
            ],
            "component_name": "system",
            "componentTextRange": [
                26,
                31
            ],
            "probability_bound": [
                ">",
                "0.9999"
            ],
            "probabilityTextRange": [
                39,
                63
            ],
            "duration": "30",
            "timingTextRange": [
                65,
                81
            ],
            "post_condition": "(respondToRequest)",
            "responseTextRange": [
                83,
                106
            ],
            "diagramVariables": "CC = <b><i>(serviceRequested)</i></b>,  n = <b><i>30</i></b>, Response = <b><i>(respondToRequest)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(serviceRequested)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>30</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>30</i></b>). If the interval ends sooner than trigger+<b><i>30</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.9999",
            "regular_condition_unexp_pt": "serviceRequested",
            "regular_condition_unexp_ft": "serviceRequested",
            "regular_condition_unexp_pctl": "serviceRequested",
            "regular_condition_SMV_pt": "serviceRequested",
            "regular_condition_SMV_ft": "serviceRequested",
            "regular_condition_PRISM_pctl": "serviceRequested",
            "post_condition_unexp_pt": "respondToRequest",
            "post_condition_unexp_ft": "respondToRequest",
            "post_condition_unexp_pctl": "respondToRequest",
            "post_condition_SMV_pt": "respondToRequest",
            "post_condition_SMV_ft": "respondToRequest",
            "post_condition_PRISM_pctl": "respondToRequest",
            "ft": "(LAST V (serviceRequested -> ((F[<=30] respondToRequest) | (F[<30] LAST))))",
            "pt": "(H ((O[=30] (serviceRequested & (! respondToRequest))) -> (O[<30] ((Z FALSE) | respondToRequest))))",
            "pctl": "P>=1[(G (serviceRequested => (P>0.9999[(F<=30 respondToRequest)])))]",
            "ptExpanded": "(H ((O[30,30] (serviceRequested & (! respondToRequest))) -> (O[0,29] ((Z FALSE) | respondToRequest))))",
            "CoCoSpecCode": "H((OT(30, 30, (serviceRequested and not (respondToRequest))) => OT(29, 0, (ZtoPre(false) or respondToRequest))))",
            "ftExpanded": "(LAST V (serviceRequested -> ((F[0,30] respondToRequest) | (F[0,29] LAST))))",
            "pctlExpanded": "P>=1[(G (serviceRequested => (P>0.9999[(F<=30 respondToRequest)])))]",
            "ftInfAUExpanded": "(G (serviceRequested -> (F[0,30] respondToRequest)))",
            "component": "system"
        },
        "status": "",
        "_id": "7fae04de-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R25",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "the probability that a service’s response time for a customer’s request is less than 3.6 seconds is more than 80 percent",
        "comments": "",
        "fulltext": "if requestReceived System shall with probability > 0.8 within 36 milliseconds satisfy response",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "requestReceived",
                "response"
            ],
            "qualifier_word": "if",
            "pre_condition": "(requestReceived)",
            "regular_condition": "(requestReceived)",
            "conditionTextRange": [
                0,
                17
            ],
            "component_name": "System",
            "componentTextRange": [
                19,
                24
            ],
            "probability_bound": [
                ">",
                "0.8"
            ],
            "probabilityTextRange": [
                32,
                53
            ],
            "duration": "36",
            "timingTextRange": [
                55,
                76
            ],
            "post_condition": "(response)",
            "responseTextRange": [
                78,
                93
            ],
            "diagramVariables": "TC = <b><i>(requestReceived)</i></b>,  n = <b><i>36</i></b>, Response = <b><i>(response)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(requestReceived)</i></b> is true and any point in the interval where <b><i>(requestReceived)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>36</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>36</i></b>). If the interval ends sooner than trigger+<b><i>36</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.8",
            "regular_condition_unexp_pt": "requestReceived",
            "regular_condition_unexp_ft": "requestReceived",
            "regular_condition_unexp_pctl": "requestReceived",
            "regular_condition_SMV_pt": "requestReceived",
            "regular_condition_SMV_ft": "requestReceived",
            "regular_condition_PRISM_pctl": "requestReceived",
            "post_condition_unexp_pt": "response",
            "post_condition_unexp_ft": "response",
            "post_condition_unexp_pctl": "response",
            "post_condition_SMV_pt": "response",
            "post_condition_SMV_ft": "response",
            "post_condition_PRISM_pctl": "response",
            "ft": "((LAST V (((! requestReceived) & ((! LAST) & (X requestReceived))) -> (X ((F[<=36] response) | (F[<36] LAST))))) & (requestReceived -> ((F[<=36] response) | (F[<36] LAST))))",
            "pt": "(H ((O[=36] ((requestReceived & (Z (! requestReceived))) & (! response))) -> (O[<36] ((Z FALSE) | response))))",
            "pctl": "P>=1[((G (((! requestReceived) & (X requestReceived)) => (X (P>0.8[(F<=36 response)])))) & (requestReceived => (P>0.8[(F[<=36] response)])))]",
            "ptExpanded": "(H ((O[36,36] ((requestReceived & (Z (! requestReceived))) & (! response))) -> (O[0,35] ((Z FALSE) | response))))",
            "CoCoSpecCode": "H((OT(36, 36, ((requestReceived and ZtoPre(not (requestReceived))) and not (response))) => OT(35, 0, (ZtoPre(false) or response))))",
            "ftExpanded": "((LAST V (((! requestReceived) & ((! LAST) & (X requestReceived))) -> (X ((F[0,36] response) | (F[0,35] LAST))))) & (requestReceived -> ((F[0,36] response) | (F[0,35] LAST))))",
            "pctlExpanded": "P>=1[((G (((! requestReceived) & (X requestReceived)) => (X (P>0.8[(F<=36 response)])))) & (requestReceived => (P>0.8[(F[<=36] response)])))]",
            "ftInfAUExpanded": "((G (((! requestReceived) & (X requestReceived)) -> (X (F[0,36] response)))) & (requestReceived -> (F[0,36] response)))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04df-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R125",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "After completing the diagnosis, there is 95% probability that within 30 min PCH will ask MSA to record the diagnostic report into the EMR, transmit the result to the essential DLC, MIC and the PCH.",
        "comments": "",
        "fulltext": "when diagnosis_complete PCH shall with probability > 0.95 within 30 minutes satisfy record_report_EMR & transmit_result",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "diagnosis_complete",
                "record_report_EMR",
                "transmit_result"
            ],
            "qualifier_word": "when",
            "pre_condition": "(diagnosis_complete)",
            "regular_condition": "(diagnosis_complete)",
            "conditionTextRange": [
                0,
                22
            ],
            "component_name": "PCH",
            "componentTextRange": [
                24,
                26
            ],
            "probability_bound": [
                ">",
                "0.95"
            ],
            "probabilityTextRange": [
                34,
                56
            ],
            "duration": "30",
            "timingTextRange": [
                58,
                74
            ],
            "post_condition": "(record_report_EMR & transmit_result)",
            "responseTextRange": [
                76,
                118
            ],
            "diagramVariables": "TC = <b><i>(diagnosis_complete)</i></b>,  n = <b><i>30</i></b>, Response = <b><i>(record_report_EMR & transmit_result)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(diagnosis_complete)</i></b> is true and any point in the interval where <b><i>(diagnosis_complete)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>30</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>30</i></b>). If the interval ends sooner than trigger+<b><i>30</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.95",
            "regular_condition_unexp_pt": "diagnosis_complete",
            "regular_condition_unexp_ft": "diagnosis_complete",
            "regular_condition_unexp_pctl": "diagnosis_complete",
            "regular_condition_SMV_pt": "diagnosis_complete",
            "regular_condition_SMV_ft": "diagnosis_complete",
            "regular_condition_PRISM_pctl": "diagnosis_complete",
            "post_condition_unexp_pt": "(record_report_EMR & transmit_result)",
            "post_condition_unexp_ft": "(record_report_EMR & transmit_result)",
            "post_condition_unexp_pctl": "(record_report_EMR & transmit_result)",
            "post_condition_SMV_pt": "(record_report_EMR & transmit_result)",
            "post_condition_SMV_ft": "(record_report_EMR & transmit_result)",
            "post_condition_PRISM_pctl": "(record_report_EMR & transmit_result)",
            "ft": "((LAST V (((! diagnosis_complete) & ((! LAST) & (X diagnosis_complete))) -> (X ((F[<=30] (record_report_EMR & transmit_result)) | (F[<30] LAST))))) & (diagnosis_complete -> ((F[<=30] (record_report_EMR & transmit_result)) | (F[<30] LAST))))",
            "pt": "(H ((O[=30] ((diagnosis_complete & (Z (! diagnosis_complete))) & (! (record_report_EMR & transmit_result)))) -> (O[<30] ((Z FALSE) | (record_report_EMR & transmit_result)))))",
            "pctl": "P>=1[((G (((! diagnosis_complete) & (X diagnosis_complete)) => (X (P>0.95[(F<=30 (record_report_EMR & transmit_result))])))) & (diagnosis_complete => (P>0.95[(F[<=30] (record_report_EMR & transmit_result))])))]",
            "ptExpanded": "(H ((O[30,30] ((diagnosis_complete & (Z (! diagnosis_complete))) & (! (record_report_EMR & transmit_result)))) -> (O[0,29] ((Z FALSE) | (record_report_EMR & transmit_result)))))",
            "CoCoSpecCode": "H((OT(30, 30, ((diagnosis_complete and ZtoPre(not (diagnosis_complete))) and not ((record_report_EMR and transmit_result)))) => OT(29, 0, (ZtoPre(false) or (record_report_EMR and transmit_result)))))",
            "ftExpanded": "((LAST V (((! diagnosis_complete) & ((! LAST) & (X diagnosis_complete))) -> (X ((F[0,30] (record_report_EMR & transmit_result)) | (F[0,29] LAST))))) & (diagnosis_complete -> ((F[0,30] (record_report_EMR & transmit_result)) | (F[0,29] LAST))))",
            "pctlExpanded": "P>=1[((G (((! diagnosis_complete) & (X diagnosis_complete)) => (X (P>0.95[(F<=30 (record_report_EMR & transmit_result))])))) & (diagnosis_complete => (P>0.95[(F[<=30] (record_report_EMR & transmit_result))])))]",
            "ftInfAUExpanded": "((G (((! diagnosis_complete) & (X diagnosis_complete)) -> (X (F[0,30] (record_report_EMR & transmit_result))))) & (diagnosis_complete -> (F[0,30] (record_report_EMR & transmit_result))))",
            "component": "PCH"
        },
        "status": "",
        "_id": "7fae04e0-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R168a",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": " The example behavior shown within the region corresponds to a backup power source that needs 2 hours to charge, and, once charged, has a success rate of 85% regardless of when the main power fails. Note that whenever the assumption is unfulfilled, nothing is required of the backup. That is, within the first 3 hours, all success rates from 0% to 100% are allowed.",
        "comments": "",
        "fulltext": "upon uncharged System shall within 2 hours satisfy charged ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "null",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "uncharged",
                "charged"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(uncharged)",
            "regular_condition": "(uncharged)",
            "conditionTextRange": [
                0,
                13
            ],
            "component_name": "System",
            "componentTextRange": [
                15,
                20
            ],
            "duration": "2",
            "timingTextRange": [
                28,
                41
            ],
            "post_condition": "(charged)",
            "responseTextRange": [
                43,
                57
            ],
            "diagramVariables": "TC = <b><i>(uncharged)</i></b>,  n = <b><i>2</i></b>, Response = <b><i>(charged)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(uncharged)</i></b> is true and any point in the interval where <b><i>(uncharged)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>2</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>2</i></b>). If the interval ends sooner than trigger+<b><i>2</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "uncharged",
            "regular_condition_unexp_ft": "uncharged",
            "regular_condition_unexp_pctl": "uncharged",
            "regular_condition_SMV_pt": "uncharged",
            "regular_condition_SMV_ft": "uncharged",
            "regular_condition_PRISM_pctl": "uncharged",
            "post_condition_unexp_pt": "charged",
            "post_condition_unexp_ft": "charged",
            "post_condition_unexp_pctl": "charged",
            "post_condition_SMV_pt": "charged",
            "post_condition_SMV_ft": "charged",
            "post_condition_PRISM_pctl": "charged",
            "ft": "((LAST V (((! uncharged) & ((! LAST) & (X uncharged))) -> (X ((F[<=2] charged) | (F[<2] LAST))))) & (uncharged -> ((F[<=2] charged) | (F[<2] LAST))))",
            "pt": "(H ((O[=2] ((uncharged & (Z (! uncharged))) & (! charged))) -> (O[<2] ((Z FALSE) | charged))))",
            "pctl": "P>=1[((G (((! uncharged) & (X uncharged)) => (X (P>=1[(F<=2 charged)])))) & (uncharged => (P>=1[(F[<=2] charged)])))]",
            "ptExpanded": "(H ((O[2,2] ((uncharged & (Z (! uncharged))) & (! charged))) -> (O[0,1] ((Z FALSE) | charged))))",
            "CoCoSpecCode": "H((OT(2, 2, ((uncharged and ZtoPre(not (uncharged))) and not (charged))) => OT(1, 0, (ZtoPre(false) or charged))))",
            "ftExpanded": "((LAST V (((! uncharged) & ((! LAST) & (X uncharged))) -> (X ((F[0,2] charged) | (F[0,1] LAST))))) & (uncharged -> ((F[0,2] charged) | (F[0,1] LAST))))",
            "pctlExpanded": "P>=1[((G (((! uncharged) & (X uncharged)) => (X (P>=1[(F<=2 charged)])))) & (uncharged => (P>=1[(F[<=2] charged)])))]",
            "ftInfAUExpanded": "((G (((! uncharged) & (X uncharged)) -> (X (F[0,2] charged)))) & (uncharged -> (F[0,2] charged)))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04e1-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R163",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "if no error will occur in the next 100 units of time, with a probability of at least 90%",
        "comments": "",
        "fulltext": "System shall with probability >=0.9 within 100 ticks satisfy x > Xmin",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "x",
                "Xmin"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">=",
                "0.9"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "duration": "100",
            "timingTextRange": [
                36,
                51
            ],
            "post_condition": "(x > Xmin)",
            "responseTextRange": [
                53,
                68
            ],
            "diagramVariables": " n = <b><i>100</i></b>, Response = <b><i>(x > Xmin)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>100</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>100</i></b>). If the interval ends sooner than trigger+<b><i>100</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.9",
            "post_condition_unexp_pt": "(x > Xmin)",
            "post_condition_unexp_ft": "(x > Xmin)",
            "post_condition_unexp_pctl": "(x > Xmin)",
            "post_condition_SMV_pt": "(x > Xmin)",
            "post_condition_SMV_ft": "(x > Xmin)",
            "post_condition_PRISM_pctl": "(x > Xmin)",
            "ft": "((F[<=100] (x > Xmin)) | (F[<100] LAST))",
            "pt": "(H ((H (! (x > Xmin))) -> (O[<100] (Z FALSE))))",
            "pctl": "(P>=0.9[(F<=100 (x > Xmin))])",
            "ptExpanded": "(H ((H (! (x > Xmin))) -> (O[0,99] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not ((x > Xmin))) => OT(99, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,100] (x > Xmin)) | (F[0,99] LAST))",
            "pctlExpanded": "(P>=0.9[(F<=100 (x > Xmin))])",
            "ftInfAUExpanded": "(F[0,100] (x > Xmin))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04e2-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R58",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "whenever a patient requests a service the system will in 99.999 percent of the cases respond to the request within 3 seconds",
        "comments": "",
        "fulltext": "if patient_request System shall with probability >= 0.99999 within 3 seconds satisfy respond",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "patient_request",
                "respond"
            ],
            "qualifier_word": "if",
            "pre_condition": "(patient_request)",
            "regular_condition": "(patient_request)",
            "conditionTextRange": [
                0,
                17
            ],
            "component_name": "System",
            "componentTextRange": [
                19,
                24
            ],
            "probability_bound": [
                ">=",
                "0.99999"
            ],
            "probabilityTextRange": [
                32,
                58
            ],
            "duration": "3",
            "timingTextRange": [
                60,
                75
            ],
            "post_condition": "(respond)",
            "responseTextRange": [
                77,
                91
            ],
            "diagramVariables": "TC = <b><i>(patient_request)</i></b>,  n = <b><i>3</i></b>, Response = <b><i>(respond)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(patient_request)</i></b> is true and any point in the interval where <b><i>(patient_request)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>3</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>3</i></b>). If the interval ends sooner than trigger+<b><i>3</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.99999",
            "regular_condition_unexp_pt": "patient_request",
            "regular_condition_unexp_ft": "patient_request",
            "regular_condition_unexp_pctl": "patient_request",
            "regular_condition_SMV_pt": "patient_request",
            "regular_condition_SMV_ft": "patient_request",
            "regular_condition_PRISM_pctl": "patient_request",
            "post_condition_unexp_pt": "respond",
            "post_condition_unexp_ft": "respond",
            "post_condition_unexp_pctl": "respond",
            "post_condition_SMV_pt": "respond",
            "post_condition_SMV_ft": "respond",
            "post_condition_PRISM_pctl": "respond",
            "ft": "((LAST V (((! patient_request) & ((! LAST) & (X patient_request))) -> (X ((F[<=3] respond) | (F[<3] LAST))))) & (patient_request -> ((F[<=3] respond) | (F[<3] LAST))))",
            "pt": "(H ((O[=3] ((patient_request & (Z (! patient_request))) & (! respond))) -> (O[<3] ((Z FALSE) | respond))))",
            "pctl": "P>=1[((G (((! patient_request) & (X patient_request)) => (X (P>=0.99999[(F<=3 respond)])))) & (patient_request => (P>=0.99999[(F[<=3] respond)])))]",
            "ptExpanded": "(H ((O[3,3] ((patient_request & (Z (! patient_request))) & (! respond))) -> (O[0,2] ((Z FALSE) | respond))))",
            "CoCoSpecCode": "H((OT(3, 3, ((patient_request and ZtoPre(not (patient_request))) and not (respond))) => OT(2, 0, (ZtoPre(false) or respond))))",
            "ftExpanded": "((LAST V (((! patient_request) & ((! LAST) & (X patient_request))) -> (X ((F[0,3] respond) | (F[0,2] LAST))))) & (patient_request -> ((F[0,3] respond) | (F[0,2] LAST))))",
            "pctlExpanded": "P>=1[((G (((! patient_request) & (X patient_request)) => (X (P>=0.99999[(F<=3 respond)])))) & (patient_request => (P>=0.99999[(F[<=3] respond)])))]",
            "ftInfAUExpanded": "((G (((! patient_request) & (X patient_request)) -> (X (F[0,3] respond)))) & (patient_request -> (F[0,3] respond)))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04e3-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R52",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "the probability that the response time of requesting a service is within 10s is more than 90%",
        "comments": "",
        "fulltext": "if request System shall with probability >0.9 within 10 seconds satisfy response",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "request",
                "response"
            ],
            "qualifier_word": "if",
            "pre_condition": "(request)",
            "regular_condition": "(request)",
            "conditionTextRange": [
                0,
                9
            ],
            "component_name": "System",
            "componentTextRange": [
                11,
                16
            ],
            "probability_bound": [
                ">",
                "0.9"
            ],
            "probabilityTextRange": [
                24,
                44
            ],
            "duration": "10",
            "timingTextRange": [
                46,
                62
            ],
            "post_condition": "(response)",
            "responseTextRange": [
                64,
                79
            ],
            "diagramVariables": "TC = <b><i>(request)</i></b>,  n = <b><i>10</i></b>, Response = <b><i>(response)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(request)</i></b> is true and any point in the interval where <b><i>(request)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.9",
            "regular_condition_unexp_pt": "request",
            "regular_condition_unexp_ft": "request",
            "regular_condition_unexp_pctl": "request",
            "regular_condition_SMV_pt": "request",
            "regular_condition_SMV_ft": "request",
            "regular_condition_PRISM_pctl": "request",
            "post_condition_unexp_pt": "response",
            "post_condition_unexp_ft": "response",
            "post_condition_unexp_pctl": "response",
            "post_condition_SMV_pt": "response",
            "post_condition_SMV_ft": "response",
            "post_condition_PRISM_pctl": "response",
            "ft": "((LAST V (((! request) & ((! LAST) & (X request))) -> (X ((F[<=10] response) | (F[<10] LAST))))) & (request -> ((F[<=10] response) | (F[<10] LAST))))",
            "pt": "(H ((O[=10] ((request & (Z (! request))) & (! response))) -> (O[<10] ((Z FALSE) | response))))",
            "pctl": "P>=1[((G (((! request) & (X request)) => (X (P>0.9[(F<=10 response)])))) & (request => (P>0.9[(F[<=10] response)])))]",
            "ptExpanded": "(H ((O[10,10] ((request & (Z (! request))) & (! response))) -> (O[0,9] ((Z FALSE) | response))))",
            "CoCoSpecCode": "H((OT(10, 10, ((request and ZtoPre(not (request))) and not (response))) => OT(9, 0, (ZtoPre(false) or response))))",
            "ftExpanded": "((LAST V (((! request) & ((! LAST) & (X request))) -> (X ((F[0,10] response) | (F[0,9] LAST))))) & (request -> ((F[0,10] response) | (F[0,9] LAST))))",
            "pctlExpanded": "P>=1[((G (((! request) & (X request)) => (X (P>0.9[(F<=10 response)])))) & (request => (P>0.9[(F[<=10] response)])))]",
            "ftInfAUExpanded": "((G (((! request) & (X request)) -> (X (F[0,10] response)))) & (request -> (F[0,10] response)))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04e4-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R20",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "A new customer shall be able to complete her session up to logout, through normal shipping, waiting no more than 1 second, in no less than the 65% of the sessions. ( literally, a user recognized as NC (state 3 identifies a user as NC) has to reach the Logout state within 1 s, without passing through ExpShipping with probability higher than 0.65)",
        "comments": "",
        "fulltext": "whenever s=3 System shall with probability >= 0.65 within 1 second satisfy s=11",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "s"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(s = 3)",
            "regular_condition": "(s = 3)",
            "conditionTextRange": [
                0,
                11
            ],
            "component_name": "System",
            "componentTextRange": [
                13,
                18
            ],
            "probability_bound": [
                ">=",
                "0.65"
            ],
            "probabilityTextRange": [
                26,
                49
            ],
            "duration": "1",
            "timingTextRange": [
                51,
                65
            ],
            "post_condition": "(s = 11)",
            "responseTextRange": [
                67,
                78
            ],
            "diagramVariables": "CC = <b><i>(s = 3)</i></b>,  n = <b><i>1</i></b>, Response = <b><i>(s = 11)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(s = 3)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>1</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>1</i></b>). If the interval ends sooner than trigger+<b><i>1</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.65",
            "regular_condition_unexp_pt": "(s = 3)",
            "regular_condition_unexp_ft": "(s = 3)",
            "regular_condition_unexp_pctl": "(s = 3)",
            "regular_condition_SMV_pt": "(s = 3)",
            "regular_condition_SMV_ft": "(s = 3)",
            "regular_condition_PRISM_pctl": "(s = 3)",
            "post_condition_unexp_pt": "(s = 11)",
            "post_condition_unexp_ft": "(s = 11)",
            "post_condition_unexp_pctl": "(s = 11)",
            "post_condition_SMV_pt": "(s = 11)",
            "post_condition_SMV_ft": "(s = 11)",
            "post_condition_PRISM_pctl": "(s = 11)",
            "ft": "(LAST V ((s = 3) -> ((F[<=1] (s = 11)) | (F[<1] LAST))))",
            "pt": "(H ((O[=1] ((s = 3) & (! (s = 11)))) -> (O[<1] ((Z FALSE) | (s = 11)))))",
            "pctl": "P>=1[(G ((s = 3) => (P>=0.65[(F<=1 (s = 11))])))]",
            "ptExpanded": "(H ((O[1,1] ((s = 3) & (! (s = 11)))) -> (O[0,0] ((Z FALSE) | (s = 11)))))",
            "CoCoSpecCode": "H((OT(1, 1, ((s = 3) and not ((s = 11)))) => OT(0, 0, (ZtoPre(false) or (s = 11)))))",
            "ftExpanded": "(LAST V ((s = 3) -> ((F[0,1] (s = 11)) | (F[0,0] LAST))))",
            "pctlExpanded": "P>=1[(G ((s = 3) => (P>=0.65[(F<=1 (s = 11))])))]",
            "ftInfAUExpanded": "(G ((s = 3) -> (F[0,1] (s = 11))))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04e5-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R27",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "the probability of response time less than 2.5 is greater than 80 percent",
        "comments": "",
        "fulltext": "System shall with probability > 0.8 within 25 milliseconds satisfy response",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "response"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.8"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "duration": "25",
            "timingTextRange": [
                36,
                57
            ],
            "post_condition": "(response)",
            "responseTextRange": [
                59,
                74
            ],
            "diagramVariables": " n = <b><i>25</i></b>, Response = <b><i>(response)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>25</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>25</i></b>). If the interval ends sooner than trigger+<b><i>25</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.8",
            "post_condition_unexp_pt": "response",
            "post_condition_unexp_ft": "response",
            "post_condition_unexp_pctl": "response",
            "post_condition_SMV_pt": "response",
            "post_condition_SMV_ft": "response",
            "post_condition_PRISM_pctl": "response",
            "ft": "((F[<=25] response) | (F[<25] LAST))",
            "pt": "(H ((H (! response)) -> (O[<25] (Z FALSE))))",
            "pctl": "(P>0.8[(F<=25 response)])",
            "ptExpanded": "(H ((H (! response)) -> (O[0,24] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (response)) => OT(24, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,25] response) | (F[0,24] LAST))",
            "pctlExpanded": "(P>0.8[(F<=25 response)])",
            "ftInfAUExpanded": "(F[0,25] response)",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04e6-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R143",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "the probability that the cause of shut down is attributed to a sensor failure",
        "comments": "",
        "fulltext": "System shall with probability > 0.5 until fail_sensors satisfy ! shutdown",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "fail_sensors",
                "shutdown"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "stop_condition": "(fail_sensors)",
            "timingTextRange": [
                36,
                53
            ],
            "post_condition": "(! shutdown)",
            "responseTextRange": [
                55,
                72
            ],
            "diagramVariables": "SC = <b><i>(fail_sensors)</i></b>, Response = <b><i>(! shutdown)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_until_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "(! shutdown)",
            "post_condition_unexp_ft": "(! shutdown)",
            "post_condition_unexp_pctl": "(! shutdown)",
            "post_condition_SMV_pt": "(! shutdown)",
            "post_condition_SMV_ft": "(! shutdown)",
            "post_condition_PRISM_pctl": "(! shutdown)",
            "stop_condition_unexp_pt": "fail_sensors",
            "stop_condition_unexp_ft": "fail_sensors",
            "stop_condition_PRISM_pctl": "fail_sensors",
            "stop_condition_SMV_pt": "fail_sensors",
            "stop_condition_SMV_ft": "fail_sensors",
            "ft": "((fail_sensors V ((! shutdown) | fail_sensors)) | (LAST V (! shutdown)))",
            "pt": "(H ((H (! fail_sensors)) -> (! shutdown)))",
            "pctl": "(P>0.5[((undefined R ((! shutdown) | undefined)) | (LAST R (! shutdown)))])",
            "ptExpanded": "(H ((H (! fail_sensors)) -> (! shutdown)))",
            "CoCoSpecCode": "H((H(not (fail_sensors)) => not (shutdown)))",
            "ftExpanded": "((fail_sensors V ((! shutdown) | fail_sensors)) | (LAST V (! shutdown)))",
            "pctlExpanded": "(P>0.5[((fail_sensors R ((! shutdown) | fail_sensors)) | (false R (! shutdown)))])",
            "ftInfAUExpanded": "(fail_sensors V ((! shutdown) | fail_sensors))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04e7-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R152a",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "If the pessimistic button is chosen, M will award G 2 credits or take 1 credit from G with probability 2/3 and 1/3, respectively",
        "comments": "",
        "fulltext": "if pessimisticButton M shall with probability >= 0.75 eventually satisfy bigG = bigG + 2 ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "pessimisticButton",
                "bigG"
            ],
            "qualifier_word": "if",
            "pre_condition": "(pessimisticButton)",
            "regular_condition": "(pessimisticButton)",
            "conditionTextRange": [
                0,
                19
            ],
            "component_name": "M",
            "componentTextRange": [
                21,
                21
            ],
            "probability_bound": [
                ">=",
                "0.75"
            ],
            "probabilityTextRange": [
                29,
                52
            ],
            "timingTextRange": [
                54,
                63
            ],
            "post_condition": "(bigG = bigG + 2)",
            "responseTextRange": [
                65,
                87
            ],
            "diagramVariables": "TC = <b><i>(pessimisticButton)</i></b>, Response = <b><i>(bigG = bigG + 2)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(pessimisticButton)</i></b> is true and any point in the interval where <b><i>(pessimisticButton)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.75",
            "regular_condition_unexp_pt": "pessimisticButton",
            "regular_condition_unexp_ft": "pessimisticButton",
            "regular_condition_unexp_pctl": "pessimisticButton",
            "regular_condition_SMV_pt": "pessimisticButton",
            "regular_condition_SMV_ft": "pessimisticButton",
            "regular_condition_PRISM_pctl": "pessimisticButton",
            "post_condition_unexp_pt": "(bigG = (bigG + 2))",
            "post_condition_unexp_ft": "(bigG = (bigG + 2))",
            "post_condition_unexp_pctl": "(bigG = (bigG + 2))",
            "post_condition_SMV_pt": "(bigG = (bigG + 2))",
            "post_condition_SMV_ft": "(bigG = (bigG + 2))",
            "post_condition_PRISM_pctl": "(bigG = (bigG + 2))",
            "ft": "((LAST V (((! pessimisticButton) & ((! LAST) & (X pessimisticButton))) -> (X ((! LAST) U (bigG = (bigG + 2)))))) & (pessimisticButton -> ((! LAST) U (bigG = (bigG + 2)))))",
            "pt": "((H (! pessimisticButton)) | (! ((! (bigG = (bigG + 2))) S ((! (bigG = (bigG + 2))) & (pessimisticButton & (Z (! pessimisticButton)))))))",
            "pctl": "P>=1[((G (((! pessimisticButton) & (X pessimisticButton)) => (X (P>=0.75[(F (bigG = (bigG + 2)))])))) & (pessimisticButton => (P>=0.75[(F (bigG = (bigG + 2)))])))]",
            "ptExpanded": "((H (! pessimisticButton)) | (! ((! (bigG = (bigG + 2))) S ((! (bigG = (bigG + 2))) & (pessimisticButton & (Z (! pessimisticButton)))))))",
            "CoCoSpecCode": "(H(not (pessimisticButton)) or not (SI((pessimisticButton and ZtoPre(not (pessimisticButton))),not ((bigG = (bigG + 2))))))",
            "ftExpanded": "((LAST V (((! pessimisticButton) & ((! LAST) & (X pessimisticButton))) -> (X ((! LAST) U (bigG = (bigG + 2)))))) & (pessimisticButton -> ((! LAST) U (bigG = (bigG + 2)))))",
            "pctlExpanded": "P>=1[((G (((! pessimisticButton) & (X pessimisticButton)) => (X (P>=0.75[(F (bigG = (bigG + 2)))])))) & (pessimisticButton => (P>=0.75[(F (bigG = (bigG + 2)))])))]",
            "ftInfAUExpanded": "((G (((! pessimisticButton) & (X pessimisticButton)) -> (X (F (bigG = (bigG + 2)))))) & (pessimisticButton -> (F (bigG = (bigG + 2)))))",
            "component": "M"
        },
        "status": "",
        "_id": "7fae04e8-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R79",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "Probability that GFP concentration at row 3 exceeds 100 within 50 s.\n\nP=?[true U[<=50] GFP_pulsing_3 =  100] ",
        "comments": "",
        "fulltext": "System shall with probability >0.5 within 50 seconds satisfy GFP_pulsing_3 >=  100",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "GFP_pulsing_3"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                33
            ],
            "duration": "50",
            "timingTextRange": [
                35,
                51
            ],
            "post_condition": "(GFP_pulsing_3 >= 100)",
            "responseTextRange": [
                53,
                81
            ],
            "diagramVariables": " n = <b><i>50</i></b>, Response = <b><i>(GFP_pulsing_3 >= 100)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>50</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>50</i></b>). If the interval ends sooner than trigger+<b><i>50</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "(GFP_pulsing_3 >= 100)",
            "post_condition_unexp_ft": "(GFP_pulsing_3 >= 100)",
            "post_condition_unexp_pctl": "(GFP_pulsing_3 >= 100)",
            "post_condition_SMV_pt": "(GFP_pulsing_3 >= 100)",
            "post_condition_SMV_ft": "(GFP_pulsing_3 >= 100)",
            "post_condition_PRISM_pctl": "(GFP_pulsing_3 >= 100)",
            "ft": "((F[<=50] (GFP_pulsing_3 >= 100)) | (F[<50] LAST))",
            "pt": "(H ((H (! (GFP_pulsing_3 >= 100))) -> (O[<50] (Z FALSE))))",
            "pctl": "(P>0.5[(F<=50 (GFP_pulsing_3 >= 100))])",
            "ptExpanded": "(H ((H (! (GFP_pulsing_3 >= 100))) -> (O[0,49] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not ((GFP_pulsing_3 >= 100))) => OT(49, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,50] (GFP_pulsing_3 >= 100)) | (F[0,49] LAST))",
            "pctlExpanded": "(P>0.5[(F<=50 (GFP_pulsing_3 >= 100))])",
            "ftInfAUExpanded": "(F[0,50] (GFP_pulsing_3 >= 100))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04e9-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R84",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "Wrong position signal at Actuator output port shall be less than 3.10-3 per flight. ",
        "comments": "",
        "fulltext": "in flight mode Actuator shall with probability < 0.003 always satisfy wrong_position_signal",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "flight",
                "wrong_position_signal"
            ],
            "scope_mode": "flight",
            "scopeTextRange": [
                0,
                13
            ],
            "component_name": "Actuator",
            "componentTextRange": [
                15,
                22
            ],
            "probability_bound": [
                "<",
                "0.003"
            ],
            "probabilityTextRange": [
                30,
                53
            ],
            "timingTextRange": [
                55,
                60
            ],
            "post_condition": "(wrong_position_signal)",
            "responseTextRange": [
                62,
                90
            ],
            "diagramVariables": "M = <b><i>flight</i></b>, Response = <b><i>(wrong_position_signal)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>flight</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg",
            "scope_mode_pt": "flight",
            "scope_mode_ft": "flight",
            "scope_mode_pctl": "flight",
            "bound": "<0.003",
            "post_condition_unexp_pt": "wrong_position_signal",
            "post_condition_unexp_ft": "wrong_position_signal",
            "post_condition_unexp_pctl": "wrong_position_signal",
            "post_condition_SMV_pt": "wrong_position_signal",
            "post_condition_SMV_ft": "wrong_position_signal",
            "post_condition_PRISM_pctl": "wrong_position_signal",
            "ft": "(LAST V (flight -> wrong_position_signal))",
            "pt": "(H (flight -> wrong_position_signal))",
            "pctl": "P>=1[((G ((! (Fin_flight & (! LAST))) | (X (P<0.003[(Lin_flight R wrong_position_signal)])))) & (flight => (Lin_flight | (P<0.003[(Lin_flight R wrong_position_signal)]))))]",
            "ptExpanded": "(H (flight -> wrong_position_signal))",
            "CoCoSpecCode": "H((flight => wrong_position_signal))",
            "ftExpanded": "(LAST V (flight -> wrong_position_signal))",
            "pctlExpanded": "P>=1[((G ((! (((! flight) & (X flight)) & (! false))) | (X (P<0.003[((flight & (X (! flight))) R wrong_position_signal)])))) & (flight => ((flight & (X (! flight))) | (P<0.003[((flight & (X (! flight))) R wrong_position_signal)]))))]",
            "ftInfAUExpanded": "(G (flight -> wrong_position_signal))",
            "component": "Actuator"
        },
        "status": "",
        "_id": "7fae04ea-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R89",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "Probability of the failure of any QUMComponent\n\n\"P=?[(true)U\n<=T\n((%module id1% state > %#normstate%) |\n(%module id2% state > %#normstate%) |...|\n(%module idn% state > %#normstate%))]\"",
        "comments": "",
        "fulltext": "QUMComponent shall with probability > 0.5 within 10 ticks satisfy ((module_id1_state > normstate) | (module_id2_state > normstate) | (module_idn_state > normstate))",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "module_id1_state",
                "normstate",
                "module_id2_state",
                "module_idn_state"
            ],
            "component_name": "QUMComponent",
            "componentTextRange": [
                0,
                11
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                19,
                40
            ],
            "duration": "10",
            "timingTextRange": [
                42,
                56
            ],
            "post_condition": "(( ( module_id1_state > normstate ) | ( module_id2_state > normstate ) | ( module_idn_state > normstate ) ))",
            "responseTextRange": [
                58,
                163
            ],
            "diagramVariables": " n = <b><i>10</i></b>, Response = <b><i>(( ( module_id1_state > normstate ) | ( module_id2_state > normstate ) | ( module_idn_state > normstate ) ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "(((module_id1_state > normstate) | (module_id2_state > normstate)) | (module_idn_state > normstate))",
            "post_condition_unexp_ft": "(((module_id1_state > normstate) | (module_id2_state > normstate)) | (module_idn_state > normstate))",
            "post_condition_unexp_pctl": "(((module_id1_state > normstate) | (module_id2_state > normstate)) | (module_idn_state > normstate))",
            "post_condition_SMV_pt": "(((module_id1_state > normstate) | (module_id2_state > normstate)) | (module_idn_state > normstate))",
            "post_condition_SMV_ft": "(((module_id1_state > normstate) | (module_id2_state > normstate)) | (module_idn_state > normstate))",
            "post_condition_PRISM_pctl": "(((module_id1_state > normstate) | (module_id2_state > normstate)) | (module_idn_state > normstate))",
            "ft": "((F[<=10] (((module_id1_state > normstate) | (module_id2_state > normstate)) | (module_idn_state > normstate))) | (F[<10] LAST))",
            "pt": "(H ((H (! (((module_id1_state > normstate) | (module_id2_state > normstate)) | (module_idn_state > normstate)))) -> (O[<10] (Z FALSE))))",
            "pctl": "(P>0.5[(F<=10 (((module_id1_state > normstate) | (module_id2_state > normstate)) | (module_idn_state > normstate)))])",
            "ptExpanded": "(H ((H (! (((module_id1_state > normstate) | (module_id2_state > normstate)) | (module_idn_state > normstate)))) -> (O[0,9] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not ((((module_id1_state > normstate) or (module_id2_state > normstate)) or (module_idn_state > normstate)))) => OT(9, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,10] (((module_id1_state > normstate) | (module_id2_state > normstate)) | (module_idn_state > normstate))) | (F[0,9] LAST))",
            "pctlExpanded": "(P>0.5[(F<=10 (((module_id1_state > normstate) | (module_id2_state > normstate)) | (module_idn_state > normstate)))])",
            "ftInfAUExpanded": "(F[0,10] (((module_id1_state > normstate) | (module_id2_state > normstate)) | (module_idn_state > normstate)))",
            "component": "QUMComponent"
        },
        "status": "",
        "_id": "7fae04eb-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R114",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "browseCatalog (class A, denoted with a star symbol in Figure 11) is invoked with a probability of 99%",
        "comments": "",
        "fulltext": "System shall with probability > 0.99 eventually satisfy invokeBrowseCatalog",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "invokeBrowseCatalog"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.99"
            ],
            "probabilityTextRange": [
                13,
                35
            ],
            "timingTextRange": [
                37,
                46
            ],
            "post_condition": "(invokeBrowseCatalog)",
            "responseTextRange": [
                48,
                74
            ],
            "diagramVariables": "Response = <b><i>(invokeBrowseCatalog)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.99",
            "post_condition_unexp_pt": "invokeBrowseCatalog",
            "post_condition_unexp_ft": "invokeBrowseCatalog",
            "post_condition_unexp_pctl": "invokeBrowseCatalog",
            "post_condition_SMV_pt": "invokeBrowseCatalog",
            "post_condition_SMV_ft": "invokeBrowseCatalog",
            "post_condition_PRISM_pctl": "invokeBrowseCatalog",
            "ft": "((! LAST) U invokeBrowseCatalog)",
            "pt": "(O invokeBrowseCatalog)",
            "pctl": "(P>0.99[(F invokeBrowseCatalog)])",
            "ptExpanded": "(O invokeBrowseCatalog)",
            "CoCoSpecCode": "O(invokeBrowseCatalog)",
            "ftExpanded": "((! LAST) U invokeBrowseCatalog)",
            "pctlExpanded": "(P>0.99[(F invokeBrowseCatalog)])",
            "ftInfAUExpanded": "(F invokeBrowseCatalog)",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04ec-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R16",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "Probability of a ExpShipping failure for a user recognized as a returning customer shall be less than 0.035 (the probability of eventually reaching state 13 (representing a failed express shipping) given that the DTMC starts its execution in state 1 (Returning Customer) is < 0.035.)",
        "comments": "",
        "fulltext": "whenever s=1 System shall with probability < 0.035 eventually satisfy s=13",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "s"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(s = 1)",
            "regular_condition": "(s = 1)",
            "conditionTextRange": [
                0,
                11
            ],
            "component_name": "System",
            "componentTextRange": [
                13,
                18
            ],
            "probability_bound": [
                "<",
                "0.035"
            ],
            "probabilityTextRange": [
                26,
                49
            ],
            "timingTextRange": [
                51,
                60
            ],
            "post_condition": "(s = 13)",
            "responseTextRange": [
                62,
                73
            ],
            "diagramVariables": "CC = <b><i>(s = 1)</i></b>, Response = <b><i>(s = 13)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(s = 1)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.035",
            "regular_condition_unexp_pt": "(s = 1)",
            "regular_condition_unexp_ft": "(s = 1)",
            "regular_condition_unexp_pctl": "(s = 1)",
            "regular_condition_SMV_pt": "(s = 1)",
            "regular_condition_SMV_ft": "(s = 1)",
            "regular_condition_PRISM_pctl": "(s = 1)",
            "post_condition_unexp_pt": "(s = 13)",
            "post_condition_unexp_ft": "(s = 13)",
            "post_condition_unexp_pctl": "(s = 13)",
            "post_condition_SMV_pt": "(s = 13)",
            "post_condition_SMV_ft": "(s = 13)",
            "post_condition_PRISM_pctl": "(s = 13)",
            "ft": "(LAST V ((s = 1) -> ((! LAST) U (s = 13))))",
            "pt": "((H (! (s = 1))) | (! ((! (s = 13)) S ((! (s = 13)) & (s = 1)))))",
            "pctl": "P>=1[(G ((s = 1) => (P<0.035[(F (s = 13))])))]",
            "ptExpanded": "((H (! (s = 1))) | (! ((! (s = 13)) S ((! (s = 13)) & (s = 1)))))",
            "CoCoSpecCode": "(H(not ((s = 1))) or not (SI((s = 1),not ((s = 13)))))",
            "ftExpanded": "(LAST V ((s = 1) -> ((! LAST) U (s = 13))))",
            "pctlExpanded": "P>=1[(G ((s = 1) => (P<0.035[(F (s = 13))])))]",
            "ftInfAUExpanded": "(G ((s = 1) -> (F (s = 13))))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04ed-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R155",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "If an error occurs, it will be solved eventually with probability greater than 0.95",
        "comments": "",
        "fulltext": "whenever error System shall with probability > 0.95 eventually satisfy solved",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "error",
                "solved"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(error)",
            "regular_condition": "(error)",
            "conditionTextRange": [
                0,
                13
            ],
            "component_name": "System",
            "componentTextRange": [
                15,
                20
            ],
            "probability_bound": [
                ">",
                "0.95"
            ],
            "probabilityTextRange": [
                28,
                50
            ],
            "timingTextRange": [
                52,
                61
            ],
            "post_condition": "(solved)",
            "responseTextRange": [
                63,
                76
            ],
            "diagramVariables": "CC = <b><i>(error)</i></b>, Response = <b><i>(solved)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(error)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.95",
            "regular_condition_unexp_pt": "error",
            "regular_condition_unexp_ft": "error",
            "regular_condition_unexp_pctl": "error",
            "regular_condition_SMV_pt": "error",
            "regular_condition_SMV_ft": "error",
            "regular_condition_PRISM_pctl": "error",
            "post_condition_unexp_pt": "solved",
            "post_condition_unexp_ft": "solved",
            "post_condition_unexp_pctl": "solved",
            "post_condition_SMV_pt": "solved",
            "post_condition_SMV_ft": "solved",
            "post_condition_PRISM_pctl": "solved",
            "ft": "(LAST V (error -> ((! LAST) U solved)))",
            "pt": "((H (! error)) | (! ((! solved) S ((! solved) & error))))",
            "pctl": "P>=1[(G (error => (P>0.95[(F solved)])))]",
            "ptExpanded": "((H (! error)) | (! ((! solved) S ((! solved) & error))))",
            "CoCoSpecCode": "(H(not (error)) or not (SI(error,not (solved))))",
            "ftExpanded": "(LAST V (error -> ((! LAST) U solved)))",
            "pctlExpanded": "P>=1[(G (error => (P>0.95[(F solved)])))]",
            "ftInfAUExpanded": "(G (error -> (F solved)))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04ee-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R139",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "The property query involves estimating the probability that the identify of an user is divulged, which happens when at least two adversaries observe (agree on) the user’s identity.",
        "comments": "",
        "fulltext": "System shall with probability > 0.5 eventually satisfy observe0 > 1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "observe0"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "timingTextRange": [
                36,
                45
            ],
            "post_condition": "(observe0 > 1)",
            "responseTextRange": [
                47,
                66
            ],
            "diagramVariables": "Response = <b><i>(observe0 > 1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "(observe0 > 1)",
            "post_condition_unexp_ft": "(observe0 > 1)",
            "post_condition_unexp_pctl": "(observe0 > 1)",
            "post_condition_SMV_pt": "(observe0 > 1)",
            "post_condition_SMV_ft": "(observe0 > 1)",
            "post_condition_PRISM_pctl": "(observe0 > 1)",
            "ft": "((! LAST) U (observe0 > 1))",
            "pt": "(O (observe0 > 1))",
            "pctl": "(P>0.5[(F (observe0 > 1))])",
            "ptExpanded": "(O (observe0 > 1))",
            "CoCoSpecCode": "O((observe0 > 1))",
            "ftExpanded": "((! LAST) U (observe0 > 1))",
            "pctlExpanded": "(P>0.5[(F (observe0 > 1))])",
            "ftInfAUExpanded": "(F (observe0 > 1))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04ef-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R72",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "The fraction of PP-ERK stays below the threshold with a given probability during the first 300 seconds",
        "comments": "",
        "fulltext": "System shall with probability >0.5 for 300 seconds satisfy pp_erk < threshold",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "for",
            "response": "satisfaction",
            "variables": [
                "pp_erk",
                "threshold"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                33
            ],
            "duration": "300",
            "timingTextRange": [
                35,
                49
            ],
            "post_condition": "(pp_erk < threshold)",
            "responseTextRange": [
                51,
                76
            ],
            "diagramVariables": " n = <b><i>300</i></b>, Response = <b><i>(pp_erk < threshold)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the trigger and remain true for <b><i>300</i></b> time points past the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>300</i></b>), or to the end of the interval if the interval ends sooner than trigger+<b><i>300</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_for_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "(pp_erk < threshold)",
            "post_condition_unexp_ft": "(pp_erk < threshold)",
            "post_condition_unexp_pctl": "(pp_erk < threshold)",
            "post_condition_SMV_pt": "(pp_erk < threshold)",
            "post_condition_SMV_ft": "(pp_erk < threshold)",
            "post_condition_PRISM_pctl": "(pp_erk < threshold)",
            "ft": "((G[<=300] (pp_erk < threshold)) | (LAST V (pp_erk < threshold)))",
            "pt": "(H ((O[<=300] (Z FALSE)) -> (pp_erk < threshold)))",
            "pctl": "(P>0.5[(G<=300 (pp_erk < threshold))])",
            "ptExpanded": "(H ((O[0,300] (Z FALSE)) -> (pp_erk < threshold)))",
            "CoCoSpecCode": "H((OT(300, 0, ZtoPre(false)) => (pp_erk < threshold)))",
            "ftExpanded": "((G[0,300] (pp_erk < threshold)) | (LAST V (pp_erk < threshold)))",
            "pctlExpanded": "(P>0.5[(G<=300 (pp_erk < threshold))])",
            "ftInfAUExpanded": "((G[0,300] (pp_erk < threshold)) | (G (pp_erk < threshold)))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04f0-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R144",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "the probability with which the first workstation in the system is served before the second one",
        "comments": "",
        "fulltext": "System shall with probability > 0.5 until (s=1 & a=1) satisfy !(s=2 & a=1)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "s",
                "a"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "stop_condition": "(( s = 1 & a = 1 ))",
            "timingTextRange": [
                36,
                52
            ],
            "post_condition": "(! ( s = 2 & a = 1 ))",
            "responseTextRange": [
                54,
                73
            ],
            "diagramVariables": "SC = <b><i>(( s = 1 & a = 1 ))</i></b>, Response = <b><i>(! ( s = 2 & a = 1 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_until_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "(! ((s = 2) & (a = 1)))",
            "post_condition_unexp_ft": "(! ((s = 2) & (a = 1)))",
            "post_condition_unexp_pctl": "(! ((s = 2) & (a = 1)))",
            "post_condition_SMV_pt": "(! ((s = 2) & (a = 1)))",
            "post_condition_SMV_ft": "(! ((s = 2) & (a = 1)))",
            "post_condition_PRISM_pctl": "(! ((s = 2) & (a = 1)))",
            "stop_condition_unexp_pt": "((s = 1) & (a = 1))",
            "stop_condition_unexp_ft": "((s = 1) & (a = 1))",
            "stop_condition_PRISM_pctl": "((s = 1) & (a = 1))",
            "stop_condition_SMV_pt": "((s = 1) & (a = 1))",
            "stop_condition_SMV_ft": "((s = 1) & (a = 1))",
            "ft": "((((s = 1) & (a = 1)) V ((! ((s = 2) & (a = 1))) | ((s = 1) & (a = 1)))) | (LAST V (! ((s = 2) & (a = 1)))))",
            "pt": "(H ((H (! ((s = 1) & (a = 1)))) -> (! ((s = 2) & (a = 1)))))",
            "pctl": "(P>0.5[((undefined R ((! ((s = 2) & (a = 1))) | undefined)) | (LAST R (! ((s = 2) & (a = 1)))))])",
            "ptExpanded": "(H ((H (! ((s = 1) & (a = 1)))) -> (! ((s = 2) & (a = 1)))))",
            "CoCoSpecCode": "H((H(not (((s = 1) and (a = 1)))) => not (((s = 2) and (a = 1)))))",
            "ftExpanded": "((((s = 1) & (a = 1)) V ((! ((s = 2) & (a = 1))) | ((s = 1) & (a = 1)))) | (LAST V (! ((s = 2) & (a = 1)))))",
            "pctlExpanded": "(P>0.5[((((s = 1) & (a = 1)) R ((! ((s = 2) & (a = 1))) | ((s = 1) & (a = 1)))) | (false R (! ((s = 2) & (a = 1)))))])",
            "ftInfAUExpanded": "(((s = 1) & (a = 1)) V ((! ((s = 2) & (a = 1))) | ((s = 1) & (a = 1))))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04f1-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R174",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "Commission of speed at Actuator output port shall be less than 3. 10-3 per flight",
        "comments": "",
        "fulltext": "in flight mode Actuator shall with probability < 0.001 always satisfy commision_of_speed < 3",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "flight",
                "commision_of_speed"
            ],
            "scope_mode": "flight",
            "scopeTextRange": [
                0,
                13
            ],
            "component_name": "Actuator",
            "componentTextRange": [
                15,
                22
            ],
            "probability_bound": [
                "<",
                "0.001"
            ],
            "probabilityTextRange": [
                30,
                53
            ],
            "timingTextRange": [
                55,
                60
            ],
            "post_condition": "(commision_of_speed < 3)",
            "responseTextRange": [
                62,
                91
            ],
            "diagramVariables": "M = <b><i>flight</i></b>, Response = <b><i>(commision_of_speed < 3)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>flight</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg",
            "scope_mode_pt": "flight",
            "scope_mode_ft": "flight",
            "scope_mode_pctl": "flight",
            "bound": "<0.001",
            "post_condition_unexp_pt": "(commision_of_speed < 3)",
            "post_condition_unexp_ft": "(commision_of_speed < 3)",
            "post_condition_unexp_pctl": "(commision_of_speed < 3)",
            "post_condition_SMV_pt": "(commision_of_speed < 3)",
            "post_condition_SMV_ft": "(commision_of_speed < 3)",
            "post_condition_PRISM_pctl": "(commision_of_speed < 3)",
            "ft": "(LAST V (flight -> (commision_of_speed < 3)))",
            "pt": "(H (flight -> (commision_of_speed < 3)))",
            "pctl": "P>=1[((G ((! (Fin_flight & (! LAST))) | (X (P<0.001[(Lin_flight R (commision_of_speed < 3))])))) & (flight => (Lin_flight | (P<0.001[(Lin_flight R (commision_of_speed < 3))]))))]",
            "ptExpanded": "(H (flight -> (commision_of_speed < 3)))",
            "CoCoSpecCode": "H((flight => (commision_of_speed < 3)))",
            "ftExpanded": "(LAST V (flight -> (commision_of_speed < 3)))",
            "pctlExpanded": "P>=1[((G ((! (((! flight) & (X flight)) & (! false))) | (X (P<0.001[((flight & (X (! flight))) R (commision_of_speed < 3))])))) & (flight => ((flight & (X (! flight))) | (P<0.001[((flight & (X (! flight))) R (commision_of_speed < 3))]))))]",
            "ftInfAUExpanded": "(G (flight -> (commision_of_speed < 3)))",
            "component": "Actuator"
        },
        "status": "",
        "_id": "7fae04f2-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R176",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "in an e-commerce application, the analysis may compute the probability that a certain product on sale is actually seen by a user. If such probability falls below a certain threshold the application may self-adapt to modify the order in which the products are visualised in order to optimise sales versus stock availability",
        "comments": "",
        "fulltext": "System shall with probability < 0.5 eventually satisfy self_adapt",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "self_adapt"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "timingTextRange": [
                36,
                45
            ],
            "post_condition": "(self_adapt)",
            "responseTextRange": [
                47,
                64
            ],
            "diagramVariables": "Response = <b><i>(self_adapt)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.5",
            "post_condition_unexp_pt": "self_adapt",
            "post_condition_unexp_ft": "self_adapt",
            "post_condition_unexp_pctl": "self_adapt",
            "post_condition_SMV_pt": "self_adapt",
            "post_condition_SMV_ft": "self_adapt",
            "post_condition_PRISM_pctl": "self_adapt",
            "ft": "((! LAST) U self_adapt)",
            "pt": "(O self_adapt)",
            "pctl": "(P<0.5[(F self_adapt)])",
            "ptExpanded": "(O self_adapt)",
            "CoCoSpecCode": "O(self_adapt)",
            "ftExpanded": "((! LAST) U self_adapt)",
            "pctlExpanded": "(P<0.5[(F self_adapt)])",
            "ftInfAUExpanded": "(F self_adapt)",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04f3-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R38",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "“The probability for a request of being dropped by the file server of the database server because of too many concurrent connections is less than 0.001”\n\nP≥0.999(true U s = 8) = P≥0.999( F s = 8)",
        "comments": "",
        "fulltext": "System shall with probability >= 0.999 eventually satisfy s=8 ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "s"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">=",
                "0.999"
            ],
            "probabilityTextRange": [
                13,
                37
            ],
            "timingTextRange": [
                39,
                48
            ],
            "post_condition": "(s = 8)",
            "responseTextRange": [
                50,
                60
            ],
            "diagramVariables": "Response = <b><i>(s = 8)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.999",
            "post_condition_unexp_pt": "(s = 8)",
            "post_condition_unexp_ft": "(s = 8)",
            "post_condition_unexp_pctl": "(s = 8)",
            "post_condition_SMV_pt": "(s = 8)",
            "post_condition_SMV_ft": "(s = 8)",
            "post_condition_PRISM_pctl": "(s = 8)",
            "ft": "((! LAST) U (s = 8))",
            "pt": "(O (s = 8))",
            "pctl": "(P>=0.999[(F (s = 8))])",
            "ptExpanded": "(O (s = 8))",
            "CoCoSpecCode": "O((s = 8))",
            "ftExpanded": "((! LAST) U (s = 8))",
            "pctlExpanded": "(P>=0.999[(F (s = 8))])",
            "ftInfAUExpanded": "(F (s = 8))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04f4-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R108",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "The robot does not continuously search for food forever (s=0 always holds with a probability <=0)",
        "comments": "",
        "fulltext": "robot shall with probability <=0 always satisfy s=0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "s"
            ],
            "component_name": "robot",
            "componentTextRange": [
                0,
                4
            ],
            "probability_bound": [
                "<=",
                "0"
            ],
            "probabilityTextRange": [
                12,
                31
            ],
            "timingTextRange": [
                33,
                38
            ],
            "post_condition": "(s = 0)",
            "responseTextRange": [
                40,
                50
            ],
            "diagramVariables": "Response = <b><i>(s = 0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<=0",
            "post_condition_unexp_pt": "(s = 0)",
            "post_condition_unexp_ft": "(s = 0)",
            "post_condition_unexp_pctl": "(s = 0)",
            "post_condition_SMV_pt": "(s = 0)",
            "post_condition_SMV_ft": "(s = 0)",
            "post_condition_PRISM_pctl": "(s = 0)",
            "ft": "(LAST V (s = 0))",
            "pt": "(H (s = 0))",
            "pctl": "(P<=0[(G (s = 0))])",
            "ptExpanded": "(H (s = 0))",
            "CoCoSpecCode": "H((s = 0))",
            "ftExpanded": "(LAST V (s = 0))",
            "pctlExpanded": "(P<=0[(G (s = 0))])",
            "ftInfAUExpanded": "(G (s = 0))",
            "component": "robot"
        },
        "status": "",
        "_id": "7fae04f5-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R121",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "An improved DSRC device developed in Australia has recorded improved reliability of 90% at 100m distance without any obstructions",
        "comments": "",
        "fulltext": "whenever distance = 100 DSRC shall with probability > 0.9 always satisfy reliable",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "bound",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "distance",
                "reliable"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(distance = 100)",
            "regular_condition": "(distance = 100)",
            "conditionTextRange": [
                0,
                22
            ],
            "component_name": "DSRC",
            "componentTextRange": [
                24,
                27
            ],
            "probability_bound": [
                ">",
                "0.9"
            ],
            "probabilityTextRange": [
                35,
                56
            ],
            "timingTextRange": [
                58,
                63
            ],
            "post_condition": "(reliable)",
            "responseTextRange": [
                65,
                80
            ],
            "diagramVariables": "CC = <b><i>(distance = 100)</i></b>, Response = <b><i>(reliable)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(distance = 100)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_always_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.9",
            "regular_condition_unexp_pt": "(distance = 100)",
            "regular_condition_unexp_ft": "(distance = 100)",
            "regular_condition_unexp_pctl": "(distance = 100)",
            "regular_condition_SMV_pt": "(distance = 100)",
            "regular_condition_SMV_ft": "(distance = 100)",
            "regular_condition_PRISM_pctl": "(distance = 100)",
            "post_condition_unexp_pt": "reliable",
            "post_condition_unexp_ft": "reliable",
            "post_condition_unexp_pctl": "reliable",
            "post_condition_SMV_pt": "reliable",
            "post_condition_SMV_ft": "reliable",
            "post_condition_PRISM_pctl": "reliable",
            "ft": "(LAST V ((distance = 100) -> (LAST V reliable)))",
            "pt": "(H ((H (! (distance = 100))) | reliable))",
            "pctl": "P>=1[(G ((distance = 100) => (P>0.9[(G reliable)])))]",
            "ptExpanded": "(H ((H (! (distance = 100))) | reliable))",
            "CoCoSpecCode": "H((H(not ((distance = 100))) or reliable))",
            "ftExpanded": "(LAST V ((distance = 100) -> (LAST V reliable)))",
            "pctlExpanded": "P>=1[(G ((distance = 100) => (P>0.9[(G reliable)])))]",
            "ftInfAUExpanded": "(G ((distance = 100) -> (G reliable)))",
            "component": "DSRC"
        },
        "status": "",
        "_id": "7fae04f6-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R102",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "𝑝ℎ𝑖 will eventually hold, until then 𝑝𝑠𝑖 holds with a probability p",
        "comments": "",
        "fulltext": "System shall with probability >0.5 until phi satisfy psi",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "phi",
                "psi"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                33
            ],
            "stop_condition": "(phi)",
            "timingTextRange": [
                35,
                43
            ],
            "post_condition": "(psi)",
            "responseTextRange": [
                45,
                55
            ],
            "diagramVariables": "SC = <b><i>(phi)</i></b>, Response = <b><i>(psi)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_until_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "psi",
            "post_condition_unexp_ft": "psi",
            "post_condition_unexp_pctl": "psi",
            "post_condition_SMV_pt": "psi",
            "post_condition_SMV_ft": "psi",
            "post_condition_PRISM_pctl": "psi",
            "stop_condition_unexp_pt": "phi",
            "stop_condition_unexp_ft": "phi",
            "stop_condition_PRISM_pctl": "phi",
            "stop_condition_SMV_pt": "phi",
            "stop_condition_SMV_ft": "phi",
            "ft": "((phi V (psi | phi)) | (LAST V psi))",
            "pt": "(H ((H (! phi)) -> psi))",
            "pctl": "(P>0.5[((undefined R (psi | undefined)) | (LAST R psi))])",
            "ptExpanded": "(H ((H (! phi)) -> psi))",
            "CoCoSpecCode": "H((H(not (phi)) => psi))",
            "ftExpanded": "((phi V (psi | phi)) | (LAST V psi))",
            "pctlExpanded": "(P>0.5[((phi R (psi | phi)) | (false R psi))])",
            "ftInfAUExpanded": "(phi V (psi | phi))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04f7-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R80",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "",
        "comments": "",
        "fulltext": "System shall with probability > 0.5 for 200 seconds satisfy GFP_pulsing_3 >0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "for",
            "response": "satisfaction",
            "variables": [
                "GFP_pulsing_3"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "duration": "200",
            "timingTextRange": [
                36,
                50
            ],
            "post_condition": "(GFP_pulsing_3 > 0)",
            "responseTextRange": [
                52,
                75
            ],
            "diagramVariables": " n = <b><i>200</i></b>, Response = <b><i>(GFP_pulsing_3 > 0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the trigger and remain true for <b><i>200</i></b> time points past the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>200</i></b>), or to the end of the interval if the interval ends sooner than trigger+<b><i>200</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_for_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "(GFP_pulsing_3 > 0)",
            "post_condition_unexp_ft": "(GFP_pulsing_3 > 0)",
            "post_condition_unexp_pctl": "(GFP_pulsing_3 > 0)",
            "post_condition_SMV_pt": "(GFP_pulsing_3 > 0)",
            "post_condition_SMV_ft": "(GFP_pulsing_3 > 0)",
            "post_condition_PRISM_pctl": "(GFP_pulsing_3 > 0)",
            "ft": "((G[<=200] (GFP_pulsing_3 > 0)) | (LAST V (GFP_pulsing_3 > 0)))",
            "pt": "(H ((O[<=200] (Z FALSE)) -> (GFP_pulsing_3 > 0)))",
            "pctl": "(P>0.5[(G<=200 (GFP_pulsing_3 > 0))])",
            "ptExpanded": "(H ((O[0,200] (Z FALSE)) -> (GFP_pulsing_3 > 0)))",
            "CoCoSpecCode": "H((OT(200, 0, ZtoPre(false)) => (GFP_pulsing_3 > 0)))",
            "ftExpanded": "((G[0,200] (GFP_pulsing_3 > 0)) | (LAST V (GFP_pulsing_3 > 0)))",
            "pctlExpanded": "(P>0.5[(G<=200 (GFP_pulsing_3 > 0))])",
            "ftInfAUExpanded": "((G[0,200] (GFP_pulsing_3 > 0)) | (G (GFP_pulsing_3 > 0)))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04f8-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R33",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "the accumulated probability of X violates the probability constraint ≤ p",
        "comments": "",
        "fulltext": "System shall with probability > 0.9 eventually satisfy bigX",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "bigX"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.9"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "timingTextRange": [
                36,
                45
            ],
            "post_condition": "(bigX)",
            "responseTextRange": [
                47,
                58
            ],
            "diagramVariables": "Response = <b><i>(bigX)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.9",
            "post_condition_unexp_pt": "bigX",
            "post_condition_unexp_ft": "bigX",
            "post_condition_unexp_pctl": "bigX",
            "post_condition_SMV_pt": "bigX",
            "post_condition_SMV_ft": "bigX",
            "post_condition_PRISM_pctl": "bigX",
            "ft": "((! LAST) U bigX)",
            "pt": "(O bigX)",
            "pctl": "(P>0.9[(F bigX)])",
            "ptExpanded": "(O bigX)",
            "CoCoSpecCode": "O(bigX)",
            "ftExpanded": "((! LAST) U bigX)",
            "pctlExpanded": "(P>0.9[(F bigX)])",
            "ftInfAUExpanded": "(F bigX)",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04f9-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R164",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "if a transition to the eclipse state should occur within 6015 seconds in 95% of the cases.",
        "comments": "",
        "fulltext": "System shall with probability > 0.95 within 6015 seconds satisfy s=0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "s"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.95"
            ],
            "probabilityTextRange": [
                13,
                35
            ],
            "duration": "6015",
            "timingTextRange": [
                37,
                55
            ],
            "post_condition": "(s = 0)",
            "responseTextRange": [
                57,
                67
            ],
            "diagramVariables": " n = <b><i>6015</i></b>, Response = <b><i>(s = 0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>6015</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>6015</i></b>). If the interval ends sooner than trigger+<b><i>6015</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.95",
            "post_condition_unexp_pt": "(s = 0)",
            "post_condition_unexp_ft": "(s = 0)",
            "post_condition_unexp_pctl": "(s = 0)",
            "post_condition_SMV_pt": "(s = 0)",
            "post_condition_SMV_ft": "(s = 0)",
            "post_condition_PRISM_pctl": "(s = 0)",
            "ft": "((F[<=6015] (s = 0)) | (F[<6015] LAST))",
            "pt": "(H ((H (! (s = 0))) -> (O[<6015] (Z FALSE))))",
            "pctl": "(P>0.95[(F<=6015 (s = 0))])",
            "ptExpanded": "(H ((H (! (s = 0))) -> (O[0,6014] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not ((s = 0))) => OT(6014, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,6015] (s = 0)) | (F[0,6014] LAST))",
            "pctlExpanded": "(P>0.95[(F<=6015 (s = 0))])",
            "ftInfAUExpanded": "(F[0,6015] (s = 0))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04fa-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R115",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "makePurchase (class B, denoted with a bullet point in Figure 11) is invoked with a probability of 1%",
        "comments": "",
        "fulltext": "System shall with probability > 0.01 eventually satisfy invokeMakePurchase",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "invokeMakePurchase"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.01"
            ],
            "probabilityTextRange": [
                13,
                35
            ],
            "timingTextRange": [
                37,
                46
            ],
            "post_condition": "(invokeMakePurchase)",
            "responseTextRange": [
                48,
                73
            ],
            "diagramVariables": "Response = <b><i>(invokeMakePurchase)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.01",
            "post_condition_unexp_pt": "invokeMakePurchase",
            "post_condition_unexp_ft": "invokeMakePurchase",
            "post_condition_unexp_pctl": "invokeMakePurchase",
            "post_condition_SMV_pt": "invokeMakePurchase",
            "post_condition_SMV_ft": "invokeMakePurchase",
            "post_condition_PRISM_pctl": "invokeMakePurchase",
            "ft": "((! LAST) U invokeMakePurchase)",
            "pt": "(O invokeMakePurchase)",
            "pctl": "(P>0.01[(F invokeMakePurchase)])",
            "ptExpanded": "(O invokeMakePurchase)",
            "CoCoSpecCode": "O(invokeMakePurchase)",
            "ftExpanded": "((! LAST) U invokeMakePurchase)",
            "pctlExpanded": "(P>0.01[(F invokeMakePurchase)])",
            "ftInfAUExpanded": "(F invokeMakePurchase)",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04fb-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R85",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "the probability that a service responds to a request within 2 h is more than 99%",
        "comments": "",
        "fulltext": "Service shall with probability > 0.99 within 2 hours satisfy respond",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "respond"
            ],
            "component_name": "Service",
            "componentTextRange": [
                0,
                6
            ],
            "probability_bound": [
                ">",
                "0.99"
            ],
            "probabilityTextRange": [
                14,
                36
            ],
            "duration": "2",
            "timingTextRange": [
                38,
                51
            ],
            "post_condition": "(respond)",
            "responseTextRange": [
                53,
                67
            ],
            "diagramVariables": " n = <b><i>2</i></b>, Response = <b><i>(respond)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>2</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>2</i></b>). If the interval ends sooner than trigger+<b><i>2</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.99",
            "post_condition_unexp_pt": "respond",
            "post_condition_unexp_ft": "respond",
            "post_condition_unexp_pctl": "respond",
            "post_condition_SMV_pt": "respond",
            "post_condition_SMV_ft": "respond",
            "post_condition_PRISM_pctl": "respond",
            "ft": "((F[<=2] respond) | (F[<2] LAST))",
            "pt": "(H ((H (! respond)) -> (O[<2] (Z FALSE))))",
            "pctl": "(P>0.99[(F<=2 respond)])",
            "ptExpanded": "(H ((H (! respond)) -> (O[0,1] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (respond)) => OT(1, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,2] respond) | (F[0,1] LAST))",
            "pctlExpanded": "(P>0.99[(F<=2 respond)])",
            "ftInfAUExpanded": "(F[0,2] respond)",
            "component": "Service"
        },
        "status": "",
        "_id": "7fae04fc-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R53",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "the probability that monitoring system is off-line within 24 hours should be less than 2%",
        "comments": "",
        "fulltext": "System shall with probability < 0.02 within 24 ticks satisfy monitoring_offline",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "monitoring_offline"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<",
                "0.02"
            ],
            "probabilityTextRange": [
                13,
                35
            ],
            "duration": "24",
            "timingTextRange": [
                37,
                51
            ],
            "post_condition": "(monitoring_offline)",
            "responseTextRange": [
                53,
                78
            ],
            "diagramVariables": " n = <b><i>24</i></b>, Response = <b><i>(monitoring_offline)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>24</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>24</i></b>). If the interval ends sooner than trigger+<b><i>24</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.02",
            "post_condition_unexp_pt": "monitoring_offline",
            "post_condition_unexp_ft": "monitoring_offline",
            "post_condition_unexp_pctl": "monitoring_offline",
            "post_condition_SMV_pt": "monitoring_offline",
            "post_condition_SMV_ft": "monitoring_offline",
            "post_condition_PRISM_pctl": "monitoring_offline",
            "ft": "((F[<=24] monitoring_offline) | (F[<24] LAST))",
            "pt": "(H ((H (! monitoring_offline)) -> (O[<24] (Z FALSE))))",
            "pctl": "(P<0.02[(F<=24 monitoring_offline)])",
            "ptExpanded": "(H ((H (! monitoring_offline)) -> (O[0,23] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (monitoring_offline)) => OT(23, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,24] monitoring_offline) | (F[0,23] LAST))",
            "pctlExpanded": "(P<0.02[(F<=24 monitoring_offline)])",
            "ftInfAUExpanded": "(F[0,24] monitoring_offline)",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04fd-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R158",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "The probability that because of any type of error, DC requested data not be received (R) from Smart Meter after 1 min from sending request (S), is less than 0.1%\n\nP(¬((T(R) − T(S)) ≤ 1 min)) ≤ 0.1%",
        "comments": "",
        "fulltext": "if sendrequest System shall with probability <= 0.1 after 1 minute satisfy receivedata",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "after",
            "response": "satisfaction",
            "variables": [
                "sendrequest",
                "receivedata"
            ],
            "qualifier_word": "if",
            "pre_condition": "(sendrequest)",
            "regular_condition": "(sendrequest)",
            "conditionTextRange": [
                0,
                13
            ],
            "component_name": "System",
            "componentTextRange": [
                15,
                20
            ],
            "probability_bound": [
                "<=",
                "0.1"
            ],
            "probabilityTextRange": [
                28,
                50
            ],
            "duration": "1",
            "timingTextRange": [
                52,
                65
            ],
            "post_condition": "(receivedata)",
            "responseTextRange": [
                67,
                85
            ],
            "diagramVariables": "TC = <b><i>(sendrequest)</i></b>,  n = <b><i>1</i></b>, Response = <b><i>(receivedata)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(sendrequest)</i></b> is true and any point in the interval where <b><i>(sendrequest)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must be false at all time points with distance <=<b><i>1</i></b> from the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>1</i></b>). Moreover, RES must hold at the point that is at distance <b><i>1</i></b>+1 from the trigger, that is, trigger+<b><i>1</i></b>+1, except if the end of the interval occurs earlier.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_after_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<=0.1",
            "regular_condition_unexp_pt": "sendrequest",
            "regular_condition_unexp_ft": "sendrequest",
            "regular_condition_unexp_pctl": "sendrequest",
            "regular_condition_SMV_pt": "sendrequest",
            "regular_condition_SMV_ft": "sendrequest",
            "regular_condition_PRISM_pctl": "sendrequest",
            "post_condition_unexp_pt": "receivedata",
            "post_condition_unexp_ft": "receivedata",
            "post_condition_unexp_pctl": "receivedata",
            "post_condition_SMV_pt": "receivedata",
            "post_condition_SMV_ft": "receivedata",
            "post_condition_PRISM_pctl": "receivedata",
            "ft": "((LAST V (((! sendrequest) & ((! LAST) & (X sendrequest))) -> (X (((G[<=1] (! receivedata)) | (LAST V (! receivedata))) & ((F[<=1+1] receivedata) | (F[<1+1] LAST)))))) & (sendrequest -> (((G[<=1] (! receivedata)) | (LAST V (! receivedata))) & ((F[<=1+1] receivedata) | (F[<1+1] LAST)))))",
            "pt": "((H ((O[<=1] (sendrequest & (Z (! sendrequest)))) -> ((H (! sendrequest)) | (! receivedata)))) & (H ((O[=1+1] ((sendrequest & (Z (! sendrequest))) & (! receivedata))) -> (O[<1+1] ((Z FALSE) | receivedata)))))",
            "pctl": "P>=1[((G (((! sendrequest) & (X sendrequest)) => (X (P<=0.1[((G<=1 (! receivedata)) & (F<=(1+1) receivedata))])))) & (sendrequest => (P<=0.1[((G[<=1] (! receivedata)) & (F[<=1+1] receivedata))])))]",
            "ptExpanded": "((H ((O[0,1] (sendrequest & (Z (! sendrequest)))) -> ((H (! sendrequest)) | (! receivedata)))) & (H ((O[2,2] ((sendrequest & (Z (! sendrequest))) & (! receivedata))) -> (O[0,1] ((Z FALSE) | receivedata)))))",
            "CoCoSpecCode": "(H((OT(1, 0, (sendrequest and ZtoPre(not (sendrequest)))) => (H(not (sendrequest)) or not (receivedata)))) and H((OT(2, 2, ((sendrequest and ZtoPre(not (sendrequest))) and not (receivedata))) => OT(1, 0, (ZtoPre(false) or receivedata)))))",
            "ftExpanded": "((LAST V (((! sendrequest) & ((! LAST) & (X sendrequest))) -> (X (((G[0,1] (! receivedata)) | (LAST V (! receivedata))) & ((F[0,2] receivedata) | (F[0,1] LAST)))))) & (sendrequest -> (((G[0,1] (! receivedata)) | (LAST V (! receivedata))) & ((F[0,2] receivedata) | (F[0,1] LAST)))))",
            "pctlExpanded": "P>=1[((G (((! sendrequest) & (X sendrequest)) => (X (P<=0.1[((G<=1 (! receivedata)) & (F<=(1+1) receivedata))])))) & (sendrequest => (P<=0.1[((G[<=1] (! receivedata)) & (F[<=1+1] receivedata))])))]",
            "ftInfAUExpanded": "((G (((! sendrequest) & (X sendrequest)) -> (X (((G[0,1] (! receivedata)) | (G (! receivedata))) & (F[0,2] receivedata))))) & (sendrequest -> (((G[0,1] (! receivedata)) | (G (! receivedata))) & (F[0,2] receivedata))))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04fe-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R81",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "Probability that GFP concentration at row 5 stays greater than 100 before GFP concentration at row 3 exceeds 100.",
        "comments": "",
        "fulltext": "System shall with probability > 0.5 until GFP_pulsing_3 =100 satisfy GFP_pulsing_5",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "GFP_pulsing_3",
                "GFP_pulsing_5"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "stop_condition": "(GFP_pulsing_3 = 100)",
            "timingTextRange": [
                36,
                59
            ],
            "post_condition": "(GFP_pulsing_5)",
            "responseTextRange": [
                61,
                81
            ],
            "diagramVariables": "SC = <b><i>(GFP_pulsing_3 = 100)</i></b>, Response = <b><i>(GFP_pulsing_5)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_until_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "GFP_pulsing_5",
            "post_condition_unexp_ft": "GFP_pulsing_5",
            "post_condition_unexp_pctl": "GFP_pulsing_5",
            "post_condition_SMV_pt": "GFP_pulsing_5",
            "post_condition_SMV_ft": "GFP_pulsing_5",
            "post_condition_PRISM_pctl": "GFP_pulsing_5",
            "stop_condition_unexp_pt": "(GFP_pulsing_3 = 100)",
            "stop_condition_unexp_ft": "(GFP_pulsing_3 = 100)",
            "stop_condition_PRISM_pctl": "(GFP_pulsing_3 = 100)",
            "stop_condition_SMV_pt": "(GFP_pulsing_3 = 100)",
            "stop_condition_SMV_ft": "(GFP_pulsing_3 = 100)",
            "ft": "(((GFP_pulsing_3 = 100) V (GFP_pulsing_5 | (GFP_pulsing_3 = 100))) | (LAST V GFP_pulsing_5))",
            "pt": "(H ((H (! (GFP_pulsing_3 = 100))) -> GFP_pulsing_5))",
            "pctl": "(P>0.5[((undefined R (GFP_pulsing_5 | undefined)) | (LAST R GFP_pulsing_5))])",
            "ptExpanded": "(H ((H (! (GFP_pulsing_3 = 100))) -> GFP_pulsing_5))",
            "CoCoSpecCode": "H((H(not ((GFP_pulsing_3 = 100))) => GFP_pulsing_5))",
            "ftExpanded": "(((GFP_pulsing_3 = 100) V (GFP_pulsing_5 | (GFP_pulsing_3 = 100))) | (LAST V GFP_pulsing_5))",
            "pctlExpanded": "(P>0.5[(((GFP_pulsing_3 = 100) R (GFP_pulsing_5 | (GFP_pulsing_3 = 100))) | (false R GFP_pulsing_5))])",
            "ftInfAUExpanded": "((GFP_pulsing_3 = 100) V (GFP_pulsing_5 | (GFP_pulsing_3 = 100)))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae04ff-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R68",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "the response time of the system will be lower than the estimate for more than 75 % of the uncertain cases",
        "comments": "",
        "fulltext": "whenever uncertain_case System shall with probability > 0.75 always satisfy respinse_time < estimate ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "bound",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "uncertain_case",
                "respinse_time",
                "estimate"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(uncertain_case)",
            "regular_condition": "(uncertain_case)",
            "conditionTextRange": [
                0,
                22
            ],
            "component_name": "System",
            "componentTextRange": [
                24,
                29
            ],
            "probability_bound": [
                ">",
                "0.75"
            ],
            "probabilityTextRange": [
                37,
                59
            ],
            "timingTextRange": [
                61,
                66
            ],
            "post_condition": "(respinse_time < estimate)",
            "responseTextRange": [
                68,
                99
            ],
            "diagramVariables": "CC = <b><i>(uncertain_case)</i></b>, Response = <b><i>(respinse_time < estimate)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(uncertain_case)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_always_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.75",
            "regular_condition_unexp_pt": "uncertain_case",
            "regular_condition_unexp_ft": "uncertain_case",
            "regular_condition_unexp_pctl": "uncertain_case",
            "regular_condition_SMV_pt": "uncertain_case",
            "regular_condition_SMV_ft": "uncertain_case",
            "regular_condition_PRISM_pctl": "uncertain_case",
            "post_condition_unexp_pt": "(respinse_time < estimate)",
            "post_condition_unexp_ft": "(respinse_time < estimate)",
            "post_condition_unexp_pctl": "(respinse_time < estimate)",
            "post_condition_SMV_pt": "(respinse_time < estimate)",
            "post_condition_SMV_ft": "(respinse_time < estimate)",
            "post_condition_PRISM_pctl": "(respinse_time < estimate)",
            "ft": "(LAST V (uncertain_case -> (LAST V (respinse_time < estimate))))",
            "pt": "(H ((H (! uncertain_case)) | (respinse_time < estimate)))",
            "pctl": "P>=1[(G (uncertain_case => (P>0.75[(G (respinse_time < estimate))])))]",
            "ptExpanded": "(H ((H (! uncertain_case)) | (respinse_time < estimate)))",
            "CoCoSpecCode": "H((H(not (uncertain_case)) or (respinse_time < estimate)))",
            "ftExpanded": "(LAST V (uncertain_case -> (LAST V (respinse_time < estimate))))",
            "pctlExpanded": "P>=1[(G (uncertain_case => (P>0.75[(G (respinse_time < estimate))])))]",
            "ftInfAUExpanded": "(G (uncertain_case -> (G (respinse_time < estimate))))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae0500-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R109",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "When searching starts, the robot eventually grabs food with a probability greater than 0.6 (s=0 is always followed by s=3 with a probability >0.6)",
        "comments": "",
        "fulltext": "upon searching the robot shall with probability > 0.6 eventually satisfy grabFood",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "searching",
                "grabFood"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(searching)",
            "regular_condition": "(searching)",
            "conditionTextRange": [
                0,
                13
            ],
            "component_name": "robot",
            "componentTextRange": [
                15,
                23
            ],
            "probability_bound": [
                ">",
                "0.6"
            ],
            "probabilityTextRange": [
                31,
                52
            ],
            "timingTextRange": [
                54,
                63
            ],
            "post_condition": "(grabFood)",
            "responseTextRange": [
                65,
                80
            ],
            "diagramVariables": "TC = <b><i>(searching)</i></b>, Response = <b><i>(grabFood)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(searching)</i></b> is true and any point in the interval where <b><i>(searching)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.6",
            "regular_condition_unexp_pt": "searching",
            "regular_condition_unexp_ft": "searching",
            "regular_condition_unexp_pctl": "searching",
            "regular_condition_SMV_pt": "searching",
            "regular_condition_SMV_ft": "searching",
            "regular_condition_PRISM_pctl": "searching",
            "post_condition_unexp_pt": "grabFood",
            "post_condition_unexp_ft": "grabFood",
            "post_condition_unexp_pctl": "grabFood",
            "post_condition_SMV_pt": "grabFood",
            "post_condition_SMV_ft": "grabFood",
            "post_condition_PRISM_pctl": "grabFood",
            "ft": "((LAST V (((! searching) & ((! LAST) & (X searching))) -> (X ((! LAST) U grabFood)))) & (searching -> ((! LAST) U grabFood)))",
            "pt": "((H (! searching)) | (! ((! grabFood) S ((! grabFood) & (searching & (Z (! searching)))))))",
            "pctl": "P>=1[((G (((! searching) & (X searching)) => (X (P>0.6[(F grabFood)])))) & (searching => (P>0.6[(F grabFood)])))]",
            "ptExpanded": "((H (! searching)) | (! ((! grabFood) S ((! grabFood) & (searching & (Z (! searching)))))))",
            "CoCoSpecCode": "(H(not (searching)) or not (SI((searching and ZtoPre(not (searching))),not (grabFood))))",
            "ftExpanded": "((LAST V (((! searching) & ((! LAST) & (X searching))) -> (X ((! LAST) U grabFood)))) & (searching -> ((! LAST) U grabFood)))",
            "pctlExpanded": "P>=1[((G (((! searching) & (X searching)) => (X (P>0.6[(F grabFood)])))) & (searching => (P>0.6[(F grabFood)])))]",
            "ftInfAUExpanded": "((G (((! searching) & (X searching)) -> (X (F grabFood)))) & (searching -> (F grabFood)))",
            "component": "robot"
        },
        "status": "",
        "_id": "7fae0501-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R2",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "The probability P1 that a service failure ever occurs during the lifetime of the system is less than 0.14",
        "comments": "",
        "fulltext": "System shall with probability <0.14 eventually satisfy failure",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "failure"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<",
                "0.14"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "timingTextRange": [
                36,
                45
            ],
            "post_condition": "(failure)",
            "responseTextRange": [
                47,
                61
            ],
            "diagramVariables": "Response = <b><i>(failure)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.14",
            "post_condition_unexp_pt": "failure",
            "post_condition_unexp_ft": "failure",
            "post_condition_unexp_pctl": "failure",
            "post_condition_SMV_pt": "failure",
            "post_condition_SMV_ft": "failure",
            "post_condition_PRISM_pctl": "failure",
            "ft": "((! LAST) U failure)",
            "pt": "(O failure)",
            "pctl": "(P<0.14[(F failure)])",
            "ptExpanded": "(O failure)",
            "CoCoSpecCode": "O(failure)",
            "ftExpanded": "((! LAST) U failure)",
            "pctlExpanded": "(P<0.14[(F failure)])",
            "ftInfAUExpanded": "(F failure)",
            "component": "System"
        },
        "status": "",
        "_id": "7fae0502-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R14",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "the probability that the first sensor dies within 192 h is <75%",
        "comments": "",
        "fulltext": "System shall with probability < 0.75 within 192 ticks satisfy sensorDies",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "sensorDies"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<",
                "0.75"
            ],
            "probabilityTextRange": [
                13,
                35
            ],
            "duration": "192",
            "timingTextRange": [
                37,
                52
            ],
            "post_condition": "(sensorDies)",
            "responseTextRange": [
                54,
                71
            ],
            "diagramVariables": " n = <b><i>192</i></b>, Response = <b><i>(sensorDies)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>192</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>192</i></b>). If the interval ends sooner than trigger+<b><i>192</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.75",
            "post_condition_unexp_pt": "sensorDies",
            "post_condition_unexp_ft": "sensorDies",
            "post_condition_unexp_pctl": "sensorDies",
            "post_condition_SMV_pt": "sensorDies",
            "post_condition_SMV_ft": "sensorDies",
            "post_condition_PRISM_pctl": "sensorDies",
            "ft": "((F[<=192] sensorDies) | (F[<192] LAST))",
            "pt": "(H ((H (! sensorDies)) -> (O[<192] (Z FALSE))))",
            "pctl": "(P<0.75[(F<=192 sensorDies)])",
            "ptExpanded": "(H ((H (! sensorDies)) -> (O[0,191] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (sensorDies)) => OT(191, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,192] sensorDies) | (F[0,191] LAST))",
            "pctlExpanded": "(P<0.75[(F<=192 sensorDies)])",
            "ftInfAUExpanded": "(F[0,192] sensorDies)",
            "component": "System"
        },
        "status": "",
        "_id": "7fae0503-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R6",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "After a write operation, the memory location should retain the data for the next 3 years with a probability of 99.9 percent.",
        "comments": "",
        "fulltext": "after writeOperation System shall with probability >= 0.999 for 3 ticks satisfy retainData",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "after",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "probability": "bound",
            "timing": "for",
            "response": "satisfaction",
            "variables": [
                "writeOperation",
                "retainData"
            ],
            "scope_mode": "writeOperation",
            "scopeTextRange": [
                0,
                19
            ],
            "component_name": "System",
            "componentTextRange": [
                21,
                26
            ],
            "probability_bound": [
                ">=",
                "0.999"
            ],
            "probabilityTextRange": [
                34,
                58
            ],
            "duration": "3",
            "timingTextRange": [
                60,
                70
            ],
            "post_condition": "(retainData)",
            "responseTextRange": [
                72,
                89
            ],
            "diagramVariables": "M = <b><i>writeOperation</i></b>,  n = <b><i>3</i></b>, Response = <b><i>(retainData)</i></b>.",
            "description": "ENFORCED: in the interval (if defined) starting strictly after the first <b><i>writeOperation</i></b> interval and spanning to the end of the execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the trigger and remain true for <b><i>3</i></b> time points past the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>3</i></b>), or to the end of the interval if the interval ends sooner than trigger+<b><i>3</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/after_null_for_satisfaction.svg",
            "scope_mode_pt": "writeOperation",
            "scope_mode_ft": "writeOperation",
            "scope_mode_pctl": "writeOperation",
            "bound": ">=0.999",
            "post_condition_unexp_pt": "retainData",
            "post_condition_unexp_ft": "retainData",
            "post_condition_unexp_pctl": "retainData",
            "post_condition_SMV_pt": "retainData",
            "post_condition_SMV_ft": "retainData",
            "post_condition_PRISM_pctl": "retainData",
            "ft": "(((! FLin_writeOperation) U (FLin_writeOperation & (X ((G[<=3] retainData) | (LAST V retainData))))) | (LAST V (! FLin_writeOperation)))",
            "pt": "((O FLin_writeOperation) -> (((O[<=3] FLin_writeOperation) -> retainData) S (((O[<=3] FLin_writeOperation) -> retainData) & FLin_writeOperation)))",
            "pctl": "P>=1[(((! FLin_writeOperation) U (FLin_writeOperation & (X (P>=0.999[(G<=3 retainData)])))) | (G (! FLin_writeOperation)))]",
            "ptExpanded": "((O (((! writeOperation) & (Y writeOperation)) & (Y (H (! ((! writeOperation) & (Y writeOperation))))))) -> (((O[0,3] (((! writeOperation) & (Y writeOperation)) & (Y (H (! ((! writeOperation) & (Y writeOperation))))))) -> retainData) S (((O[0,3] (((! writeOperation) & (Y writeOperation)) & (Y (H (! ((! writeOperation) & (Y writeOperation))))))) -> retainData) & (((! writeOperation) & (Y writeOperation)) & (Y (H (! ((! writeOperation) & (Y writeOperation)))))))))",
            "CoCoSpecCode": "(O(((not (writeOperation) and YtoPre(writeOperation)) and YtoPre(H(not ((not (writeOperation) and YtoPre(writeOperation))))))) => SI(((not (writeOperation) and YtoPre(writeOperation)) and YtoPre(H(not ((not (writeOperation) and YtoPre(writeOperation)))))),(OT(3, 0, ((not (writeOperation) and YtoPre(writeOperation)) and YtoPre(H(not ((not (writeOperation) and YtoPre(writeOperation))))))) => retainData)))",
            "ftExpanded": "(((! ((writeOperation & (! LAST)) & (X (! writeOperation)))) U (((writeOperation & (! LAST)) & (X (! writeOperation))) & (X ((G[0,3] retainData) | (LAST V retainData))))) | (LAST V (! ((writeOperation & (! LAST)) & (X (! writeOperation))))))",
            "pctlExpanded": "P>=1[(((! (writeOperation & (X (! writeOperation)))) U ((writeOperation & (X (! writeOperation))) & (X (P>=0.999[(G<=3 retainData)])))) | (G (! (writeOperation & (X (! writeOperation))))))]",
            "ftInfAUExpanded": "(((! (writeOperation & (X (! writeOperation)))) U ((writeOperation & (X (! writeOperation))) & (X ((G[0,3] retainData) | (G retainData))))) | (G (! (writeOperation & (X (! writeOperation))))))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae0504-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R96",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "“the probability that telecommunication system is not available for more than five minutes is less than once per year”",
        "comments": "",
        "fulltext": "System shall with probability < 0.002739726 for 5 minutes satisfy not_available",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "for",
            "response": "satisfaction",
            "variables": [
                "not_available"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<",
                "0.002739726"
            ],
            "probabilityTextRange": [
                13,
                42
            ],
            "duration": "5",
            "timingTextRange": [
                44,
                56
            ],
            "post_condition": "(not_available)",
            "responseTextRange": [
                58,
                78
            ],
            "diagramVariables": " n = <b><i>5</i></b>, Response = <b><i>(not_available)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the trigger and remain true for <b><i>5</i></b> time points past the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>5</i></b>), or to the end of the interval if the interval ends sooner than trigger+<b><i>5</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_for_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.002739726",
            "post_condition_unexp_pt": "not_available",
            "post_condition_unexp_ft": "not_available",
            "post_condition_unexp_pctl": "not_available",
            "post_condition_SMV_pt": "not_available",
            "post_condition_SMV_ft": "not_available",
            "post_condition_PRISM_pctl": "not_available",
            "ft": "((G[<=5] not_available) | (LAST V not_available))",
            "pt": "(H ((O[<=5] (Z FALSE)) -> not_available))",
            "pctl": "(P<0.002739726[(G<=5 not_available)])",
            "ptExpanded": "(H ((O[0,5] (Z FALSE)) -> not_available))",
            "CoCoSpecCode": "H((OT(5, 0, ZtoPre(false)) => not_available))",
            "ftExpanded": "((G[0,5] not_available) | (LAST V not_available))",
            "pctlExpanded": "(P<0.002739726[(G<=5 not_available)])",
            "ftInfAUExpanded": "((G[0,5] not_available) | (G not_available))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae0505-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R116",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "What is the probability of a decision to be taken without anybody commenting about their understanding",
        "comments": "",
        "fulltext": "System shall with probability > 0.5 eventually satisfy TakeDecision & NoComments",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "TakeDecision",
                "NoComments"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "timingTextRange": [
                36,
                45
            ],
            "post_condition": "(TakeDecision & NoComments)",
            "responseTextRange": [
                47,
                79
            ],
            "diagramVariables": "Response = <b><i>(TakeDecision & NoComments)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "(TakeDecision & NoComments)",
            "post_condition_unexp_ft": "(TakeDecision & NoComments)",
            "post_condition_unexp_pctl": "(TakeDecision & NoComments)",
            "post_condition_SMV_pt": "(TakeDecision & NoComments)",
            "post_condition_SMV_ft": "(TakeDecision & NoComments)",
            "post_condition_PRISM_pctl": "(TakeDecision & NoComments)",
            "ft": "((! LAST) U (TakeDecision & NoComments))",
            "pt": "(O (TakeDecision & NoComments))",
            "pctl": "(P>0.5[(F (TakeDecision & NoComments))])",
            "ptExpanded": "(O (TakeDecision & NoComments))",
            "CoCoSpecCode": "O((TakeDecision and NoComments))",
            "ftExpanded": "((! LAST) U (TakeDecision & NoComments))",
            "pctlExpanded": "(P>0.5[(F (TakeDecision & NoComments))])",
            "ftInfAUExpanded": "(F (TakeDecision & NoComments))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae0506-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R17",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "Probability of an authentication failure shall be less than 0.06 (the probability of eventually reaching the FailedLg state is less than 0.06.)",
        "comments": "",
        "fulltext": "System shall with probability <0.06 eventually satisfy s=5",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "s"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<",
                "0.06"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "timingTextRange": [
                36,
                45
            ],
            "post_condition": "(s = 5)",
            "responseTextRange": [
                47,
                57
            ],
            "diagramVariables": "Response = <b><i>(s = 5)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.06",
            "post_condition_unexp_pt": "(s = 5)",
            "post_condition_unexp_ft": "(s = 5)",
            "post_condition_unexp_pctl": "(s = 5)",
            "post_condition_SMV_pt": "(s = 5)",
            "post_condition_SMV_ft": "(s = 5)",
            "post_condition_PRISM_pctl": "(s = 5)",
            "ft": "((! LAST) U (s = 5))",
            "pt": "(O (s = 5))",
            "pctl": "(P<0.06[(F (s = 5))])",
            "ptExpanded": "(O (s = 5))",
            "CoCoSpecCode": "O((s = 5))",
            "ftExpanded": "((! LAST) U (s = 5))",
            "pctlExpanded": "(P<0.06[(F (s = 5))])",
            "ftInfAUExpanded": "(F (s = 5))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae0507-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R78",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "\"what is the probability that the number of molecules\nexceeds 100 within 60 minutes in 90% of the case\"",
        "comments": "",
        "fulltext": "System shall with probability >= 0.9 within 60 minutes satisfy molecules > 100",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "molecules"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">=",
                "0.9"
            ],
            "probabilityTextRange": [
                13,
                35
            ],
            "duration": "60",
            "timingTextRange": [
                37,
                53
            ],
            "post_condition": "(molecules > 100)",
            "responseTextRange": [
                55,
                77
            ],
            "diagramVariables": " n = <b><i>60</i></b>, Response = <b><i>(molecules > 100)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>60</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>60</i></b>). If the interval ends sooner than trigger+<b><i>60</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.9",
            "post_condition_unexp_pt": "(molecules > 100)",
            "post_condition_unexp_ft": "(molecules > 100)",
            "post_condition_unexp_pctl": "(molecules > 100)",
            "post_condition_SMV_pt": "(molecules > 100)",
            "post_condition_SMV_ft": "(molecules > 100)",
            "post_condition_PRISM_pctl": "(molecules > 100)",
            "ft": "((F[<=60] (molecules > 100)) | (F[<60] LAST))",
            "pt": "(H ((H (! (molecules > 100))) -> (O[<60] (Z FALSE))))",
            "pctl": "(P>=0.9[(F<=60 (molecules > 100))])",
            "ptExpanded": "(H ((H (! (molecules > 100))) -> (O[0,59] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not ((molecules > 100))) => OT(59, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,60] (molecules > 100)) | (F[0,59] LAST))",
            "pctlExpanded": "(P>=0.9[(F<=60 (molecules > 100))])",
            "ftInfAUExpanded": "(F[0,60] (molecules > 100))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae0508-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R30 ",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "the probability of fulfilling a goal G",
        "comments": "",
        "fulltext": "System shall with probability >0.9 eventually satisfy goal",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "goal"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.9"
            ],
            "probabilityTextRange": [
                13,
                33
            ],
            "timingTextRange": [
                35,
                44
            ],
            "post_condition": "(goal)",
            "responseTextRange": [
                46,
                57
            ],
            "diagramVariables": "Response = <b><i>(goal)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.9",
            "post_condition_unexp_pt": "goal",
            "post_condition_unexp_ft": "goal",
            "post_condition_unexp_pctl": "goal",
            "post_condition_SMV_pt": "goal",
            "post_condition_SMV_ft": "goal",
            "post_condition_PRISM_pctl": "goal",
            "ft": "((! LAST) U goal)",
            "pt": "(O goal)",
            "pctl": "(P>0.9[(F goal)])",
            "ptExpanded": "(O goal)",
            "CoCoSpecCode": "O(goal)",
            "ftExpanded": "((! LAST) U goal)",
            "pctlExpanded": "(P>0.9[(F goal)])",
            "ftInfAUExpanded": "(F goal)",
            "component": "System"
        },
        "status": "",
        "_id": "7fae0509-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R28",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "the probability of response time less than 1.9 is greater than 85 percent",
        "comments": "",
        "fulltext": "System shall with probability > 0.85 within 19 milliseconds satisfy response",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "response"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.85"
            ],
            "probabilityTextRange": [
                13,
                35
            ],
            "duration": "19",
            "timingTextRange": [
                37,
                58
            ],
            "post_condition": "(response)",
            "responseTextRange": [
                60,
                75
            ],
            "diagramVariables": " n = <b><i>19</i></b>, Response = <b><i>(response)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>19</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>19</i></b>). If the interval ends sooner than trigger+<b><i>19</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.85",
            "post_condition_unexp_pt": "response",
            "post_condition_unexp_ft": "response",
            "post_condition_unexp_pctl": "response",
            "post_condition_SMV_pt": "response",
            "post_condition_SMV_ft": "response",
            "post_condition_PRISM_pctl": "response",
            "ft": "((F[<=19] response) | (F[<19] LAST))",
            "pt": "(H ((H (! response)) -> (O[<19] (Z FALSE))))",
            "pctl": "(P>0.85[(F<=19 response)])",
            "ptExpanded": "(H ((H (! response)) -> (O[0,18] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (response)) => OT(18, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,19] response) | (F[0,18] LAST))",
            "pctlExpanded": "(P>0.85[(F<=19 response)])",
            "ftInfAUExpanded": "(F[0,19] response)",
            "component": "System"
        },
        "status": "",
        "_id": "7fae050a-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R151a",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "By pressing the optimistic button, with probability 1/2, M will award G 10 credits, while with probability 1/2, M will take 8 credits from G.",
        "comments": "",
        "fulltext": "if optimisticbutton System shall with probability >0.5 eventually satisfy bigG = bigG +10",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "optimisticbutton",
                "bigG"
            ],
            "qualifier_word": "if",
            "pre_condition": "(optimisticbutton)",
            "regular_condition": "(optimisticbutton)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "System",
            "componentTextRange": [
                20,
                25
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                33,
                53
            ],
            "timingTextRange": [
                55,
                64
            ],
            "post_condition": "(bigG = bigG + 10)",
            "responseTextRange": [
                66,
                88
            ],
            "diagramVariables": "TC = <b><i>(optimisticbutton)</i></b>, Response = <b><i>(bigG = bigG + 10)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(optimisticbutton)</i></b> is true and any point in the interval where <b><i>(optimisticbutton)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "regular_condition_unexp_pt": "optimisticbutton",
            "regular_condition_unexp_ft": "optimisticbutton",
            "regular_condition_unexp_pctl": "optimisticbutton",
            "regular_condition_SMV_pt": "optimisticbutton",
            "regular_condition_SMV_ft": "optimisticbutton",
            "regular_condition_PRISM_pctl": "optimisticbutton",
            "post_condition_unexp_pt": "(bigG = (bigG + 10))",
            "post_condition_unexp_ft": "(bigG = (bigG + 10))",
            "post_condition_unexp_pctl": "(bigG = (bigG + 10))",
            "post_condition_SMV_pt": "(bigG = (bigG + 10))",
            "post_condition_SMV_ft": "(bigG = (bigG + 10))",
            "post_condition_PRISM_pctl": "(bigG = (bigG + 10))",
            "ft": "((LAST V (((! optimisticbutton) & ((! LAST) & (X optimisticbutton))) -> (X ((! LAST) U (bigG = (bigG + 10)))))) & (optimisticbutton -> ((! LAST) U (bigG = (bigG + 10)))))",
            "pt": "((H (! optimisticbutton)) | (! ((! (bigG = (bigG + 10))) S ((! (bigG = (bigG + 10))) & (optimisticbutton & (Z (! optimisticbutton)))))))",
            "pctl": "P>=1[((G (((! optimisticbutton) & (X optimisticbutton)) => (X (P>0.5[(F (bigG = (bigG + 10)))])))) & (optimisticbutton => (P>0.5[(F (bigG = (bigG + 10)))])))]",
            "ptExpanded": "((H (! optimisticbutton)) | (! ((! (bigG = (bigG + 10))) S ((! (bigG = (bigG + 10))) & (optimisticbutton & (Z (! optimisticbutton)))))))",
            "CoCoSpecCode": "(H(not (optimisticbutton)) or not (SI((optimisticbutton and ZtoPre(not (optimisticbutton))),not ((bigG = (bigG + 10))))))",
            "ftExpanded": "((LAST V (((! optimisticbutton) & ((! LAST) & (X optimisticbutton))) -> (X ((! LAST) U (bigG = (bigG + 10)))))) & (optimisticbutton -> ((! LAST) U (bigG = (bigG + 10)))))",
            "pctlExpanded": "P>=1[((G (((! optimisticbutton) & (X optimisticbutton)) => (X (P>0.5[(F (bigG = (bigG + 10)))])))) & (optimisticbutton => (P>0.5[(F (bigG = (bigG + 10)))])))]",
            "ftInfAUExpanded": "((G (((! optimisticbutton) & (X optimisticbutton)) -> (X (F (bigG = (bigG + 10)))))) & (optimisticbutton -> (F (bigG = (bigG + 10)))))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae050b-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R129",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "if the user invokes the travel service (i.e. he/she sends the travel requirements to the TM service), the probability that the TM service responds to the user with the result of three services invocationsfindDuration, calculateTime and checkSchedule within 3.2 seconds is 89%",
        "comments": "",
        "fulltext": "if service_invoked TM shall with probability >= 0.89 within 3.2 seconds satisfy return_invocationsfindDuration & return_calculateTime & return_checkSchedule",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "service_invoked",
                "return_invocationsfindDuration",
                "return_calculateTime",
                "return_checkSchedule"
            ],
            "qualifier_word": "if",
            "pre_condition": "(service_invoked)",
            "regular_condition": "(service_invoked)",
            "conditionTextRange": [
                0,
                17
            ],
            "component_name": "TM",
            "componentTextRange": [
                19,
                20
            ],
            "probability_bound": [
                ">=",
                "0.89"
            ],
            "probabilityTextRange": [
                28,
                51
            ],
            "duration": "3.2",
            "timingTextRange": [
                53,
                70
            ],
            "post_condition": "(return_invocationsfindDuration & return_calculateTime & return_checkSchedule)",
            "responseTextRange": [
                72,
                155
            ],
            "diagramVariables": "TC = <b><i>(service_invoked)</i></b>,  n = <b><i>3.2</i></b>, Response = <b><i>(return_invocationsfindDuration & return_calculateTime & return_checkSchedule)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(service_invoked)</i></b> is true and any point in the interval where <b><i>(service_invoked)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>3.2</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>3.2</i></b>). If the interval ends sooner than trigger+<b><i>3.2</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.89",
            "regular_condition_unexp_pt": "service_invoked",
            "regular_condition_unexp_ft": "service_invoked",
            "regular_condition_unexp_pctl": "service_invoked",
            "regular_condition_SMV_pt": "service_invoked",
            "regular_condition_SMV_ft": "service_invoked",
            "regular_condition_PRISM_pctl": "service_invoked",
            "post_condition_unexp_pt": "((return_invocationsfindDuration & return_calculateTime) & return_checkSchedule)",
            "post_condition_unexp_ft": "((return_invocationsfindDuration & return_calculateTime) & return_checkSchedule)",
            "post_condition_unexp_pctl": "((return_invocationsfindDuration & return_calculateTime) & return_checkSchedule)",
            "post_condition_SMV_pt": "((return_invocationsfindDuration & return_calculateTime) & return_checkSchedule)",
            "post_condition_SMV_ft": "((return_invocationsfindDuration & return_calculateTime) & return_checkSchedule)",
            "post_condition_PRISM_pctl": "((return_invocationsfindDuration & return_calculateTime) & return_checkSchedule)",
            "ft": "((LAST V (((! service_invoked) & ((! LAST) & (X service_invoked))) -> (X ((F[<=3.2] ((return_invocationsfindDuration & return_calculateTime) & return_checkSchedule)) | (F[<3.2] LAST))))) & (service_invoked -> ((F[<=3.2] ((return_invocationsfindDuration & return_calculateTime) & return_checkSchedule)) | (F[<3.2] LAST))))",
            "pt": "(H ((O[=3.2] ((service_invoked & (Z (! service_invoked))) & (! ((return_invocationsfindDuration & return_calculateTime) & return_checkSchedule)))) -> (O[<3.2] ((Z FALSE) | ((return_invocationsfindDuration & return_calculateTime) & return_checkSchedule)))))",
            "pctl": "P>=1[((G (((! service_invoked) & (X service_invoked)) => (X (P>=0.89[(F<=3.2 ((return_invocationsfindDuration & return_calculateTime) & return_checkSchedule))])))) & (service_invoked => (P>=0.89[(F[<=3.2] ((return_invocationsfindDuration & return_calculateTime) & return_checkSchedule))])))]",
            "ptExpanded": "(H ((O[=3.2] ((service_invoked & (Z (! service_invoked))) & (! ((return_invocationsfindDuration & return_calculateTime) & return_checkSchedule)))) -> (O[<3.2] ((Z FALSE) | ((return_invocationsfindDuration & return_calculateTime) & return_checkSchedule)))))",
            "CoCoSpecCode": "H((OT(3.2, Equal, ((service_invoked and ZtoPre(not (service_invoked))) and not (((return_invocationsfindDuration and return_calculateTime) and return_checkSchedule)))) => OT(3.2, LessThan, (ZtoPre(false) or ((return_invocationsfindDuration and return_calculateTime) and return_checkSchedule)))))",
            "ftExpanded": "((LAST V (((! service_invoked) & ((! LAST) & (X service_invoked))) -> (X ((F[<=3.2] ((return_invocationsfindDuration & return_calculateTime) & return_checkSchedule)) | (F[<3.2] LAST))))) & (service_invoked -> ((F[<=3.2] ((return_invocationsfindDuration & return_calculateTime) & return_checkSchedule)) | (F[<3.2] LAST))))",
            "pctlExpanded": "P>=1[((G (((! service_invoked) & (X service_invoked)) => (X (P>=0.89[(F<=3.2 ((return_invocationsfindDuration & return_calculateTime) & return_checkSchedule))])))) & (service_invoked => (P>=0.89[(F[<=3.2] ((return_invocationsfindDuration & return_calculateTime) & return_checkSchedule))])))]",
            "ftInfAUExpanded": "((G (((! service_invoked) & (X service_invoked)) -> (X (F[<=3.2] ((return_invocationsfindDuration & return_calculateTime) & return_checkSchedule))))) & (service_invoked -> (F[<=3.2] ((return_invocationsfindDuration & return_calculateTime) & return_checkSchedule))))",
            "component": "TM"
        },
        "status": "",
        "_id": "7fae050c-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R168b",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": " The example behavior shown within the region corresponds to a backup power source that needs 2 hours to charge, and, once charged, has a success rate of 85% regardless of when the main power fails. Note that whenever the assumption is unfulfilled, nothing is required of the backup. That is, within the first 3 hours, all success rates from 0% to 100% are allowed.",
        "comments": "",
        "fulltext": "upon charged System shall with probability > 0.85 eventually satisfy success ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "charged",
                "success"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(charged)",
            "regular_condition": "(charged)",
            "conditionTextRange": [
                0,
                11
            ],
            "component_name": "System",
            "componentTextRange": [
                13,
                18
            ],
            "probability_bound": [
                ">",
                "0.85"
            ],
            "probabilityTextRange": [
                26,
                48
            ],
            "timingTextRange": [
                50,
                59
            ],
            "post_condition": "(success)",
            "responseTextRange": [
                61,
                75
            ],
            "diagramVariables": "TC = <b><i>(charged)</i></b>, Response = <b><i>(success)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(charged)</i></b> is true and any point in the interval where <b><i>(charged)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.85",
            "regular_condition_unexp_pt": "charged",
            "regular_condition_unexp_ft": "charged",
            "regular_condition_unexp_pctl": "charged",
            "regular_condition_SMV_pt": "charged",
            "regular_condition_SMV_ft": "charged",
            "regular_condition_PRISM_pctl": "charged",
            "post_condition_unexp_pt": "success",
            "post_condition_unexp_ft": "success",
            "post_condition_unexp_pctl": "success",
            "post_condition_SMV_pt": "success",
            "post_condition_SMV_ft": "success",
            "post_condition_PRISM_pctl": "success",
            "ft": "((LAST V (((! charged) & ((! LAST) & (X charged))) -> (X ((! LAST) U success)))) & (charged -> ((! LAST) U success)))",
            "pt": "((H (! charged)) | (! ((! success) S ((! success) & (charged & (Z (! charged)))))))",
            "pctl": "P>=1[((G (((! charged) & (X charged)) => (X (P>0.85[(F success)])))) & (charged => (P>0.85[(F success)])))]",
            "ptExpanded": "((H (! charged)) | (! ((! success) S ((! success) & (charged & (Z (! charged)))))))",
            "CoCoSpecCode": "(H(not (charged)) or not (SI((charged and ZtoPre(not (charged))),not (success))))",
            "ftExpanded": "((LAST V (((! charged) & ((! LAST) & (X charged))) -> (X ((! LAST) U success)))) & (charged -> ((! LAST) U success)))",
            "pctlExpanded": "P>=1[((G (((! charged) & (X charged)) => (X (P>0.85[(F success)])))) & (charged => (P>0.85[(F success)])))]",
            "ftInfAUExpanded": "((G (((! charged) & (X charged)) -> (X (F success)))) & (charged -> (F success)))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae050d-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R39",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "The probability of successfully handling a request is greater than 0.999\n\nP≤0.001(true U s = 9) = P≤0.001( F s = 9)",
        "comments": "",
        "fulltext": "System shall with probability <= 0.001 eventually satisfy s=9",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "s"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<=",
                "0.001"
            ],
            "probabilityTextRange": [
                13,
                37
            ],
            "timingTextRange": [
                39,
                48
            ],
            "post_condition": "(s = 9)",
            "responseTextRange": [
                50,
                60
            ],
            "diagramVariables": "Response = <b><i>(s = 9)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<=0.001",
            "post_condition_unexp_pt": "(s = 9)",
            "post_condition_unexp_ft": "(s = 9)",
            "post_condition_unexp_pctl": "(s = 9)",
            "post_condition_SMV_pt": "(s = 9)",
            "post_condition_SMV_ft": "(s = 9)",
            "post_condition_PRISM_pctl": "(s = 9)",
            "ft": "((! LAST) U (s = 9))",
            "pt": "(O (s = 9))",
            "pctl": "(P<=0.001[(F (s = 9))])",
            "ptExpanded": "(O (s = 9))",
            "CoCoSpecCode": "O((s = 9))",
            "ftExpanded": "((! LAST) U (s = 9))",
            "pctlExpanded": "(P<=0.001[(F (s = 9))])",
            "ftInfAUExpanded": "(F (s = 9))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae050e-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R45",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "Smoke_detected:o Generated by [Software Fault] with [Probability]",
        "comments": "",
        "fulltext": "if software_fault System shall with probability > 0.8 eventually satisfy smoke_detected",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "software_fault",
                "smoke_detected"
            ],
            "qualifier_word": "if",
            "pre_condition": "(software_fault)",
            "regular_condition": "(software_fault)",
            "conditionTextRange": [
                0,
                16
            ],
            "component_name": "System",
            "componentTextRange": [
                18,
                23
            ],
            "probability_bound": [
                ">",
                "0.8"
            ],
            "probabilityTextRange": [
                31,
                52
            ],
            "timingTextRange": [
                54,
                63
            ],
            "post_condition": "(smoke_detected)",
            "responseTextRange": [
                65,
                86
            ],
            "diagramVariables": "TC = <b><i>(software_fault)</i></b>, Response = <b><i>(smoke_detected)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(software_fault)</i></b> is true and any point in the interval where <b><i>(software_fault)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.8",
            "regular_condition_unexp_pt": "software_fault",
            "regular_condition_unexp_ft": "software_fault",
            "regular_condition_unexp_pctl": "software_fault",
            "regular_condition_SMV_pt": "software_fault",
            "regular_condition_SMV_ft": "software_fault",
            "regular_condition_PRISM_pctl": "software_fault",
            "post_condition_unexp_pt": "smoke_detected",
            "post_condition_unexp_ft": "smoke_detected",
            "post_condition_unexp_pctl": "smoke_detected",
            "post_condition_SMV_pt": "smoke_detected",
            "post_condition_SMV_ft": "smoke_detected",
            "post_condition_PRISM_pctl": "smoke_detected",
            "ft": "((LAST V (((! software_fault) & ((! LAST) & (X software_fault))) -> (X ((! LAST) U smoke_detected)))) & (software_fault -> ((! LAST) U smoke_detected)))",
            "pt": "((H (! software_fault)) | (! ((! smoke_detected) S ((! smoke_detected) & (software_fault & (Z (! software_fault)))))))",
            "pctl": "P>=1[((G (((! software_fault) & (X software_fault)) => (X (P>0.8[(F smoke_detected)])))) & (software_fault => (P>0.8[(F smoke_detected)])))]",
            "ptExpanded": "((H (! software_fault)) | (! ((! smoke_detected) S ((! smoke_detected) & (software_fault & (Z (! software_fault)))))))",
            "CoCoSpecCode": "(H(not (software_fault)) or not (SI((software_fault and ZtoPre(not (software_fault))),not (smoke_detected))))",
            "ftExpanded": "((LAST V (((! software_fault) & ((! LAST) & (X software_fault))) -> (X ((! LAST) U smoke_detected)))) & (software_fault -> ((! LAST) U smoke_detected)))",
            "pctlExpanded": "P>=1[((G (((! software_fault) & (X software_fault)) => (X (P>0.8[(F smoke_detected)])))) & (software_fault => (P>0.8[(F smoke_detected)])))]",
            "ftInfAUExpanded": "((G (((! software_fault) & (X software_fault)) -> (X (F smoke_detected)))) & (software_fault -> (F smoke_detected)))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae050f-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R134",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "Assuming that alarms generated by pButtonMsg have lower priority than the alarms generated by analyzeData, the probability P3 that a high priority alarm fails (i.e., it is not notified to the FAS) is less than 0.012",
        "comments": "",
        "fulltext": "whenever pButtonMsg_priority > analyseData_priority System shall with probability < 0.012 eventually satisfy high_priority_alarm_fails",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "pButtonMsg_priority",
                "analyseData_priority",
                "high_priority_alarm_fails"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(pButtonMsg_priority > analyseData_priority)",
            "regular_condition": "(pButtonMsg_priority > analyseData_priority)",
            "conditionTextRange": [
                0,
                50
            ],
            "component_name": "System",
            "componentTextRange": [
                52,
                57
            ],
            "probability_bound": [
                "<",
                "0.012"
            ],
            "probabilityTextRange": [
                65,
                88
            ],
            "timingTextRange": [
                90,
                99
            ],
            "post_condition": "(high_priority_alarm_fails)",
            "responseTextRange": [
                101,
                133
            ],
            "diagramVariables": "CC = <b><i>(pButtonMsg_priority > analyseData_priority)</i></b>, Response = <b><i>(high_priority_alarm_fails)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(pButtonMsg_priority > analyseData_priority)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.012",
            "regular_condition_unexp_pt": "(pButtonMsg_priority > analyseData_priority)",
            "regular_condition_unexp_ft": "(pButtonMsg_priority > analyseData_priority)",
            "regular_condition_unexp_pctl": "(pButtonMsg_priority > analyseData_priority)",
            "regular_condition_SMV_pt": "(pButtonMsg_priority > analyseData_priority)",
            "regular_condition_SMV_ft": "(pButtonMsg_priority > analyseData_priority)",
            "regular_condition_PRISM_pctl": "(pButtonMsg_priority > analyseData_priority)",
            "post_condition_unexp_pt": "high_priority_alarm_fails",
            "post_condition_unexp_ft": "high_priority_alarm_fails",
            "post_condition_unexp_pctl": "high_priority_alarm_fails",
            "post_condition_SMV_pt": "high_priority_alarm_fails",
            "post_condition_SMV_ft": "high_priority_alarm_fails",
            "post_condition_PRISM_pctl": "high_priority_alarm_fails",
            "ft": "(LAST V ((pButtonMsg_priority > analyseData_priority) -> ((! LAST) U high_priority_alarm_fails)))",
            "pt": "((H (! (pButtonMsg_priority > analyseData_priority))) | (! ((! high_priority_alarm_fails) S ((! high_priority_alarm_fails) & (pButtonMsg_priority > analyseData_priority)))))",
            "pctl": "P>=1[(G ((pButtonMsg_priority > analyseData_priority) => (P<0.012[(F high_priority_alarm_fails)])))]",
            "ptExpanded": "((H (! (pButtonMsg_priority > analyseData_priority))) | (! ((! high_priority_alarm_fails) S ((! high_priority_alarm_fails) & (pButtonMsg_priority > analyseData_priority)))))",
            "CoCoSpecCode": "(H(not ((pButtonMsg_priority > analyseData_priority))) or not (SI((pButtonMsg_priority > analyseData_priority),not (high_priority_alarm_fails))))",
            "ftExpanded": "(LAST V ((pButtonMsg_priority > analyseData_priority) -> ((! LAST) U high_priority_alarm_fails)))",
            "pctlExpanded": "P>=1[(G ((pButtonMsg_priority > analyseData_priority) => (P<0.012[(F high_priority_alarm_fails)])))]",
            "ftInfAUExpanded": "(G ((pButtonMsg_priority > analyseData_priority) -> (F high_priority_alarm_fails)))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae0510-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R175a",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "after sending a patient’s medical parameters to the Lab, TA receives a ‘high’ result within one hour. TA will immediately notify the assistants nearest to the patient and must receive a response from them within one hour with 95% probability",
        "comments": "",
        "fulltext": "upon send_to_lab TA shall within 1 hour satisfy receive_high_result",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "null",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "send_to_lab",
                "receive_high_result"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(send_to_lab)",
            "regular_condition": "(send_to_lab)",
            "conditionTextRange": [
                0,
                15
            ],
            "component_name": "TA",
            "componentTextRange": [
                17,
                18
            ],
            "duration": "1",
            "timingTextRange": [
                26,
                38
            ],
            "post_condition": "(receive_high_result)",
            "responseTextRange": [
                40,
                66
            ],
            "diagramVariables": "TC = <b><i>(send_to_lab)</i></b>,  n = <b><i>1</i></b>, Response = <b><i>(receive_high_result)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(send_to_lab)</i></b> is true and any point in the interval where <b><i>(send_to_lab)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>1</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>1</i></b>). If the interval ends sooner than trigger+<b><i>1</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "send_to_lab",
            "regular_condition_unexp_ft": "send_to_lab",
            "regular_condition_unexp_pctl": "send_to_lab",
            "regular_condition_SMV_pt": "send_to_lab",
            "regular_condition_SMV_ft": "send_to_lab",
            "regular_condition_PRISM_pctl": "send_to_lab",
            "post_condition_unexp_pt": "receive_high_result",
            "post_condition_unexp_ft": "receive_high_result",
            "post_condition_unexp_pctl": "receive_high_result",
            "post_condition_SMV_pt": "receive_high_result",
            "post_condition_SMV_ft": "receive_high_result",
            "post_condition_PRISM_pctl": "receive_high_result",
            "ft": "((LAST V (((! send_to_lab) & ((! LAST) & (X send_to_lab))) -> (X ((F[<=1] receive_high_result) | (F[<1] LAST))))) & (send_to_lab -> ((F[<=1] receive_high_result) | (F[<1] LAST))))",
            "pt": "(H ((O[=1] ((send_to_lab & (Z (! send_to_lab))) & (! receive_high_result))) -> (O[<1] ((Z FALSE) | receive_high_result))))",
            "pctl": "P>=1[((G (((! send_to_lab) & (X send_to_lab)) => (X (P>=1[(F<=1 receive_high_result)])))) & (send_to_lab => (P>=1[(F[<=1] receive_high_result)])))]",
            "ptExpanded": "(H ((O[1,1] ((send_to_lab & (Z (! send_to_lab))) & (! receive_high_result))) -> (O[0,0] ((Z FALSE) | receive_high_result))))",
            "CoCoSpecCode": "H((OT(1, 1, ((send_to_lab and ZtoPre(not (send_to_lab))) and not (receive_high_result))) => OT(0, 0, (ZtoPre(false) or receive_high_result))))",
            "ftExpanded": "((LAST V (((! send_to_lab) & ((! LAST) & (X send_to_lab))) -> (X ((F[0,1] receive_high_result) | (F[0,0] LAST))))) & (send_to_lab -> ((F[0,1] receive_high_result) | (F[0,0] LAST))))",
            "pctlExpanded": "P>=1[((G (((! send_to_lab) & (X send_to_lab)) => (X (P>=1[(F<=1 receive_high_result)])))) & (send_to_lab => (P>=1[(F[<=1] receive_high_result)])))]",
            "ftInfAUExpanded": "((G (((! send_to_lab) & (X send_to_lab)) -> (X (F[0,1] receive_high_result)))) & (send_to_lab -> (F[0,1] receive_high_result)))",
            "component": "TA"
        },
        "status": "",
        "_id": "7fae0511-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R145",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "From the initial state, the action disk_op labels the probability distribution modelling the likelihood that a disk unit operation fails (probability 0.005) or succeeds (probability 0.995).",
        "comments": "",
        "fulltext": "System shall with probability < 0.005 eventually satisfy disk_unit_operation_fails",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "disk_unit_operation_fails"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<",
                "0.005"
            ],
            "probabilityTextRange": [
                13,
                36
            ],
            "timingTextRange": [
                38,
                47
            ],
            "post_condition": "(disk_unit_operation_fails)",
            "responseTextRange": [
                49,
                81
            ],
            "diagramVariables": "Response = <b><i>(disk_unit_operation_fails)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.005",
            "post_condition_unexp_pt": "disk_unit_operation_fails",
            "post_condition_unexp_ft": "disk_unit_operation_fails",
            "post_condition_unexp_pctl": "disk_unit_operation_fails",
            "post_condition_SMV_pt": "disk_unit_operation_fails",
            "post_condition_SMV_ft": "disk_unit_operation_fails",
            "post_condition_PRISM_pctl": "disk_unit_operation_fails",
            "ft": "((! LAST) U disk_unit_operation_fails)",
            "pt": "(O disk_unit_operation_fails)",
            "pctl": "(P<0.005[(F disk_unit_operation_fails)])",
            "ptExpanded": "(O disk_unit_operation_fails)",
            "CoCoSpecCode": "O(disk_unit_operation_fails)",
            "ftExpanded": "((! LAST) U disk_unit_operation_fails)",
            "pctlExpanded": "(P<0.005[(F disk_unit_operation_fails)])",
            "ftInfAUExpanded": "(F disk_unit_operation_fails)",
            "component": "System"
        },
        "status": "",
        "_id": "7fae0512-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R73",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "What is the probability that the 3OC12HSL concentration exceeds m within t seconds?",
        "comments": "",
        "fulltext": "System shall with probability > 0.5 within 10 ticks satisfy concentration > m",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "concentration",
                "m"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "duration": "10",
            "timingTextRange": [
                36,
                50
            ],
            "post_condition": "(concentration > m)",
            "responseTextRange": [
                52,
                76
            ],
            "diagramVariables": " n = <b><i>10</i></b>, Response = <b><i>(concentration > m)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "(concentration > m)",
            "post_condition_unexp_ft": "(concentration > m)",
            "post_condition_unexp_pctl": "(concentration > m)",
            "post_condition_SMV_pt": "(concentration > m)",
            "post_condition_SMV_ft": "(concentration > m)",
            "post_condition_PRISM_pctl": "(concentration > m)",
            "ft": "((F[<=10] (concentration > m)) | (F[<10] LAST))",
            "pt": "(H ((H (! (concentration > m))) -> (O[<10] (Z FALSE))))",
            "pctl": "(P>0.5[(F<=10 (concentration > m))])",
            "ptExpanded": "(H ((H (! (concentration > m))) -> (O[0,9] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not ((concentration > m))) => OT(9, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,10] (concentration > m)) | (F[0,9] LAST))",
            "pctlExpanded": "(P>0.5[(F<=10 (concentration > m))])",
            "ftInfAUExpanded": "(F[0,10] (concentration > m))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae0513-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R59",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "\"“the probability that the telecommunication system is not available for more than five minutes is less than\nonce per year\"",
        "comments": "",
        "fulltext": "System shall with probability <0.002739726 for 5 minutes satisfy unavailable",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "for",
            "response": "satisfaction",
            "variables": [
                "unavailable"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<",
                "0.002739726"
            ],
            "probabilityTextRange": [
                13,
                41
            ],
            "duration": "5",
            "timingTextRange": [
                43,
                55
            ],
            "post_condition": "(unavailable)",
            "responseTextRange": [
                57,
                75
            ],
            "diagramVariables": " n = <b><i>5</i></b>, Response = <b><i>(unavailable)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the trigger and remain true for <b><i>5</i></b> time points past the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>5</i></b>), or to the end of the interval if the interval ends sooner than trigger+<b><i>5</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_for_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.002739726",
            "post_condition_unexp_pt": "unavailable",
            "post_condition_unexp_ft": "unavailable",
            "post_condition_unexp_pctl": "unavailable",
            "post_condition_SMV_pt": "unavailable",
            "post_condition_SMV_ft": "unavailable",
            "post_condition_PRISM_pctl": "unavailable",
            "ft": "((G[<=5] unavailable) | (LAST V unavailable))",
            "pt": "(H ((O[<=5] (Z FALSE)) -> unavailable))",
            "pctl": "(P<0.002739726[(G<=5 unavailable)])",
            "ptExpanded": "(H ((O[0,5] (Z FALSE)) -> unavailable))",
            "CoCoSpecCode": "H((OT(5, 0, ZtoPre(false)) => unavailable))",
            "ftExpanded": "((G[0,5] unavailable) | (LAST V unavailable))",
            "pctlExpanded": "(P<0.002739726[(G<=5 unavailable)])",
            "ftInfAUExpanded": "((G[0,5] unavailable) | (G unavailable))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae0514-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R129",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "after the user orders the desired travel, the probability that the travel schedule will be sent to the user within 20 seconds is 85%",
        "comments": "",
        "fulltext": "upon desiredTravelOrder System shall with probability > 0.85 within 20 ticks satisfy SendTravelSchedule",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "desiredTravelOrder",
                "SendTravelSchedule"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(desiredTravelOrder)",
            "regular_condition": "(desiredTravelOrder)",
            "conditionTextRange": [
                0,
                22
            ],
            "component_name": "System",
            "componentTextRange": [
                24,
                29
            ],
            "probability_bound": [
                ">",
                "0.85"
            ],
            "probabilityTextRange": [
                37,
                59
            ],
            "duration": "20",
            "timingTextRange": [
                61,
                75
            ],
            "post_condition": "(SendTravelSchedule)",
            "responseTextRange": [
                77,
                102
            ],
            "diagramVariables": "TC = <b><i>(desiredTravelOrder)</i></b>,  n = <b><i>20</i></b>, Response = <b><i>(SendTravelSchedule)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(desiredTravelOrder)</i></b> is true and any point in the interval where <b><i>(desiredTravelOrder)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>20</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>20</i></b>). If the interval ends sooner than trigger+<b><i>20</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.85",
            "regular_condition_unexp_pt": "desiredTravelOrder",
            "regular_condition_unexp_ft": "desiredTravelOrder",
            "regular_condition_unexp_pctl": "desiredTravelOrder",
            "regular_condition_SMV_pt": "desiredTravelOrder",
            "regular_condition_SMV_ft": "desiredTravelOrder",
            "regular_condition_PRISM_pctl": "desiredTravelOrder",
            "post_condition_unexp_pt": "SendTravelSchedule",
            "post_condition_unexp_ft": "SendTravelSchedule",
            "post_condition_unexp_pctl": "SendTravelSchedule",
            "post_condition_SMV_pt": "SendTravelSchedule",
            "post_condition_SMV_ft": "SendTravelSchedule",
            "post_condition_PRISM_pctl": "SendTravelSchedule",
            "ft": "((LAST V (((! desiredTravelOrder) & ((! LAST) & (X desiredTravelOrder))) -> (X ((F[<=20] SendTravelSchedule) | (F[<20] LAST))))) & (desiredTravelOrder -> ((F[<=20] SendTravelSchedule) | (F[<20] LAST))))",
            "pt": "(H ((O[=20] ((desiredTravelOrder & (Z (! desiredTravelOrder))) & (! SendTravelSchedule))) -> (O[<20] ((Z FALSE) | SendTravelSchedule))))",
            "pctl": "P>=1[((G (((! desiredTravelOrder) & (X desiredTravelOrder)) => (X (P>0.85[(F<=20 SendTravelSchedule)])))) & (desiredTravelOrder => (P>0.85[(F[<=20] SendTravelSchedule)])))]",
            "ptExpanded": "(H ((O[20,20] ((desiredTravelOrder & (Z (! desiredTravelOrder))) & (! SendTravelSchedule))) -> (O[0,19] ((Z FALSE) | SendTravelSchedule))))",
            "CoCoSpecCode": "H((OT(20, 20, ((desiredTravelOrder and ZtoPre(not (desiredTravelOrder))) and not (SendTravelSchedule))) => OT(19, 0, (ZtoPre(false) or SendTravelSchedule))))",
            "ftExpanded": "((LAST V (((! desiredTravelOrder) & ((! LAST) & (X desiredTravelOrder))) -> (X ((F[0,20] SendTravelSchedule) | (F[0,19] LAST))))) & (desiredTravelOrder -> ((F[0,20] SendTravelSchedule) | (F[0,19] LAST))))",
            "pctlExpanded": "P>=1[((G (((! desiredTravelOrder) & (X desiredTravelOrder)) => (X (P>0.85[(F<=20 SendTravelSchedule)])))) & (desiredTravelOrder => (P>0.85[(F[<=20] SendTravelSchedule)])))]",
            "ftInfAUExpanded": "((G (((! desiredTravelOrder) & (X desiredTravelOrder)) -> (X (F[0,20] SendTravelSchedule)))) & (desiredTravelOrder -> (F[0,20] SendTravelSchedule)))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae0515-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R103",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "𝑝ℎ𝑖 always holds with a probability ⋈p",
        "comments": "",
        "fulltext": "System shall with probability > 0.5 always satisfy phi",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "phi"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "timingTextRange": [
                36,
                41
            ],
            "post_condition": "(phi)",
            "responseTextRange": [
                43,
                53
            ],
            "diagramVariables": "Response = <b><i>(phi)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "phi",
            "post_condition_unexp_ft": "phi",
            "post_condition_unexp_pctl": "phi",
            "post_condition_SMV_pt": "phi",
            "post_condition_SMV_ft": "phi",
            "post_condition_PRISM_pctl": "phi",
            "ft": "(LAST V phi)",
            "pt": "(H phi)",
            "pctl": "(P>0.5[(G phi)])",
            "ptExpanded": "(H phi)",
            "CoCoSpecCode": "H(phi)",
            "ftExpanded": "(LAST V phi)",
            "pctlExpanded": "(P>0.5[(G phi)])",
            "ftInfAUExpanded": "(G phi)",
            "component": "System"
        },
        "status": "",
        "_id": "7fae0516-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R97",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "Blood bank encounters blood shortage and patient needs blood transfusion, can not happen concurrently with probability>0.0001",
        "comments": "",
        "fulltext": "BloodSystem shall with probability > 0.0001 never satisfy BloodShort & patBloodTrans",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "never",
            "response": "satisfaction",
            "variables": [
                "BloodShort",
                "patBloodTrans"
            ],
            "component_name": "BloodSystem",
            "componentTextRange": [
                0,
                10
            ],
            "probability_bound": [
                ">",
                "0.0001"
            ],
            "probabilityTextRange": [
                18,
                42
            ],
            "timingTextRange": [
                44,
                48
            ],
            "post_condition": "(BloodShort & patBloodTrans)",
            "responseTextRange": [
                50,
                83
            ],
            "diagramVariables": "Response = <b><i>(BloodShort & patBloodTrans)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must be false at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_never_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.0001",
            "post_condition_unexp_pt": "(BloodShort & patBloodTrans)",
            "post_condition_unexp_ft": "(BloodShort & patBloodTrans)",
            "post_condition_unexp_pctl": "(BloodShort & patBloodTrans)",
            "post_condition_SMV_pt": "(BloodShort & patBloodTrans)",
            "post_condition_SMV_ft": "(BloodShort & patBloodTrans)",
            "post_condition_PRISM_pctl": "(BloodShort & patBloodTrans)",
            "ft": "(LAST V (! (BloodShort & patBloodTrans)))",
            "pt": "(H (! (BloodShort & patBloodTrans)))",
            "pctl": "(P>0.0001[(G (! (BloodShort & patBloodTrans)))])",
            "ptExpanded": "(H (! (BloodShort & patBloodTrans)))",
            "CoCoSpecCode": "H(not ((BloodShort and patBloodTrans)))",
            "ftExpanded": "(LAST V (! (BloodShort & patBloodTrans)))",
            "pctlExpanded": "(P>0.0001[(G (! (BloodShort & patBloodTrans)))])",
            "ftInfAUExpanded": "(G (! (BloodShort & patBloodTrans)))",
            "component": "BloodSystem"
        },
        "status": "",
        "_id": "7fae0517-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R21",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "In 95% of mission executions, the robot achieves its mission",
        "comments": "",
        "fulltext": "System shall with probability >= 0.95 eventually satisfy achieveMission",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "achieveMission"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">=",
                "0.95"
            ],
            "probabilityTextRange": [
                13,
                36
            ],
            "timingTextRange": [
                38,
                47
            ],
            "post_condition": "(achieveMission)",
            "responseTextRange": [
                49,
                70
            ],
            "diagramVariables": "Response = <b><i>(achieveMission)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.95",
            "post_condition_unexp_pt": "achieveMission",
            "post_condition_unexp_ft": "achieveMission",
            "post_condition_unexp_pctl": "achieveMission",
            "post_condition_SMV_pt": "achieveMission",
            "post_condition_SMV_ft": "achieveMission",
            "post_condition_PRISM_pctl": "achieveMission",
            "ft": "((! LAST) U achieveMission)",
            "pt": "(O achieveMission)",
            "pctl": "(P>=0.95[(F achieveMission)])",
            "ptExpanded": "(O achieveMission)",
            "CoCoSpecCode": "O(achieveMission)",
            "ftExpanded": "((! LAST) U achieveMission)",
            "pctlExpanded": "(P>=0.95[(F achieveMission)])",
            "ftInfAUExpanded": "(F achieveMission)",
            "component": "System"
        },
        "status": "",
        "_id": "7fae0518-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R169",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "the probability of reaching a set of states G, while avoiding unsafe states U",
        "comments": "",
        "fulltext": "System shall with probability >0.9 until bigG satisfy !bigU",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "bigG",
                "bigU"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.9"
            ],
            "probabilityTextRange": [
                13,
                33
            ],
            "stop_condition": "(bigG)",
            "timingTextRange": [
                35,
                44
            ],
            "post_condition": "(! bigU)",
            "responseTextRange": [
                46,
                58
            ],
            "diagramVariables": "SC = <b><i>(bigG)</i></b>, Response = <b><i>(! bigU)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_until_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.9",
            "post_condition_unexp_pt": "(! bigU)",
            "post_condition_unexp_ft": "(! bigU)",
            "post_condition_unexp_pctl": "(! bigU)",
            "post_condition_SMV_pt": "(! bigU)",
            "post_condition_SMV_ft": "(! bigU)",
            "post_condition_PRISM_pctl": "(! bigU)",
            "stop_condition_unexp_pt": "bigG",
            "stop_condition_unexp_ft": "bigG",
            "stop_condition_PRISM_pctl": "bigG",
            "stop_condition_SMV_pt": "bigG",
            "stop_condition_SMV_ft": "bigG",
            "ft": "((bigG V ((! bigU) | bigG)) | (LAST V (! bigU)))",
            "pt": "(H ((H (! bigG)) -> (! bigU)))",
            "pctl": "(P>0.9[((undefined R ((! bigU) | undefined)) | (LAST R (! bigU)))])",
            "ptExpanded": "(H ((H (! bigG)) -> (! bigU)))",
            "CoCoSpecCode": "H((H(not (bigG)) => not (bigU)))",
            "ftExpanded": "((bigG V ((! bigU) | bigG)) | (LAST V (! bigU)))",
            "pctlExpanded": "(P>0.9[((bigG R ((! bigU) | bigG)) | (false R (! bigU)))])",
            "ftInfAUExpanded": "(bigG V ((! bigU) | bigG))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae0519-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R165a",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "P[0.3,0.4]((true)U(XmsgFail)(true))",
        "comments": "",
        "fulltext": "System shall with probability >= 0.3 eventually satisfy XmsgFail",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "XmsgFail"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">=",
                "0.3"
            ],
            "probabilityTextRange": [
                13,
                35
            ],
            "timingTextRange": [
                37,
                46
            ],
            "post_condition": "(XmsgFail)",
            "responseTextRange": [
                48,
                63
            ],
            "diagramVariables": "Response = <b><i>(XmsgFail)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.3",
            "post_condition_unexp_pt": "XmsgFail",
            "post_condition_unexp_ft": "XmsgFail",
            "post_condition_unexp_pctl": "XmsgFail",
            "post_condition_SMV_pt": "XmsgFail",
            "post_condition_SMV_ft": "XmsgFail",
            "post_condition_PRISM_pctl": "XmsgFail",
            "ft": "((! LAST) U XmsgFail)",
            "pt": "(O XmsgFail)",
            "pctl": "(P>=0.3[(F XmsgFail)])",
            "ptExpanded": "(O XmsgFail)",
            "CoCoSpecCode": "O(XmsgFail)",
            "ftExpanded": "((! LAST) U XmsgFail)",
            "pctlExpanded": "(P>=0.3[(F XmsgFail)])",
            "ftInfAUExpanded": "(F XmsgFail)",
            "component": "System"
        },
        "status": "",
        "_id": "7fae051a-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R54",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "“the probability that the response time of web service is less than 10 s is more than 50%",
        "comments": "",
        "fulltext": "System shall with probability >= 0.5 always satisfy response_time<10",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "response_time"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">=",
                "0.5"
            ],
            "probabilityTextRange": [
                13,
                35
            ],
            "timingTextRange": [
                37,
                42
            ],
            "post_condition": "(response_time < 10)",
            "responseTextRange": [
                44,
                67
            ],
            "diagramVariables": "Response = <b><i>(response_time < 10)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.5",
            "post_condition_unexp_pt": "(response_time < 10)",
            "post_condition_unexp_ft": "(response_time < 10)",
            "post_condition_unexp_pctl": "(response_time < 10)",
            "post_condition_SMV_pt": "(response_time < 10)",
            "post_condition_SMV_ft": "(response_time < 10)",
            "post_condition_PRISM_pctl": "(response_time < 10)",
            "ft": "(LAST V (response_time < 10))",
            "pt": "(H (response_time < 10))",
            "pctl": "(P>=0.5[(G (response_time < 10))])",
            "ptExpanded": "(H (response_time < 10))",
            "CoCoSpecCode": "H((response_time < 10))",
            "ftExpanded": "(LAST V (response_time < 10))",
            "pctlExpanded": "(P>=0.5[(G (response_time < 10))])",
            "ftInfAUExpanded": "(G (response_time < 10))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae051b-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R117",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "s the probability of reaching a decision state within 100 time-steps when starting from a specific non-decision state",
        "comments": "",
        "fulltext": "whenever startFromNonDecisionState the System shall with probability > 0.5 within 100 ticks satisfy reachDecisionState",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "startFromNonDecisionState",
                "reachDecisionState"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(startFromNonDecisionState)",
            "regular_condition": "(startFromNonDecisionState)",
            "conditionTextRange": [
                0,
                33
            ],
            "component_name": "System",
            "componentTextRange": [
                35,
                44
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                52,
                73
            ],
            "duration": "100",
            "timingTextRange": [
                75,
                90
            ],
            "post_condition": "(reachDecisionState)",
            "responseTextRange": [
                92,
                117
            ],
            "diagramVariables": "CC = <b><i>(startFromNonDecisionState)</i></b>,  n = <b><i>100</i></b>, Response = <b><i>(reachDecisionState)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(startFromNonDecisionState)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>100</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>100</i></b>). If the interval ends sooner than trigger+<b><i>100</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "regular_condition_unexp_pt": "startFromNonDecisionState",
            "regular_condition_unexp_ft": "startFromNonDecisionState",
            "regular_condition_unexp_pctl": "startFromNonDecisionState",
            "regular_condition_SMV_pt": "startFromNonDecisionState",
            "regular_condition_SMV_ft": "startFromNonDecisionState",
            "regular_condition_PRISM_pctl": "startFromNonDecisionState",
            "post_condition_unexp_pt": "reachDecisionState",
            "post_condition_unexp_ft": "reachDecisionState",
            "post_condition_unexp_pctl": "reachDecisionState",
            "post_condition_SMV_pt": "reachDecisionState",
            "post_condition_SMV_ft": "reachDecisionState",
            "post_condition_PRISM_pctl": "reachDecisionState",
            "ft": "(LAST V (startFromNonDecisionState -> ((F[<=100] reachDecisionState) | (F[<100] LAST))))",
            "pt": "(H ((O[=100] (startFromNonDecisionState & (! reachDecisionState))) -> (O[<100] ((Z FALSE) | reachDecisionState))))",
            "pctl": "P>=1[(G (startFromNonDecisionState => (P>0.5[(F<=100 reachDecisionState)])))]",
            "ptExpanded": "(H ((O[100,100] (startFromNonDecisionState & (! reachDecisionState))) -> (O[0,99] ((Z FALSE) | reachDecisionState))))",
            "CoCoSpecCode": "H((OT(100, 100, (startFromNonDecisionState and not (reachDecisionState))) => OT(99, 0, (ZtoPre(false) or reachDecisionState))))",
            "ftExpanded": "(LAST V (startFromNonDecisionState -> ((F[0,100] reachDecisionState) | (F[0,99] LAST))))",
            "pctlExpanded": "P>=1[(G (startFromNonDecisionState => (P>0.5[(F<=100 reachDecisionState)])))]",
            "ftInfAUExpanded": "(G (startFromNonDecisionState -> (F[0,100] reachDecisionState)))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae051c-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R23",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "the system under degradation always has to recover within 40 time units with a probability of 0.98",
        "comments": "",
        "fulltext": "whenever degradation System shall with probability >= 0.98 within 40 ticks satisfy recover",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "degradation",
                "recover"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(degradation)",
            "regular_condition": "(degradation)",
            "conditionTextRange": [
                0,
                19
            ],
            "component_name": "System",
            "componentTextRange": [
                21,
                26
            ],
            "probability_bound": [
                ">=",
                "0.98"
            ],
            "probabilityTextRange": [
                34,
                57
            ],
            "duration": "40",
            "timingTextRange": [
                59,
                73
            ],
            "post_condition": "(recover)",
            "responseTextRange": [
                75,
                89
            ],
            "diagramVariables": "CC = <b><i>(degradation)</i></b>,  n = <b><i>40</i></b>, Response = <b><i>(recover)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(degradation)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>40</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>40</i></b>). If the interval ends sooner than trigger+<b><i>40</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.98",
            "regular_condition_unexp_pt": "degradation",
            "regular_condition_unexp_ft": "degradation",
            "regular_condition_unexp_pctl": "degradation",
            "regular_condition_SMV_pt": "degradation",
            "regular_condition_SMV_ft": "degradation",
            "regular_condition_PRISM_pctl": "degradation",
            "post_condition_unexp_pt": "recover",
            "post_condition_unexp_ft": "recover",
            "post_condition_unexp_pctl": "recover",
            "post_condition_SMV_pt": "recover",
            "post_condition_SMV_ft": "recover",
            "post_condition_PRISM_pctl": "recover",
            "ft": "(LAST V (degradation -> ((F[<=40] recover) | (F[<40] LAST))))",
            "pt": "(H ((O[=40] (degradation & (! recover))) -> (O[<40] ((Z FALSE) | recover))))",
            "pctl": "P>=1[(G (degradation => (P>=0.98[(F<=40 recover)])))]",
            "ptExpanded": "(H ((O[40,40] (degradation & (! recover))) -> (O[0,39] ((Z FALSE) | recover))))",
            "CoCoSpecCode": "H((OT(40, 40, (degradation and not (recover))) => OT(39, 0, (ZtoPre(false) or recover))))",
            "ftExpanded": "(LAST V (degradation -> ((F[0,40] recover) | (F[0,39] LAST))))",
            "pctlExpanded": "P>=1[(G (degradation => (P>=0.98[(F<=40 recover)])))]",
            "ftInfAUExpanded": "(G (degradation -> (F[0,40] recover)))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae051d-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R122",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "Assuming the two vehicles head in the same direction, one behind another with a distance of 100m, the probability that a message can be exchanged successfully every second is 90%",
        "comments": "",
        "fulltext": "when in cruising_mode whenever conditionsForTwoVehiclesSatisfied Comms shall with probability > 0.90 always satisfy SuccesfulMessageExchange",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "holding",
            "probability": "bound",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "cruising_mode",
                "conditionsForTwoVehiclesSatisfied",
                "SuccesfulMessageExchange"
            ],
            "scope_mode": "cruising_mode",
            "scopeTextRange": [
                0,
                20
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(conditionsForTwoVehiclesSatisfied)",
            "regular_condition": "(conditionsForTwoVehiclesSatisfied)",
            "conditionTextRange": [
                22,
                63
            ],
            "component_name": "Comms",
            "componentTextRange": [
                65,
                69
            ],
            "probability_bound": [
                ">",
                "0.90"
            ],
            "probabilityTextRange": [
                77,
                99
            ],
            "timingTextRange": [
                101,
                106
            ],
            "post_condition": "(SuccesfulMessageExchange)",
            "responseTextRange": [
                108,
                139
            ],
            "diagramVariables": "M = <b><i>cruising_mode</i></b>, CC = <b><i>(conditionsForTwoVehiclesSatisfied)</i></b>, Response = <b><i>(SuccesfulMessageExchange)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>cruising_mode</i></b> holds.\nTRIGGER: every point in the interval where <b><i>(conditionsForTwoVehiclesSatisfied)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_holding_always_satisfaction.svg",
            "scope_mode_pt": "cruising_mode",
            "scope_mode_ft": "cruising_mode",
            "scope_mode_pctl": "cruising_mode",
            "bound": ">0.90",
            "regular_condition_unexp_pt": "conditionsForTwoVehiclesSatisfied",
            "regular_condition_unexp_ft": "conditionsForTwoVehiclesSatisfied",
            "regular_condition_unexp_pctl": "conditionsForTwoVehiclesSatisfied",
            "regular_condition_SMV_pt": "conditionsForTwoVehiclesSatisfied",
            "regular_condition_SMV_ft": "conditionsForTwoVehiclesSatisfied",
            "regular_condition_PRISM_pctl": "conditionsForTwoVehiclesSatisfied",
            "post_condition_unexp_pt": "SuccesfulMessageExchange",
            "post_condition_unexp_ft": "SuccesfulMessageExchange",
            "post_condition_unexp_pctl": "SuccesfulMessageExchange",
            "post_condition_SMV_pt": "SuccesfulMessageExchange",
            "post_condition_SMV_ft": "SuccesfulMessageExchange",
            "post_condition_PRISM_pctl": "SuccesfulMessageExchange",
            "ft": "((LAST V ((! (Fin_cruising_mode & (! LAST))) | (X ((Lin_cruising_mode | LAST) V (conditionsForTwoVehiclesSatisfied -> ((Lin_cruising_mode | LAST) V SuccesfulMessageExchange)))))) & (cruising_mode -> ((Lin_cruising_mode | LAST) V (conditionsForTwoVehiclesSatisfied -> ((Lin_cruising_mode | LAST) V SuccesfulMessageExchange)))))",
            "pt": "((H (Lin_cruising_mode -> (Y ((((! conditionsForTwoVehiclesSatisfied) S ((! conditionsForTwoVehiclesSatisfied) & Fin_cruising_mode)) | SuccesfulMessageExchange) S ((((! conditionsForTwoVehiclesSatisfied) S ((! conditionsForTwoVehiclesSatisfied) & Fin_cruising_mode)) | SuccesfulMessageExchange) & Fin_cruising_mode))))) & (((! Lin_cruising_mode) S ((! Lin_cruising_mode) & Fin_cruising_mode)) -> ((((! conditionsForTwoVehiclesSatisfied) S ((! conditionsForTwoVehiclesSatisfied) & Fin_cruising_mode)) | SuccesfulMessageExchange) S ((((! conditionsForTwoVehiclesSatisfied) S ((! conditionsForTwoVehiclesSatisfied) & Fin_cruising_mode)) | SuccesfulMessageExchange) & Fin_cruising_mode))))",
            "pctl": "P>=1[((G ((! (Fin_cruising_mode & (! LAST))) | (X (Lin_cruising_mode R (conditionsForTwoVehiclesSatisfied => (P>0.90[(Lin_cruising_mode R SuccesfulMessageExchange)])))))) & (cruising_mode => (Lin_cruising_mode | (Lin_cruising_mode R (conditionsForTwoVehiclesSatisfied => (P>0.90[(Lin_cruising_mode R SuccesfulMessageExchange)]))))))]",
            "ptExpanded": "((H (((! cruising_mode) & (Y cruising_mode)) -> (Y ((((! conditionsForTwoVehiclesSatisfied) S ((! conditionsForTwoVehiclesSatisfied) & (cruising_mode & (Z (! cruising_mode))))) | SuccesfulMessageExchange) S ((((! conditionsForTwoVehiclesSatisfied) S ((! conditionsForTwoVehiclesSatisfied) & (cruising_mode & (Z (! cruising_mode))))) | SuccesfulMessageExchange) & (cruising_mode & (Z (! cruising_mode)))))))) & (((! ((! cruising_mode) & (Y cruising_mode))) S ((! ((! cruising_mode) & (Y cruising_mode))) & (cruising_mode & (Z (! cruising_mode))))) -> ((((! conditionsForTwoVehiclesSatisfied) S ((! conditionsForTwoVehiclesSatisfied) & (cruising_mode & (Z (! cruising_mode))))) | SuccesfulMessageExchange) S ((((! conditionsForTwoVehiclesSatisfied) S ((! conditionsForTwoVehiclesSatisfied) & (cruising_mode & (Z (! cruising_mode))))) | SuccesfulMessageExchange) & (cruising_mode & (Z (! cruising_mode)))))))",
            "CoCoSpecCode": "(H(((not (cruising_mode) and YtoPre(cruising_mode)) => YtoPre(SI((cruising_mode and ZtoPre(not (cruising_mode))),(SI((cruising_mode and ZtoPre(not (cruising_mode))),not (conditionsForTwoVehiclesSatisfied)) or SuccesfulMessageExchange))))) and (SI((cruising_mode and ZtoPre(not (cruising_mode))),not ((not (cruising_mode) and YtoPre(cruising_mode)))) => SI((cruising_mode and ZtoPre(not (cruising_mode))),(SI((cruising_mode and ZtoPre(not (cruising_mode))),not (conditionsForTwoVehiclesSatisfied)) or SuccesfulMessageExchange))))",
            "ftExpanded": "((LAST V ((! ((((! cruising_mode) & (! LAST)) & (X cruising_mode)) & (! LAST))) | (X ((((cruising_mode & (! LAST)) & (X (! cruising_mode))) | LAST) V (conditionsForTwoVehiclesSatisfied -> ((((cruising_mode & (! LAST)) & (X (! cruising_mode))) | LAST) V SuccesfulMessageExchange)))))) & (cruising_mode -> ((((cruising_mode & (! LAST)) & (X (! cruising_mode))) | LAST) V (conditionsForTwoVehiclesSatisfied -> ((((cruising_mode & (! LAST)) & (X (! cruising_mode))) | LAST) V SuccesfulMessageExchange)))))",
            "pctlExpanded": "P>=1[((G ((! (((! cruising_mode) & (X cruising_mode)) & (! false))) | (X ((cruising_mode & (X (! cruising_mode))) R (conditionsForTwoVehiclesSatisfied => (P>0.90[((cruising_mode & (X (! cruising_mode))) R SuccesfulMessageExchange)])))))) & (cruising_mode => ((cruising_mode & (X (! cruising_mode))) | ((cruising_mode & (X (! cruising_mode))) R (conditionsForTwoVehiclesSatisfied => (P>0.90[((cruising_mode & (X (! cruising_mode))) R SuccesfulMessageExchange)]))))))]",
            "ftInfAUExpanded": "((G ((! ((! cruising_mode) & (X cruising_mode))) | (X ((cruising_mode & (X (! cruising_mode))) V (conditionsForTwoVehiclesSatisfied -> ((cruising_mode & (X (! cruising_mode))) V SuccesfulMessageExchange)))))) & (cruising_mode -> ((cruising_mode & (X (! cruising_mode))) V (conditionsForTwoVehiclesSatisfied -> ((cruising_mode & (X (! cruising_mode))) V SuccesfulMessageExchange)))))",
            "component": "Comms"
        },
        "status": "",
        "_id": "7fae051e-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R4",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "Assuming that alarms generated by pButtonMsg have low priority while alarms generated by analyzeData have high priority, it is required that the probability P3 that a high priority alarm fails (i.e., it is not notified to the FAS) is less than 0.005.\n\nP<=0.005[(alarm|analyzeData|result) U failedAlarm {analyzeData}]",
        "comments": "",
        "fulltext": "System shall with probability <= 0.005 until failedAlarm satisfy alarm|analyzeData|result",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "failedAlarm",
                "alarm",
                "analyzeData",
                "result"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<=",
                "0.005"
            ],
            "probabilityTextRange": [
                13,
                37
            ],
            "stop_condition": "(failedAlarm)",
            "timingTextRange": [
                39,
                55
            ],
            "post_condition": "(alarm | analyzeData | result)",
            "responseTextRange": [
                57,
                88
            ],
            "diagramVariables": "SC = <b><i>(failedAlarm)</i></b>, Response = <b><i>(alarm | analyzeData | result)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_until_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<=0.005",
            "post_condition_unexp_pt": "((alarm | analyzeData) | result)",
            "post_condition_unexp_ft": "((alarm | analyzeData) | result)",
            "post_condition_unexp_pctl": "((alarm | analyzeData) | result)",
            "post_condition_SMV_pt": "((alarm | analyzeData) | result)",
            "post_condition_SMV_ft": "((alarm | analyzeData) | result)",
            "post_condition_PRISM_pctl": "((alarm | analyzeData) | result)",
            "stop_condition_unexp_pt": "failedAlarm",
            "stop_condition_unexp_ft": "failedAlarm",
            "stop_condition_PRISM_pctl": "failedAlarm",
            "stop_condition_SMV_pt": "failedAlarm",
            "stop_condition_SMV_ft": "failedAlarm",
            "ft": "((failedAlarm V (((alarm | analyzeData) | result) | failedAlarm)) | (LAST V ((alarm | analyzeData) | result)))",
            "pt": "(H ((H (! failedAlarm)) -> ((alarm | analyzeData) | result)))",
            "pctl": "(P<=0.005[((undefined R (((alarm | analyzeData) | result) | undefined)) | (LAST R ((alarm | analyzeData) | result)))])",
            "ptExpanded": "(H ((H (! failedAlarm)) -> ((alarm | analyzeData) | result)))",
            "CoCoSpecCode": "H((H(not (failedAlarm)) => ((alarm or analyzeData) or result)))",
            "ftExpanded": "((failedAlarm V (((alarm | analyzeData) | result) | failedAlarm)) | (LAST V ((alarm | analyzeData) | result)))",
            "pctlExpanded": "(P<=0.005[((failedAlarm R (((alarm | analyzeData) | result) | failedAlarm)) | (false R ((alarm | analyzeData) | result)))])",
            "ftInfAUExpanded": "(failedAlarm V (((alarm | analyzeData) | result) | failedAlarm))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae051f-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R110",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "The robot repeats its behaviour forever (e.g. searches for food) (s=0 holds infinitely often with a probability >=1)",
        "comments": "",
        "fulltext": "whenever true robot shall with probability >=1 eventually satisfy s=0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "s"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(true)",
            "regular_condition": "(true)",
            "conditionTextRange": [
                0,
                12
            ],
            "component_name": "robot",
            "componentTextRange": [
                14,
                18
            ],
            "probability_bound": [
                ">=",
                "1"
            ],
            "probabilityTextRange": [
                26,
                45
            ],
            "timingTextRange": [
                47,
                56
            ],
            "post_condition": "(s = 0)",
            "responseTextRange": [
                58,
                68
            ],
            "diagramVariables": "CC = <b><i>(true)</i></b>, Response = <b><i>(s = 0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(true)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=1",
            "regular_condition_unexp_pt": "TRUE",
            "regular_condition_unexp_ft": "TRUE",
            "regular_condition_unexp_pctl": "TRUE",
            "regular_condition_SMV_pt": "TRUE",
            "regular_condition_SMV_ft": "TRUE",
            "regular_condition_PRISM_pctl": "TRUE",
            "post_condition_unexp_pt": "(s = 0)",
            "post_condition_unexp_ft": "(s = 0)",
            "post_condition_unexp_pctl": "(s = 0)",
            "post_condition_SMV_pt": "(s = 0)",
            "post_condition_SMV_ft": "(s = 0)",
            "post_condition_PRISM_pctl": "(s = 0)",
            "ft": "(LAST V (TRUE -> ((! LAST) U (s = 0))))",
            "pt": "((H (! TRUE)) | (! ((! (s = 0)) S ((! (s = 0)) & TRUE))))",
            "pctl": "P>=1[(G (TRUE => (P>=1[(F (s = 0))])))]",
            "ptExpanded": "(s = 0)",
            "CoCoSpecCode": "(s = 0)",
            "ftExpanded": "(LAST V ((! LAST) U (s = 0)))",
            "pctlExpanded": "P>=1[(G (TRUE => (P>=1[(F (s = 0))])))]",
            "ftInfAUExpanded": "(G (F (s = 0)))",
            "component": "robot"
        },
        "status": "",
        "_id": "7fae0520-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R34",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "The airbag is not ignited even though a critical crash occurred.\n\nP≤0.001 (true U >20critical crash ∧ ¬fasic fired))",
        "comments": "",
        "fulltext": "System shall with probability <= 0.001 within 20 ticks satisfy criticalCrash& !fasicFired",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "criticalCrash",
                "fasicFired"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<=",
                "0.001"
            ],
            "probabilityTextRange": [
                13,
                37
            ],
            "duration": "20",
            "timingTextRange": [
                39,
                53
            ],
            "post_condition": "(criticalCrash & ! fasicFired)",
            "responseTextRange": [
                55,
                88
            ],
            "diagramVariables": " n = <b><i>20</i></b>, Response = <b><i>(criticalCrash & ! fasicFired)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>20</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>20</i></b>). If the interval ends sooner than trigger+<b><i>20</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<=0.001",
            "post_condition_unexp_pt": "(criticalCrash & (! fasicFired))",
            "post_condition_unexp_ft": "(criticalCrash & (! fasicFired))",
            "post_condition_unexp_pctl": "(criticalCrash & (! fasicFired))",
            "post_condition_SMV_pt": "(criticalCrash & (! fasicFired))",
            "post_condition_SMV_ft": "(criticalCrash & (! fasicFired))",
            "post_condition_PRISM_pctl": "(criticalCrash & (! fasicFired))",
            "ft": "((F[<=20] (criticalCrash & (! fasicFired))) | (F[<20] LAST))",
            "pt": "(H ((H (! (criticalCrash & (! fasicFired)))) -> (O[<20] (Z FALSE))))",
            "pctl": "(P<=0.001[(F<=20 (criticalCrash & (! fasicFired)))])",
            "ptExpanded": "(H ((H (! (criticalCrash & (! fasicFired)))) -> (O[0,19] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not ((criticalCrash and not (fasicFired)))) => OT(19, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,20] (criticalCrash & (! fasicFired))) | (F[0,19] LAST))",
            "pctlExpanded": "(P<=0.001[(F<=20 (criticalCrash & (! fasicFired)))])",
            "ftInfAUExpanded": "(F[0,20] (criticalCrash & (! fasicFired)))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae0521-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R90",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "Probability of a QUMStateConfiguration\n\n\"ϕ = (in state id1|in state id2|...|in state idn)\nP=?[(true)U <=T (ϕ)]\"",
        "comments": "",
        "fulltext": "QUMComponent shall with probability > 0.5 within 10 ticks satisfy phi",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "phi"
            ],
            "component_name": "QUMComponent",
            "componentTextRange": [
                0,
                11
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                19,
                40
            ],
            "duration": "10",
            "timingTextRange": [
                42,
                56
            ],
            "post_condition": "(phi)",
            "responseTextRange": [
                58,
                68
            ],
            "diagramVariables": " n = <b><i>10</i></b>, Response = <b><i>(phi)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "post_condition_unexp_pt": "phi",
            "post_condition_unexp_ft": "phi",
            "post_condition_unexp_pctl": "phi",
            "post_condition_SMV_pt": "phi",
            "post_condition_SMV_ft": "phi",
            "post_condition_PRISM_pctl": "phi",
            "ft": "((F[<=10] phi) | (F[<10] LAST))",
            "pt": "(H ((H (! phi)) -> (O[<10] (Z FALSE))))",
            "pctl": "(P>0.5[(F<=10 phi)])",
            "ptExpanded": "(H ((H (! phi)) -> (O[0,9] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not (phi)) => OT(9, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,10] phi) | (F[0,9] LAST))",
            "pctlExpanded": "(P>0.5[(F<=10 phi)])",
            "ftInfAUExpanded": "(F[0,10] phi)",
            "component": "QUMComponent"
        },
        "status": "",
        "_id": "7fae0522-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R166",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "The driver is alerted via an audible signal if the speed of the car was greater than 65km/h, the distance between the car and the road lane markings decreased rapidly, and, in the meanwhile, the speed of the car was not decreased under 60 km/h with a certainty of 99.9%.",
        "comments": "",
        "fulltext": "if speed > 65 & distance_decreased_rapidly Car shall with probability >0.999 always satisfy alert_audibly & speed > 60",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "speed",
                "distance_decreased_rapidly",
                "alert_audibly"
            ],
            "qualifier_word": "if",
            "pre_condition": "(speed > 65 & distance_decreased_rapidly)",
            "regular_condition": "(speed > 65 & distance_decreased_rapidly)",
            "conditionTextRange": [
                0,
                41
            ],
            "component_name": "Car",
            "componentTextRange": [
                43,
                45
            ],
            "probability_bound": [
                ">",
                "0.999"
            ],
            "probabilityTextRange": [
                53,
                75
            ],
            "timingTextRange": [
                77,
                82
            ],
            "post_condition": "(alert_audibly & speed > 60)",
            "responseTextRange": [
                84,
                117
            ],
            "diagramVariables": "TC = <b><i>(speed > 65 & distance_decreased_rapidly)</i></b>, Response = <b><i>(alert_audibly & speed > 60)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(speed > 65 & distance_decreased_rapidly)</i></b> is true and any point in the interval where <b><i>(speed > 65 & distance_decreased_rapidly)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_always_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.999",
            "regular_condition_unexp_pt": "((speed > 65) & distance_decreased_rapidly)",
            "regular_condition_unexp_ft": "((speed > 65) & distance_decreased_rapidly)",
            "regular_condition_unexp_pctl": "((speed > 65) & distance_decreased_rapidly)",
            "regular_condition_SMV_pt": "((speed > 65) & distance_decreased_rapidly)",
            "regular_condition_SMV_ft": "((speed > 65) & distance_decreased_rapidly)",
            "regular_condition_PRISM_pctl": "((speed > 65) & distance_decreased_rapidly)",
            "post_condition_unexp_pt": "(alert_audibly & (speed > 60))",
            "post_condition_unexp_ft": "(alert_audibly & (speed > 60))",
            "post_condition_unexp_pctl": "(alert_audibly & (speed > 60))",
            "post_condition_SMV_pt": "(alert_audibly & (speed > 60))",
            "post_condition_SMV_ft": "(alert_audibly & (speed > 60))",
            "post_condition_PRISM_pctl": "(alert_audibly & (speed > 60))",
            "ft": "((LAST V (((! ((speed > 65) & distance_decreased_rapidly)) & ((! LAST) & (X ((speed > 65) & distance_decreased_rapidly)))) -> (X (LAST V (alert_audibly & (speed > 60)))))) & (((speed > 65) & distance_decreased_rapidly) -> (LAST V (alert_audibly & (speed > 60)))))",
            "pt": "(H ((H (! ((speed > 65) & distance_decreased_rapidly))) | (alert_audibly & (speed > 60))))",
            "pctl": "P>=1[((G (((! ((speed > 65) & distance_decreased_rapidly)) & (X ((speed > 65) & distance_decreased_rapidly))) => (X (P>0.999[(G (alert_audibly & (speed > 60)))])))) & (((speed > 65) & distance_decreased_rapidly) => (P>0.999[(G (alert_audibly & (speed > 60)))])))]",
            "ptExpanded": "(H ((H (! ((speed > 65) & distance_decreased_rapidly))) | (alert_audibly & (speed > 60))))",
            "CoCoSpecCode": "H((H(not (((speed > 65) and distance_decreased_rapidly))) or (alert_audibly and (speed > 60))))",
            "ftExpanded": "((LAST V (((! ((speed > 65) & distance_decreased_rapidly)) & ((! LAST) & (X ((speed > 65) & distance_decreased_rapidly)))) -> (X (LAST V (alert_audibly & (speed > 60)))))) & (((speed > 65) & distance_decreased_rapidly) -> (LAST V (alert_audibly & (speed > 60)))))",
            "pctlExpanded": "P>=1[((G (((! ((speed > 65) & distance_decreased_rapidly)) & (X ((speed > 65) & distance_decreased_rapidly))) => (X (P>0.999[(G (alert_audibly & (speed > 60)))])))) & (((speed > 65) & distance_decreased_rapidly) => (P>0.999[(G (alert_audibly & (speed > 60)))])))]",
            "ftInfAUExpanded": "((G (((! ((speed > 65) & distance_decreased_rapidly)) & (X ((speed > 65) & distance_decreased_rapidly))) -> (X (G (alert_audibly & (speed > 60)))))) & (((speed > 65) & distance_decreased_rapidly) -> (G (alert_audibly & (speed > 60)))))",
            "component": "Car"
        },
        "status": "",
        "_id": "7fae0523-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R10",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "Once the pump engine of an insulin pump control system starts working, it remains so for at least a period that is time defined by the delivery time of the control system according to the patient’s glucose value, with probability greater or equal to 99.999% (the engine working time defines the quantity of insulin to be injected",
        "comments": "",
        "fulltext": "if pumpStart System shall with probability >= 0.99999 for 10 ticks satisfy pumping",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "for",
            "response": "satisfaction",
            "variables": [
                "pumpStart",
                "pumping"
            ],
            "qualifier_word": "if",
            "pre_condition": "(pumpStart)",
            "regular_condition": "(pumpStart)",
            "conditionTextRange": [
                0,
                11
            ],
            "component_name": "System",
            "componentTextRange": [
                13,
                18
            ],
            "probability_bound": [
                ">=",
                "0.99999"
            ],
            "probabilityTextRange": [
                26,
                52
            ],
            "duration": "10",
            "timingTextRange": [
                54,
                65
            ],
            "post_condition": "(pumping)",
            "responseTextRange": [
                67,
                81
            ],
            "diagramVariables": "TC = <b><i>(pumpStart)</i></b>,  n = <b><i>10</i></b>, Response = <b><i>(pumping)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(pumpStart)</i></b> is true and any point in the interval where <b><i>(pumpStart)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the trigger and remain true for <b><i>10</i></b> time points past the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>10</i></b>), or to the end of the interval if the interval ends sooner than trigger+<b><i>10</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_for_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.99999",
            "regular_condition_unexp_pt": "pumpStart",
            "regular_condition_unexp_ft": "pumpStart",
            "regular_condition_unexp_pctl": "pumpStart",
            "regular_condition_SMV_pt": "pumpStart",
            "regular_condition_SMV_ft": "pumpStart",
            "regular_condition_PRISM_pctl": "pumpStart",
            "post_condition_unexp_pt": "pumping",
            "post_condition_unexp_ft": "pumping",
            "post_condition_unexp_pctl": "pumping",
            "post_condition_SMV_pt": "pumping",
            "post_condition_SMV_ft": "pumping",
            "post_condition_PRISM_pctl": "pumping",
            "ft": "((LAST V (((! pumpStart) & ((! LAST) & (X pumpStart))) -> (X ((G[<=10] pumping) | (LAST V pumping))))) & (pumpStart -> ((G[<=10] pumping) | (LAST V pumping))))",
            "pt": "(H ((O[<=10] (pumpStart & (Z (! pumpStart)))) -> ((H (! pumpStart)) | pumping)))",
            "pctl": "P>=1[((G (((! pumpStart) & (X pumpStart)) => (X (P>=0.99999[(G<=10 pumping)])))) & (pumpStart => (P>=0.99999[(G[<=10] pumping)])))]",
            "ptExpanded": "(H ((O[0,10] (pumpStart & (Z (! pumpStart)))) -> ((H (! pumpStart)) | pumping)))",
            "CoCoSpecCode": "H((OT(10, 0, (pumpStart and ZtoPre(not (pumpStart)))) => (H(not (pumpStart)) or pumping)))",
            "ftExpanded": "((LAST V (((! pumpStart) & ((! LAST) & (X pumpStart))) -> (X ((G[0,10] pumping) | (LAST V pumping))))) & (pumpStart -> ((G[0,10] pumping) | (LAST V pumping))))",
            "pctlExpanded": "P>=1[((G (((! pumpStart) & (X pumpStart)) => (X (P>=0.99999[(G<=10 pumping)])))) & (pumpStart => (P>=0.99999[(G[<=10] pumping)])))]",
            "ftInfAUExpanded": "((G (((! pumpStart) & (X pumpStart)) -> (X ((G[0,10] pumping) | (G pumping))))) & (pumpStart -> ((G[0,10] pumping) | (G pumping))))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae0524-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R152b",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "If the pessimistic button is chosen, M will award G 2 credits or take 1 credit from G with probability 2/3 and 1/3, respectively",
        "comments": "",
        "fulltext": "if pessimisticButton M shall with probability >= 0.25 eventually satisfy bigG = bigG - 1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "pessimisticButton",
                "bigG"
            ],
            "qualifier_word": "if",
            "pre_condition": "(pessimisticButton)",
            "regular_condition": "(pessimisticButton)",
            "conditionTextRange": [
                0,
                19
            ],
            "component_name": "M",
            "componentTextRange": [
                21,
                21
            ],
            "probability_bound": [
                ">=",
                "0.25"
            ],
            "probabilityTextRange": [
                29,
                52
            ],
            "timingTextRange": [
                54,
                63
            ],
            "post_condition": "(bigG = bigG - 1)",
            "responseTextRange": [
                65,
                87
            ],
            "diagramVariables": "TC = <b><i>(pessimisticButton)</i></b>, Response = <b><i>(bigG = bigG - 1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(pessimisticButton)</i></b> is true and any point in the interval where <b><i>(pessimisticButton)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.25",
            "regular_condition_unexp_pt": "pessimisticButton",
            "regular_condition_unexp_ft": "pessimisticButton",
            "regular_condition_unexp_pctl": "pessimisticButton",
            "regular_condition_SMV_pt": "pessimisticButton",
            "regular_condition_SMV_ft": "pessimisticButton",
            "regular_condition_PRISM_pctl": "pessimisticButton",
            "post_condition_unexp_pt": "(bigG = (bigG - 1))",
            "post_condition_unexp_ft": "(bigG = (bigG - 1))",
            "post_condition_unexp_pctl": "(bigG = (bigG - 1))",
            "post_condition_SMV_pt": "(bigG = (bigG - 1))",
            "post_condition_SMV_ft": "(bigG = (bigG - 1))",
            "post_condition_PRISM_pctl": "(bigG = (bigG - 1))",
            "ft": "((LAST V (((! pessimisticButton) & ((! LAST) & (X pessimisticButton))) -> (X ((! LAST) U (bigG = (bigG - 1)))))) & (pessimisticButton -> ((! LAST) U (bigG = (bigG - 1)))))",
            "pt": "((H (! pessimisticButton)) | (! ((! (bigG = (bigG - 1))) S ((! (bigG = (bigG - 1))) & (pessimisticButton & (Z (! pessimisticButton)))))))",
            "pctl": "P>=1[((G (((! pessimisticButton) & (X pessimisticButton)) => (X (P>=0.25[(F (bigG = (bigG - 1)))])))) & (pessimisticButton => (P>=0.25[(F (bigG = (bigG - 1)))])))]",
            "ptExpanded": "((H (! pessimisticButton)) | (! ((! (bigG = (bigG - 1))) S ((! (bigG = (bigG - 1))) & (pessimisticButton & (Z (! pessimisticButton)))))))",
            "CoCoSpecCode": "(H(not (pessimisticButton)) or not (SI((pessimisticButton and ZtoPre(not (pessimisticButton))),not ((bigG = (bigG - 1))))))",
            "ftExpanded": "((LAST V (((! pessimisticButton) & ((! LAST) & (X pessimisticButton))) -> (X ((! LAST) U (bigG = (bigG - 1)))))) & (pessimisticButton -> ((! LAST) U (bigG = (bigG - 1)))))",
            "pctlExpanded": "P>=1[((G (((! pessimisticButton) & (X pessimisticButton)) => (X (P>=0.25[(F (bigG = (bigG - 1)))])))) & (pessimisticButton => (P>=0.25[(F (bigG = (bigG - 1)))])))]",
            "ftInfAUExpanded": "((G (((! pessimisticButton) & (X pessimisticButton)) -> (X (F (bigG = (bigG - 1)))))) & (pessimisticButton -> (F (bigG = (bigG - 1)))))",
            "component": "M"
        },
        "status": "",
        "_id": "7fae0525-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R86",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": " If the User invokes the travel service ( i.e. he/she sends the travel requirements to the TM service), the probability that the TM service responds to the User with the result of the three service invocations—findDuration, calculateTime, and checkSchedule—within 3.2 s is 89%",
        "comments": "",
        "fulltext": "Upon travelServiceInvoked TM_service shall with probability > 0.89 within 3.2 seconds satisfy returnResult ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "travelServiceInvoked",
                "returnResult"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(travelServiceInvoked)",
            "regular_condition": "(travelServiceInvoked)",
            "conditionTextRange": [
                0,
                24
            ],
            "component_name": "TM_service",
            "componentTextRange": [
                26,
                35
            ],
            "probability_bound": [
                ">",
                "0.89"
            ],
            "probabilityTextRange": [
                43,
                65
            ],
            "duration": "3.2",
            "timingTextRange": [
                67,
                84
            ],
            "post_condition": "(returnResult)",
            "responseTextRange": [
                86,
                105
            ],
            "diagramVariables": "TC = <b><i>(travelServiceInvoked)</i></b>,  n = <b><i>3.2</i></b>, Response = <b><i>(returnResult)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(travelServiceInvoked)</i></b> is true and any point in the interval where <b><i>(travelServiceInvoked)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>3.2</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>3.2</i></b>). If the interval ends sooner than trigger+<b><i>3.2</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.89",
            "regular_condition_unexp_pt": "travelServiceInvoked",
            "regular_condition_unexp_ft": "travelServiceInvoked",
            "regular_condition_unexp_pctl": "travelServiceInvoked",
            "regular_condition_SMV_pt": "travelServiceInvoked",
            "regular_condition_SMV_ft": "travelServiceInvoked",
            "regular_condition_PRISM_pctl": "travelServiceInvoked",
            "post_condition_unexp_pt": "returnResult",
            "post_condition_unexp_ft": "returnResult",
            "post_condition_unexp_pctl": "returnResult",
            "post_condition_SMV_pt": "returnResult",
            "post_condition_SMV_ft": "returnResult",
            "post_condition_PRISM_pctl": "returnResult",
            "ft": "((LAST V (((! travelServiceInvoked) & ((! LAST) & (X travelServiceInvoked))) -> (X ((F[<=3.2] returnResult) | (F[<3.2] LAST))))) & (travelServiceInvoked -> ((F[<=3.2] returnResult) | (F[<3.2] LAST))))",
            "pt": "(H ((O[=3.2] ((travelServiceInvoked & (Z (! travelServiceInvoked))) & (! returnResult))) -> (O[<3.2] ((Z FALSE) | returnResult))))",
            "pctl": "P>=1[((G (((! travelServiceInvoked) & (X travelServiceInvoked)) => (X (P>0.89[(F<=3.2 returnResult)])))) & (travelServiceInvoked => (P>0.89[(F[<=3.2] returnResult)])))]",
            "ptExpanded": "(H ((O[=3.2] ((travelServiceInvoked & (Z (! travelServiceInvoked))) & (! returnResult))) -> (O[<3.2] ((Z FALSE) | returnResult))))",
            "CoCoSpecCode": "H((OT(3.2, Equal, ((travelServiceInvoked and ZtoPre(not (travelServiceInvoked))) and not (returnResult))) => OT(3.2, LessThan, (ZtoPre(false) or returnResult))))",
            "ftExpanded": "((LAST V (((! travelServiceInvoked) & ((! LAST) & (X travelServiceInvoked))) -> (X ((F[<=3.2] returnResult) | (F[<3.2] LAST))))) & (travelServiceInvoked -> ((F[<=3.2] returnResult) | (F[<3.2] LAST))))",
            "pctlExpanded": "P>=1[((G (((! travelServiceInvoked) & (X travelServiceInvoked)) => (X (P>0.89[(F<=3.2 returnResult)])))) & (travelServiceInvoked => (P>0.89[(F[<=3.2] returnResult)])))]",
            "ftInfAUExpanded": "((G (((! travelServiceInvoked) & (X travelServiceInvoked)) -> (X (F[<=3.2] returnResult)))) & (travelServiceInvoked -> (F[<=3.2] returnResult)))",
            "component": "TM_service"
        },
        "status": "",
        "_id": "7fae0526-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R76",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "The number of molecules of x exceeds 100 within 50 seconds in 90% of the cases.",
        "comments": "",
        "fulltext": "System shall with probability >0.9 within 50 seconds satisfy x> 100",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "x"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.9"
            ],
            "probabilityTextRange": [
                13,
                33
            ],
            "duration": "50",
            "timingTextRange": [
                35,
                51
            ],
            "post_condition": "(x > 100)",
            "responseTextRange": [
                53,
                66
            ],
            "diagramVariables": " n = <b><i>50</i></b>, Response = <b><i>(x > 100)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>50</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>50</i></b>). If the interval ends sooner than trigger+<b><i>50</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.9",
            "post_condition_unexp_pt": "(x > 100)",
            "post_condition_unexp_ft": "(x > 100)",
            "post_condition_unexp_pctl": "(x > 100)",
            "post_condition_SMV_pt": "(x > 100)",
            "post_condition_SMV_ft": "(x > 100)",
            "post_condition_PRISM_pctl": "(x > 100)",
            "ft": "((F[<=50] (x > 100)) | (F[<50] LAST))",
            "pt": "(H ((H (! (x > 100))) -> (O[<50] (Z FALSE))))",
            "pctl": "(P>0.9[(F<=50 (x > 100))])",
            "ptExpanded": "(H ((H (! (x > 100))) -> (O[0,49] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not ((x > 100))) => OT(49, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,50] (x > 100)) | (F[0,49] LAST))",
            "pctlExpanded": "(P>0.9[(F<=50 (x > 100))])",
            "ftInfAUExpanded": "(F[0,50] (x > 100))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae0527-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R156",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "With probability greater than 0.95, the alarm should be on until the problem is solved\n[alarmOnU(alarmOff ∧ solved)]>0.95",
        "comments": "",
        "fulltext": "System shall with probability > 0.95 until alarmOff & solved satisfy alarmOn",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "alarmOff",
                "solved",
                "alarmOn"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.95"
            ],
            "probabilityTextRange": [
                13,
                35
            ],
            "stop_condition": "(alarmOff & solved)",
            "timingTextRange": [
                37,
                59
            ],
            "post_condition": "(alarmOn)",
            "responseTextRange": [
                61,
                75
            ],
            "diagramVariables": "SC = <b><i>(alarmOff & solved)</i></b>, Response = <b><i>(alarmOn)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_until_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.95",
            "post_condition_unexp_pt": "alarmOn",
            "post_condition_unexp_ft": "alarmOn",
            "post_condition_unexp_pctl": "alarmOn",
            "post_condition_SMV_pt": "alarmOn",
            "post_condition_SMV_ft": "alarmOn",
            "post_condition_PRISM_pctl": "alarmOn",
            "stop_condition_unexp_pt": "(alarmOff & solved)",
            "stop_condition_unexp_ft": "(alarmOff & solved)",
            "stop_condition_PRISM_pctl": "(alarmOff & solved)",
            "stop_condition_SMV_pt": "(alarmOff & solved)",
            "stop_condition_SMV_ft": "(alarmOff & solved)",
            "ft": "(((alarmOff & solved) V (alarmOn | (alarmOff & solved))) | (LAST V alarmOn))",
            "pt": "(H ((H (! (alarmOff & solved))) -> alarmOn))",
            "pctl": "(P>0.95[((undefined R (alarmOn | undefined)) | (LAST R alarmOn))])",
            "ptExpanded": "(H ((H (! (alarmOff & solved))) -> alarmOn))",
            "CoCoSpecCode": "H((H(not ((alarmOff and solved))) => alarmOn))",
            "ftExpanded": "(((alarmOff & solved) V (alarmOn | (alarmOff & solved))) | (LAST V alarmOn))",
            "pctlExpanded": "(P>0.95[(((alarmOff & solved) R (alarmOn | (alarmOff & solved))) | (false R alarmOn))])",
            "ftInfAUExpanded": "((alarmOff & solved) V (alarmOn | (alarmOff & solved)))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae0528-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R170",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": " The probability of observing a time-out before being served for the first time within time T . This is a reachability problem with goal set G = {rc} and unsafe set U = {rq, w}.",
        "comments": "",
        "fulltext": "System shall with probability > 0.9 before served satisfy time_out",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "before",
            "response": "satisfaction",
            "variables": [
                "served",
                "time_out"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.9"
            ],
            "probabilityTextRange": [
                13,
                34
            ],
            "stop_condition": "(served)",
            "timingTextRange": [
                36,
                48
            ],
            "post_condition": "(time_out)",
            "responseTextRange": [
                50,
                65
            ],
            "diagramVariables": "SC = <b><i>(served)</i></b>, Response = <b><i>(time_out)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at least once strictly before the state where the stop condition holds. If the stop condition never occurs in the interval, RES does not need to hold. If the stop condition holds at the trigger, the requirement is not satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_before_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.9",
            "post_condition_unexp_pt": "time_out",
            "post_condition_unexp_ft": "time_out",
            "post_condition_unexp_pctl": "time_out",
            "post_condition_SMV_pt": "time_out",
            "post_condition_SMV_ft": "time_out",
            "post_condition_PRISM_pctl": "time_out",
            "stop_condition_unexp_pt": "served",
            "stop_condition_unexp_ft": "served",
            "stop_condition_PRISM_pctl": "served",
            "stop_condition_SMV_pt": "served",
            "stop_condition_SMV_ft": "served",
            "ft": "((time_out | LAST) V (! served))",
            "pt": "(H (served -> (Y (O time_out))))",
            "pctl": "(P>0.9[((time_out | LAST) R (! undefined))])",
            "ptExpanded": "(H (served -> (Y (O time_out))))",
            "CoCoSpecCode": "H((served => YtoPre(O(time_out))))",
            "ftExpanded": "((time_out | LAST) V (! served))",
            "pctlExpanded": "(P>0.9[((time_out | false) R (! served))])",
            "ftInfAUExpanded": "(time_out V (! served))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae0529-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R69",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "What is the probability that FGFR relocates and FGF is bound when relocation occurs",
        "comments": "",
        "fulltext": "upon relocation System shall with probability >0.5 eventually satisfy fgfr_relocate & fgf_bound ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "relocation",
                "fgfr_relocate",
                "fgf_bound"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(relocation)",
            "regular_condition": "(relocation)",
            "conditionTextRange": [
                0,
                14
            ],
            "component_name": "System",
            "componentTextRange": [
                16,
                21
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                29,
                49
            ],
            "timingTextRange": [
                51,
                60
            ],
            "post_condition": "(fgfr_relocate & fgf_bound)",
            "responseTextRange": [
                62,
                94
            ],
            "diagramVariables": "TC = <b><i>(relocation)</i></b>, Response = <b><i>(fgfr_relocate & fgf_bound)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(relocation)</i></b> is true and any point in the interval where <b><i>(relocation)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "regular_condition_unexp_pt": "relocation",
            "regular_condition_unexp_ft": "relocation",
            "regular_condition_unexp_pctl": "relocation",
            "regular_condition_SMV_pt": "relocation",
            "regular_condition_SMV_ft": "relocation",
            "regular_condition_PRISM_pctl": "relocation",
            "post_condition_unexp_pt": "(fgfr_relocate & fgf_bound)",
            "post_condition_unexp_ft": "(fgfr_relocate & fgf_bound)",
            "post_condition_unexp_pctl": "(fgfr_relocate & fgf_bound)",
            "post_condition_SMV_pt": "(fgfr_relocate & fgf_bound)",
            "post_condition_SMV_ft": "(fgfr_relocate & fgf_bound)",
            "post_condition_PRISM_pctl": "(fgfr_relocate & fgf_bound)",
            "ft": "((LAST V (((! relocation) & ((! LAST) & (X relocation))) -> (X ((! LAST) U (fgfr_relocate & fgf_bound))))) & (relocation -> ((! LAST) U (fgfr_relocate & fgf_bound))))",
            "pt": "((H (! relocation)) | (! ((! (fgfr_relocate & fgf_bound)) S ((! (fgfr_relocate & fgf_bound)) & (relocation & (Z (! relocation)))))))",
            "pctl": "P>=1[((G (((! relocation) & (X relocation)) => (X (P>0.5[(F (fgfr_relocate & fgf_bound))])))) & (relocation => (P>0.5[(F (fgfr_relocate & fgf_bound))])))]",
            "ptExpanded": "((H (! relocation)) | (! ((! (fgfr_relocate & fgf_bound)) S ((! (fgfr_relocate & fgf_bound)) & (relocation & (Z (! relocation)))))))",
            "CoCoSpecCode": "(H(not (relocation)) or not (SI((relocation and ZtoPre(not (relocation))),not ((fgfr_relocate and fgf_bound)))))",
            "ftExpanded": "((LAST V (((! relocation) & ((! LAST) & (X relocation))) -> (X ((! LAST) U (fgfr_relocate & fgf_bound))))) & (relocation -> ((! LAST) U (fgfr_relocate & fgf_bound))))",
            "pctlExpanded": "P>=1[((G (((! relocation) & (X relocation)) => (X (P>0.5[(F (fgfr_relocate & fgf_bound))])))) & (relocation => (P>0.5[(F (fgfr_relocate & fgf_bound))])))]",
            "ftInfAUExpanded": "((G (((! relocation) & (X relocation)) -> (X (F (fgfr_relocate & fgf_bound))))) & (relocation -> (F (fgfr_relocate & fgf_bound))))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae052a-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R151b",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "By pressing the optimistic button, with probability 1/2, M will award G 10 credits, while with probability 1/2, M will take 8 credits from G.",
        "comments": "",
        "fulltext": "if !optimisticButton System shall with probability >0.5 eventually satisfy bigG = bigG - 8",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "optimisticButton",
                "bigG"
            ],
            "qualifier_word": "if",
            "pre_condition": "(! optimisticButton)",
            "regular_condition": "(! optimisticButton)",
            "conditionTextRange": [
                0,
                19
            ],
            "component_name": "System",
            "componentTextRange": [
                21,
                26
            ],
            "probability_bound": [
                ">",
                "0.5"
            ],
            "probabilityTextRange": [
                34,
                54
            ],
            "timingTextRange": [
                56,
                65
            ],
            "post_condition": "(bigG = bigG - 8)",
            "responseTextRange": [
                67,
                89
            ],
            "diagramVariables": "TC = <b><i>(! optimisticButton)</i></b>, Response = <b><i>(bigG = bigG - 8)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(! optimisticButton)</i></b> is true and any point in the interval where <b><i>(! optimisticButton)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.5",
            "regular_condition_unexp_pt": "(! optimisticButton)",
            "regular_condition_unexp_ft": "(! optimisticButton)",
            "regular_condition_unexp_pctl": "(! optimisticButton)",
            "regular_condition_SMV_pt": "(! optimisticButton)",
            "regular_condition_SMV_ft": "(! optimisticButton)",
            "regular_condition_PRISM_pctl": "(! optimisticButton)",
            "post_condition_unexp_pt": "(bigG = (bigG - 8))",
            "post_condition_unexp_ft": "(bigG = (bigG - 8))",
            "post_condition_unexp_pctl": "(bigG = (bigG - 8))",
            "post_condition_SMV_pt": "(bigG = (bigG - 8))",
            "post_condition_SMV_ft": "(bigG = (bigG - 8))",
            "post_condition_PRISM_pctl": "(bigG = (bigG - 8))",
            "ft": "((LAST V (((! (! optimisticButton)) & ((! LAST) & (X (! optimisticButton)))) -> (X ((! LAST) U (bigG = (bigG - 8)))))) & ((! optimisticButton) -> ((! LAST) U (bigG = (bigG - 8)))))",
            "pt": "((H (! (! optimisticButton))) | (! ((! (bigG = (bigG - 8))) S ((! (bigG = (bigG - 8))) & ((! optimisticButton) & (Z (! (! optimisticButton))))))))",
            "pctl": "P>=1[((G (((! (! optimisticButton)) & (X (! optimisticButton))) => (X (P>0.5[(F (bigG = (bigG - 8)))])))) & ((! optimisticButton) => (P>0.5[(F (bigG = (bigG - 8)))])))]",
            "ptExpanded": "((H optimisticButton) | (! ((! (bigG = (bigG - 8))) S ((! (bigG = (bigG - 8))) & ((! optimisticButton) & (Z optimisticButton))))))",
            "CoCoSpecCode": "(H(optimisticButton) or not (SI((not (optimisticButton) and ZtoPre(optimisticButton)),not ((bigG = (bigG - 8))))))",
            "ftExpanded": "((LAST V ((optimisticButton & ((! LAST) & (X (! optimisticButton)))) -> (X ((! LAST) U (bigG = (bigG - 8)))))) & ((! optimisticButton) -> ((! LAST) U (bigG = (bigG - 8)))))",
            "pctlExpanded": "P>=1[((G (((! (! optimisticButton)) & (X (! optimisticButton))) => (X (P>0.5[(F (bigG = (bigG - 8)))])))) & ((! optimisticButton) => (P>0.5[(F (bigG = (bigG - 8)))])))]",
            "ftInfAUExpanded": "((G ((optimisticButton & (X (! optimisticButton))) -> (X (F (bigG = (bigG - 8)))))) & ((! optimisticButton) -> (F (bigG = (bigG - 8)))))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae052b-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R98",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "when a software failure is detected, the system will be self-healing within 2 min with probability 0.99",
        "comments": "",
        "fulltext": "upon FailureDetection system shall with probability > 0.99 within 2 minutes satisfy selfHealing",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "FailureDetection",
                "selfHealing"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(FailureDetection)",
            "regular_condition": "(FailureDetection)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "system",
            "componentTextRange": [
                22,
                27
            ],
            "probability_bound": [
                ">",
                "0.99"
            ],
            "probabilityTextRange": [
                35,
                57
            ],
            "duration": "2",
            "timingTextRange": [
                59,
                74
            ],
            "post_condition": "(selfHealing)",
            "responseTextRange": [
                76,
                94
            ],
            "diagramVariables": "TC = <b><i>(FailureDetection)</i></b>,  n = <b><i>2</i></b>, Response = <b><i>(selfHealing)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(FailureDetection)</i></b> is true and any point in the interval where <b><i>(FailureDetection)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>2</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>2</i></b>). If the interval ends sooner than trigger+<b><i>2</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.99",
            "regular_condition_unexp_pt": "FailureDetection",
            "regular_condition_unexp_ft": "FailureDetection",
            "regular_condition_unexp_pctl": "FailureDetection",
            "regular_condition_SMV_pt": "FailureDetection",
            "regular_condition_SMV_ft": "FailureDetection",
            "regular_condition_PRISM_pctl": "FailureDetection",
            "post_condition_unexp_pt": "selfHealing",
            "post_condition_unexp_ft": "selfHealing",
            "post_condition_unexp_pctl": "selfHealing",
            "post_condition_SMV_pt": "selfHealing",
            "post_condition_SMV_ft": "selfHealing",
            "post_condition_PRISM_pctl": "selfHealing",
            "ft": "((LAST V (((! FailureDetection) & ((! LAST) & (X FailureDetection))) -> (X ((F[<=2] selfHealing) | (F[<2] LAST))))) & (FailureDetection -> ((F[<=2] selfHealing) | (F[<2] LAST))))",
            "pt": "(H ((O[=2] ((FailureDetection & (Z (! FailureDetection))) & (! selfHealing))) -> (O[<2] ((Z FALSE) | selfHealing))))",
            "pctl": "P>=1[((G (((! FailureDetection) & (X FailureDetection)) => (X (P>0.99[(F<=2 selfHealing)])))) & (FailureDetection => (P>0.99[(F[<=2] selfHealing)])))]",
            "ptExpanded": "(H ((O[2,2] ((FailureDetection & (Z (! FailureDetection))) & (! selfHealing))) -> (O[0,1] ((Z FALSE) | selfHealing))))",
            "CoCoSpecCode": "H((OT(2, 2, ((FailureDetection and ZtoPre(not (FailureDetection))) and not (selfHealing))) => OT(1, 0, (ZtoPre(false) or selfHealing))))",
            "ftExpanded": "((LAST V (((! FailureDetection) & ((! LAST) & (X FailureDetection))) -> (X ((F[0,2] selfHealing) | (F[0,1] LAST))))) & (FailureDetection -> ((F[0,2] selfHealing) | (F[0,1] LAST))))",
            "pctlExpanded": "P>=1[((G (((! FailureDetection) & (X FailureDetection)) => (X (P>0.99[(F<=2 selfHealing)])))) & (FailureDetection => (P>0.99[(F[<=2] selfHealing)])))]",
            "ftInfAUExpanded": "((G (((! FailureDetection) & (X FailureDetection)) -> (X (F[0,2] selfHealing)))) & (FailureDetection -> (F[0,2] selfHealing)))",
            "component": "system"
        },
        "status": "",
        "_id": "7fae052c-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R18",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "At least 95% of the sessions (from login to logout) shall require at most 1 second of computation time. ( the probability to reach state 11 (Logout) within 1 s is greater than 0.95)",
        "comments": "",
        "fulltext": "System shall with probability >= 0.95 within 1 second satisfy s=11",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "s"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">=",
                "0.95"
            ],
            "probabilityTextRange": [
                13,
                36
            ],
            "duration": "1",
            "timingTextRange": [
                38,
                52
            ],
            "post_condition": "(s = 11)",
            "responseTextRange": [
                54,
                65
            ],
            "diagramVariables": " n = <b><i>1</i></b>, Response = <b><i>(s = 11)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>1</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>1</i></b>). If the interval ends sooner than trigger+<b><i>1</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">=0.95",
            "post_condition_unexp_pt": "(s = 11)",
            "post_condition_unexp_ft": "(s = 11)",
            "post_condition_unexp_pctl": "(s = 11)",
            "post_condition_SMV_pt": "(s = 11)",
            "post_condition_SMV_ft": "(s = 11)",
            "post_condition_PRISM_pctl": "(s = 11)",
            "ft": "((F[<=1] (s = 11)) | (F[<1] LAST))",
            "pt": "(H ((H (! (s = 11))) -> (O[<1] (Z FALSE))))",
            "pctl": "(P>=0.95[(F<=1 (s = 11))])",
            "ptExpanded": "(H ((H (! (s = 11))) -> (O[0,0] (Z FALSE))))",
            "CoCoSpecCode": "H((H(not ((s = 11))) => OT(0, 0, ZtoPre(false))))",
            "ftExpanded": "((F[0,1] (s = 11)) | (F[0,0] LAST))",
            "pctlExpanded": "(P>=0.95[(F<=1 (s = 11))])",
            "ftInfAUExpanded": "(F[0,1] (s = 11))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae052d-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R135",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "The utilization of the AnalyzeData (UAnalyzeData) must be less than 90%",
        "comments": "",
        "fulltext": "System shall with probability <0.9 eventually satisfy AnalyseData",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "AnalyseData"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<",
                "0.9"
            ],
            "probabilityTextRange": [
                13,
                33
            ],
            "timingTextRange": [
                35,
                44
            ],
            "post_condition": "(AnalyseData)",
            "responseTextRange": [
                46,
                64
            ],
            "diagramVariables": "Response = <b><i>(AnalyseData)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<0.9",
            "post_condition_unexp_pt": "AnalyseData",
            "post_condition_unexp_ft": "AnalyseData",
            "post_condition_unexp_pctl": "AnalyseData",
            "post_condition_SMV_pt": "AnalyseData",
            "post_condition_SMV_ft": "AnalyseData",
            "post_condition_PRISM_pctl": "AnalyseData",
            "ft": "((! LAST) U AnalyseData)",
            "pt": "(O AnalyseData)",
            "pctl": "(P<0.9[(F AnalyseData)])",
            "ptExpanded": "(O AnalyseData)",
            "CoCoSpecCode": "O(AnalyseData)",
            "ftExpanded": "((! LAST) U AnalyseData)",
            "pctlExpanded": "(P<0.9[(F AnalyseData)])",
            "ftInfAUExpanded": "(F AnalyseData)",
            "component": "System"
        },
        "status": "",
        "_id": "7fae052e-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R40",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "The probability for a request of experiencing an error HTTP 503 (e.g., too many incoming requests) is less than 0.001\n\nP≤0.001(X s = 7)",
        "comments": "",
        "fulltext": "System shall with probability <= 0.001 at the next timepoint satisfy s=7",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "next",
            "response": "satisfaction",
            "variables": [
                "s"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                "<=",
                "0.001"
            ],
            "probabilityTextRange": [
                13,
                37
            ],
            "timingTextRange": [
                39,
                59
            ],
            "post_condition": "(s = 7)",
            "responseTextRange": [
                61,
                71
            ],
            "diagramVariables": "Response = <b><i>(s = 7)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_next_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<=0.001",
            "post_condition_unexp_pt": "(s = 7)",
            "post_condition_unexp_ft": "(s = 7)",
            "post_condition_unexp_pctl": "(s = 7)",
            "post_condition_SMV_pt": "(s = 7)",
            "post_condition_SMV_ft": "(s = 7)",
            "post_condition_PRISM_pctl": "(s = 7)",
            "ft": "(LAST | (X (s = 7)))",
            "pt": "(H ((Y (Z FALSE)) -> (s = 7)))",
            "pctl": "(P<=0.001[(LAST | (X (s = 7)))])",
            "ptExpanded": "(H ((Y (Z FALSE)) -> (s = 7)))",
            "CoCoSpecCode": "H((YtoPre(ZtoPre(false)) => (s = 7)))",
            "ftExpanded": "(LAST | (X (s = 7)))",
            "pctlExpanded": "(P<=0.001[(false | (X (s = 7)))])",
            "ftInfAUExpanded": "(X (s = 7))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae052f-41f1-11f0-bf1e-a1c2a6d8f198"
    },
    {
        "reqid": "R29",
        "parent_reqid": "",
        "project": "LiteratureProbabilisticRequirements",
        "rationale": "\"the probability of throughput more than 9.8 is greater\nthan 80 percent\"",
        "comments": "",
        "fulltext": "System shall with probability >0.8 eventually satisfy throughput>9.8",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "throughput"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "probability_bound": [
                ">",
                "0.8"
            ],
            "probabilityTextRange": [
                13,
                33
            ],
            "timingTextRange": [
                35,
                44
            ],
            "post_condition": "(throughput > 9.8)",
            "responseTextRange": [
                46,
                67
            ],
            "diagramVariables": "Response = <b><i>(throughput > 9.8)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": ">0.8",
            "post_condition_unexp_pt": "(throughput > 9.8)",
            "post_condition_unexp_ft": "(throughput > 9.8)",
            "post_condition_unexp_pctl": "(throughput > 9.8)",
            "post_condition_SMV_pt": "(throughput > 9.8)",
            "post_condition_SMV_ft": "(throughput > 9.8)",
            "post_condition_PRISM_pctl": "(throughput > 9.8)",
            "ft": "((! LAST) U (throughput > 9.8))",
            "pt": "(O (throughput > 9.8))",
            "pctl": "(P>0.8[(F (throughput > 9.8))])",
            "ptExpanded": "(O (throughput > 9.8))",
            "CoCoSpecCode": "O((throughput > 9.8))",
            "ftExpanded": "((! LAST) U (throughput > 9.8))",
            "pctlExpanded": "(P>0.8[(F (throughput > 9.8))])",
            "ftInfAUExpanded": "(F (throughput > 9.8))",
            "component": "System"
        },
        "status": "",
        "_id": "7fae0530-41f1-11f0-bf1e-a1c2a6d8f198"
    }
]